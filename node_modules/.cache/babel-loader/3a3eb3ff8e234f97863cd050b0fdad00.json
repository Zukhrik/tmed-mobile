{"ast":null,"code":"import useWebSocket from 'react-use-websocket';\nimport { useEffect, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel, socketCountersMount } from '../../Models/app';\nimport { addedMessageToListFromSocket, addedMessageFromSocket } from '../../Models/chat-model';\nimport { useLocation } from 'react-router-dom';\nexport function useChatWs() {\n  const [chatsUrl, setChatsUrl] = useState(null);\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const {\n    pathname\n  } = useLocation();\n\n  const getAddedMessageToListFromSocket = data => {\n    const objectData = data.object;\n    const payload = {\n      is_muted: objectData.is_muted,\n      last_message: {\n        date: objectData.date,\n        file: objectData.file,\n        sender: objectData.sender,\n        text: objectData.text\n      },\n      receiver: objectData.sender,\n      receiver_type: 'user',\n      unread_count: data.counters.unread_count\n    };\n    addedMessageToListFromSocket({\n      type: 'user',\n      payload,\n      key: objectData.sender.username\n    });\n  };\n\n  const getAddedMessageToSingleChat = data => {\n    addedMessageFromSocket({\n      payload: data,\n      key: data.sender.username\n    });\n  };\n\n  useWebSocket(chatsUrl, {\n    onMessage: e => {\n      const data = JSON.parse(e.data);\n\n      if (data.counters && data.counters.unread_count_all) {\n        socketCountersMount({\n          chatUnreadCounter: data.counters.unread_count_all\n        });\n      }\n\n      if (data.action === 'add' && data.object) {\n        const isSingle = pathname.match(/([^/]*)\\/[^/]*$/)[1] === 'chat';\n        getAddedMessageToListFromSocket(data);\n\n        if (isSingle) {\n          getAddedMessageToSingleChat(data.object);\n        }\n      }\n    },\n    onError: e => {// console.log(e)\n    }\n  });\n  useEffect(() => {\n    if (token) {\n      setChatsUrl(`wss://py.dwed.biz/ws/v1.0/chats/?token=${token}`);\n    } else {\n      setChatsUrl(null);\n    }\n  }, [token]);\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/app/use-chat-ws.js"],"names":["useWebSocket","useEffect","useState","useStore","$appModel","socketCountersMount","addedMessageToListFromSocket","addedMessageFromSocket","useLocation","useChatWs","chatsUrl","setChatsUrl","$app","token","pathname","getAddedMessageToListFromSocket","data","objectData","object","payload","is_muted","last_message","date","file","sender","text","receiver","receiver_type","unread_count","counters","type","key","username","getAddedMessageToSingleChat","onMessage","e","JSON","parse","unread_count_all","chatUnreadCounter","action","isSingle","match","onError"],"mappings":"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","sourcesContent":["import useWebSocket from 'react-use-websocket'\nimport {useEffect, useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel, socketCountersMount} from '../../Models/app'\nimport {addedMessageToListFromSocket, addedMessageFromSocket,} from '../../Models/chat-model'\nimport {useLocation} from 'react-router-dom'\n\nexport function useChatWs() {\n    const [chatsUrl, setChatsUrl] = useState(null)\n    const {$app: {token}} = useStore($appModel)\n    const {pathname} = useLocation()\n\n    const getAddedMessageToListFromSocket = (data) => {\n        const objectData = data.object\n        const payload = {\n            is_muted: objectData.is_muted,\n            last_message: {\n                date: objectData.date,\n                file: objectData.file,\n                sender: objectData.sender,\n                text: objectData.text,\n            },\n            receiver: objectData.sender,\n            receiver_type: 'user',\n            unread_count: data.counters.unread_count\n        }\n        addedMessageToListFromSocket({type: 'user', payload, key: objectData.sender.username})\n    }\n\n    const getAddedMessageToSingleChat = (data) => {\n        addedMessageFromSocket({payload: data, key: data.sender.username})\n    }\n\n    useWebSocket(chatsUrl, {\n        onMessage: (e) => {\n            const data = JSON.parse(e.data)\n            if (data.counters && data.counters.unread_count_all) {\n                socketCountersMount({chatUnreadCounter: data.counters.unread_count_all})\n            }\n            if (data.action === 'add' && data.object) {\n                const isSingle = pathname.match(/([^/]*)\\/[^/]*$/)[1] === 'chat'\n                getAddedMessageToListFromSocket(data)\n                if (isSingle) {\n                    getAddedMessageToSingleChat(data.object)\n                }\n            }\n        },\n        onError: (e) => {\n            // console.log(e)\n        }\n    })\n\n\n    useEffect(() => {\n        if (token) {\n            setChatsUrl(`wss://py.dwed.biz/ws/v1.0/chats/?token=${token}`)\n        } else {\n            setChatsUrl(null)\n        }\n    }, [token])\n}"]},"metadata":{},"sourceType":"module"}