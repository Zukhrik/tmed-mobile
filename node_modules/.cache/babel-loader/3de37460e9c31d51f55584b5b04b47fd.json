{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Player/index.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Slider } from 'antd';\nimport Hls from 'hls.js';\nimport { AnimateButtonsBlock, DwedPlayerBlock, PlayerControlBar, PlayerControlLeft, PlayerControlRight, PlayerVolumeBlock } from './atoms';\nimport { DwedFullScreenMaximizeSvg, DwedFullScreenMinimizeSvg, DwedInfoSvg, DwedPauseSvg, DwedPlaySvg, DwedRollingSvg, DwedVolumeDownSvg, DwedVolumeMuteSvg, DwedVolumeUpSvg } from \"./media\";\nimport { VideoError } from \"./atoms/block\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from '../../UIComponents/Button';\nexport const DwedPlayer = props => {\n  const {\n    url,\n    hotKey\n  } = props;\n  const {\n    t\n  } = useTranslation();\n  const playerRef = useRef(null);\n  const playerBlockRef = useRef(null);\n  const [volume, setVolume] = useState(10);\n  const [paused, setPaused] = useState(false);\n  const [muted, setMuted] = useState(false);\n  const [fullScreen, setFullScreen] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [animateButton, setAnimateButton] = useState(undefined);\n  const [error, setError] = useState(false);\n  const [showControl, setShowControl] = useState(false);\n\n  const playVideo = () => {\n    setAnimateButton('play'); // playerRef?.current?.play()\n\n    setPaused(false);\n    setTimeout(() => {\n      setAnimateButton(undefined);\n    }, 300); // playerRef.current.muted = true\n  };\n\n  const pauseVideo = () => {\n    setAnimateButton('pause');\n\n    if (playerRef && playerRef.current) {\n      playerRef.current.pause();\n      setPaused(true);\n      setTimeout(() => {\n        setAnimateButton(undefined);\n      }, 300);\n    } // playerRef.current.muted = false\n\n  };\n\n  const togglePlayPauseVideo = () => {\n    var _playerRef$current, _playerRef$current2;\n\n    if ((playerRef === null || playerRef === void 0 ? void 0 : (_playerRef$current = playerRef.current) === null || _playerRef$current === void 0 ? void 0 : _playerRef$current.paused) || (playerRef === null || playerRef === void 0 ? void 0 : (_playerRef$current2 = playerRef.current) === null || _playerRef$current2 === void 0 ? void 0 : _playerRef$current2.ended)) {\n      playVideo();\n    } else {\n      pauseVideo();\n    }\n  }; // const toggleControls = () => {\n  //     playerRef.current.controls = !playerRef.current.controls;\n  // }\n\n\n  const changeFullScreen = () => {\n    if (document.fullscreenElement || document.webkitFullscreenElement || document.mozFullScreenElement || document.msFullscreenElement) {\n      setFullScreen(false);\n\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      } else if (document.mozCancelFullScreen) {\n        document.mozCancelFullScreen();\n      } else if (document.webkitExitFullscreen) {\n        document.webkitExitFullscreen();\n      } else if (document.msExitFullscreen) {\n        document.msExitFullscreen();\n      }\n    } else {\n      setFullScreen(true);\n      const element = playerBlockRef === null || playerBlockRef === void 0 ? void 0 : playerBlockRef.current;\n\n      if (element.requestFullscreen) {\n        element.requestFullscreen();\n      } else if (element.mozRequestFullScreen) {\n        element.mozRequestFullScreen();\n      } else if (element.webkitRequestFullscreen) {\n        element.webkitRequestFullscreen();\n      } else if (element.msRequestFullscreen) {\n        element.msRequestFullscreen();\n      }\n    }\n  };\n\n  const muteVideo = () => {\n    playerRef.current.muted = !playerRef.current.muted;\n    setMuted(!muted);\n  };\n\n  const changeVolume = e => {\n    setVolume(e);\n\n    if (e === 0) {\n      setMuted(true);\n      playerRef.current.muted = true;\n    } else {\n      setMuted(false);\n      playerRef.current.muted = false;\n    }\n\n    playerRef.current.volume = e / 10;\n  }; // function togglePictureInPicture() {\n  //     if (document.pictureInPictureElement) {\n  //         console.log('noP')\n  //         document.exitPictureInPicture()\n  //     } else {\n  //         console.log('yes')\n  //         if (document.pictureInPictureEnabled) {\n  //             console.log('yesP')\n  //             playerRef.current.requestPictureInPicture()\n  //         }\n  //     }\n  // }\n\n\n  useEffect(() => {\n    if (!error && playerRef && playerRef.current) {\n      var _playerRef$current3;\n\n      setVolume(playerRef.current.volume * 10);\n      setPaused(playerRef.current.paused);\n      setMuted(playerRef.current.muted);\n      playerRef.current.removeAttribute('controls');\n\n      if (playerRef === null || playerRef === void 0 ? void 0 : (_playerRef$current3 = playerRef.current) === null || _playerRef$current3 === void 0 ? void 0 : _playerRef$current3.canPlayType('application/vnd.apple.mpegurl')) {\n        setError(false);\n        playerRef.current.src = url;\n        playerRef.current.addEventListener('waiting', function (e) {\n          setLoading(true);\n        });\n        playerRef.current.addEventListener('canplay', function (e) {\n          setLoading(false);\n        });\n\n        playerRef.current.onloadeddata = () => {\n          playVideo();\n          setLoading(false);\n        };\n\n        playerRef.current.addEventListener('error', function (e) {\n          setLoading(false);\n          setError(true);\n        });\n      } else if (Hls.isSupported()) {\n        const hls = new Hls({\n          enableWorker: false\n        });\n        hls.attachMedia(playerRef.current);\n        hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n          hls.loadSource(url);\n          hls.on(Hls.Events.MANIFEST_PARSED, () => {\n            playVideo();\n          });\n        });\n        hls.on(Hls.Events.ERROR, function (event, data) {\n          if (data.fatal) {\n            setError(true);\n\n            switch (data.type) {\n              case Hls.ErrorTypes.NETWORK_ERROR:\n                hls.startLoad();\n                break;\n\n              case Hls.ErrorTypes.MEDIA_ERROR:\n                hls.recoverMediaError();\n                break;\n\n              default:\n                // _initPlayer();\n                break;\n            }\n          }\n        });\n      } else {\n        alert('Please use a modern browser to play the video');\n      }\n    }\n  }, [playerRef, error, hotKey, url]);\n  let timeout;\n\n  const mouseMoveEvent = () => {\n    !showControl && setShowControl(true);\n    if (timeout) clearTimeout(timeout);\n    timeout = setTimeout(() => {\n      timeout && clearTimeout(timeout);\n      setShowControl(false);\n    }, 5000);\n  }; // useEffect(() => {\n  //     let timeout = null\n  //     window.addEventListener('mousemove', (e) => {\n  //         if (playerBlockRef && playerBlockRef.current && playerBlockRef.current.contains(e.target)) {\n  //             setHideControl(true)\n  //             timeout = setTimeout(() => {\n  //                 setHideControl(false)\n  //             },5000)\n  //         }\n  //     })\n  //\n  //     return () => {\n  //       window.removeEventListener('mousemove', () => false)\n  //         clearTimeout(timeout)\n  //     }\n  //\n  // }, [playerBlockRef])\n  // playerRef?.current?.ontimeupdate((e) => console.log('time', e))\n\n\n  return /*#__PURE__*/React.createElement(DwedPlayerBlock, {\n    className: `${fullScreen ? 'full-screen' : ''} ${showControl ? 'active' : ''}`,\n    ref: playerBlockRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, !error ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AnimateButtonsBlock, {\n    onClick: () => togglePlayPauseVideo(),\n    onMouseMove: () => mouseMoveEvent(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 25\n    }\n  }, loading && /*#__PURE__*/React.createElement(DwedRollingSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 44\n    }\n  }), !loading && animateButton && animateButton === 'play' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: 'animate',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(DwedPlaySvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 41\n    }\n  })) : animateButton === 'pause' ? /*#__PURE__*/React.createElement(\"div\", {\n    className: 'animate',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(DwedPauseSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 45\n    }\n  })) : null), /*#__PURE__*/React.createElement(\"video\", {\n    autoPlay: true,\n    playsInline: true,\n    onClick: () => togglePlayPauseVideo() // tabIndex=\"-1\"\n    ,\n    ref: playerRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(PlayerControlBar, {\n    onMouseMove: () => {\n      timeout && clearTimeout(timeout);\n      !showControl && setShowControl(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(PlayerControlLeft, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    id: \"playButton\",\n    className: 'player-buttons',\n    onClick: () => paused ? playVideo() : pauseVideo(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 33\n    }\n  }, paused ? /*#__PURE__*/React.createElement(DwedPlaySvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 45\n    }\n  }) : /*#__PURE__*/React.createElement(DwedPauseSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 45\n    }\n  })), /*#__PURE__*/React.createElement(PlayerVolumeBlock, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: 'player-buttons',\n    onClick: () => muteVideo(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 37\n    }\n  }, !muted && volume > 5 ? /*#__PURE__*/React.createElement(DwedVolumeUpSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 49\n    }\n  }) : !muted && volume > 0 ? /*#__PURE__*/React.createElement(DwedVolumeDownSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 53\n    }\n  }) : /*#__PURE__*/React.createElement(DwedVolumeMuteSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(Slider, {\n    min: 0,\n    max: 10,\n    onChange: changeVolume,\n    defaultValue: 10,\n    value: volume,\n    tipFormatter: null,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 37\n    }\n  }))), /*#__PURE__*/React.createElement(PlayerControlRight, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: 'player-buttons',\n    onClick: () => changeFullScreen(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 33\n    }\n  }, fullScreen ? /*#__PURE__*/React.createElement(DwedFullScreenMinimizeSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304,\n      columnNumber: 45\n    }\n  }) : /*#__PURE__*/React.createElement(DwedFullScreenMaximizeSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 45\n    }\n  }))))) : /*#__PURE__*/React.createElement(VideoError, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(DwedInfoSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 29\n    }\n  }), t('error')), /*#__PURE__*/React.createElement(Button, {\n    style: {\n      'background': '#7F92A0',\n      borderColor: '#7F92A0',\n      marginTop: 17,\n      textTransform: 'initial'\n    },\n    onClick: () => {\n      setError(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 25\n    }\n  }, t('try-again'))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Player/index.js"],"names":["React","useEffect","useRef","useState","Slider","Hls","AnimateButtonsBlock","DwedPlayerBlock","PlayerControlBar","PlayerControlLeft","PlayerControlRight","PlayerVolumeBlock","DwedFullScreenMaximizeSvg","DwedFullScreenMinimizeSvg","DwedInfoSvg","DwedPauseSvg","DwedPlaySvg","DwedRollingSvg","DwedVolumeDownSvg","DwedVolumeMuteSvg","DwedVolumeUpSvg","VideoError","useTranslation","Button","DwedPlayer","props","url","hotKey","t","playerRef","playerBlockRef","volume","setVolume","paused","setPaused","muted","setMuted","fullScreen","setFullScreen","loading","setLoading","animateButton","setAnimateButton","undefined","error","setError","showControl","setShowControl","playVideo","setTimeout","pauseVideo","current","pause","togglePlayPauseVideo","ended","changeFullScreen","document","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","exitFullscreen","mozCancelFullScreen","webkitExitFullscreen","msExitFullscreen","element","requestFullscreen","mozRequestFullScreen","webkitRequestFullscreen","msRequestFullscreen","muteVideo","changeVolume","e","removeAttribute","canPlayType","src","addEventListener","onloadeddata","isSupported","hls","enableWorker","attachMedia","on","Events","MEDIA_ATTACHED","loadSource","MANIFEST_PARSED","ERROR","event","data","fatal","type","ErrorTypes","NETWORK_ERROR","startLoad","MEDIA_ERROR","recoverMediaError","alert","timeout","mouseMoveEvent","clearTimeout","borderColor","marginTop","textTransform"],"mappings":"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","sourcesContent":["import React, {useEffect, useRef, useState} from 'react'\nimport {Slider} from 'antd'\nimport Hls from 'hls.js'\nimport {\n    AnimateButtonsBlock,\n    DwedPlayerBlock,\n    PlayerControlBar,\n    PlayerControlLeft,\n    PlayerControlRight,\n    PlayerVolumeBlock\n} from './atoms'\nimport {\n    DwedFullScreenMaximizeSvg,\n    DwedFullScreenMinimizeSvg, DwedInfoSvg,\n    DwedPauseSvg,\n    DwedPlaySvg, DwedRollingSvg,\n    DwedVolumeDownSvg,\n    DwedVolumeMuteSvg,\n    DwedVolumeUpSvg,\n} from \"./media\";\nimport {VideoError} from \"./atoms/block\";\nimport {useTranslation} from \"react-i18next\";\nimport {Button} from '../../UIComponents/Button'\n\n\nexport const DwedPlayer = (props) => {\n    const {\n        url,\n        hotKey\n    } = props\n    const {t} = useTranslation()\n    const playerRef = useRef(null)\n    const playerBlockRef = useRef(null)\n\n    const [volume, setVolume] = useState(10);\n    const [paused, setPaused] = useState(false);\n    const [muted, setMuted] = useState(false);\n    const [fullScreen, setFullScreen] = useState(false);\n    const [loading, setLoading] = useState(true);\n    const [animateButton, setAnimateButton] = useState(undefined);\n    const [error, setError] = useState(false);\n    const [showControl, setShowControl] = useState(false);\n\n    const playVideo = () => {\n        setAnimateButton('play')\n        // playerRef?.current?.play()\n        setPaused(false)\n        setTimeout(() => {\n            setAnimateButton(undefined)\n        }, 300)\n        // playerRef.current.muted = true\n    }\n\n    const pauseVideo = () => {\n        setAnimateButton('pause')\n        if (playerRef && playerRef.current) {\n            playerRef.current.pause()\n            setPaused(true)\n            setTimeout(() => {\n                setAnimateButton(undefined)\n            }, 300)\n        }\n        // playerRef.current.muted = false\n    }\n    const togglePlayPauseVideo = () => {\n        if (playerRef?.current?.paused || playerRef?.current?.ended) {\n            playVideo()\n        } else {\n            pauseVideo()\n        }\n    }\n\n    // const toggleControls = () => {\n    //     playerRef.current.controls = !playerRef.current.controls;\n    // }\n\n    const changeFullScreen = () => {\n        if (\n            document.fullscreenElement ||\n            document.webkitFullscreenElement ||\n            document.mozFullScreenElement ||\n            document.msFullscreenElement\n        ) {\n            setFullScreen(false)\n            if (document.exitFullscreen) {\n                document.exitFullscreen();\n            } else if (document.mozCancelFullScreen) {\n                document.mozCancelFullScreen();\n            } else if (document.webkitExitFullscreen) {\n                document.webkitExitFullscreen();\n            } else if (document.msExitFullscreen) {\n                document.msExitFullscreen();\n            }\n        } else {\n            setFullScreen(true)\n            const element = playerBlockRef?.current;\n            if (element.requestFullscreen) {\n                element.requestFullscreen();\n            } else if (element.mozRequestFullScreen) {\n                element.mozRequestFullScreen();\n            } else if (element.webkitRequestFullscreen) {\n                element.webkitRequestFullscreen();\n            } else if (element.msRequestFullscreen) {\n                element.msRequestFullscreen();\n            }\n        }\n    }\n    const muteVideo = () => {\n        playerRef.current.muted = !playerRef.current.muted\n        setMuted(!muted)\n    }\n\n    const changeVolume = (e) => {\n        setVolume(e)\n        if (e === 0) {\n            setMuted(true)\n            playerRef.current.muted = true\n        } else {\n            setMuted(false)\n            playerRef.current.muted = false\n        }\n        playerRef.current.volume = (e / 10)\n    }\n\n    // function togglePictureInPicture() {\n    //     if (document.pictureInPictureElement) {\n    //         console.log('noP')\n    //         document.exitPictureInPicture()\n    //     } else {\n    //         console.log('yes')\n    //         if (document.pictureInPictureEnabled) {\n    //             console.log('yesP')\n    //             playerRef.current.requestPictureInPicture()\n    //         }\n    //     }\n    // }\n\n    useEffect(() => {\n        if (!error &&playerRef && playerRef.current) {\n            setVolume(playerRef.current.volume * 10)\n            setPaused(playerRef.current.paused)\n            setMuted(playerRef.current.muted)\n            playerRef.current.removeAttribute('controls')\n\n            if (playerRef?.current?.canPlayType('application/vnd.apple.mpegurl')) {\n                setError(false)\n                playerRef.current.src = url;\n                playerRef.current.addEventListener('waiting', function (e) {\n                    setLoading(true)\n                })\n                playerRef.current.addEventListener('canplay', function (e) {\n                    setLoading(false)\n                })\n                playerRef.current.onloadeddata = () => {\n                    playVideo()\n                    setLoading(false)\n                }\n                playerRef.current.addEventListener('error', function (e) {\n                    setLoading(false)\n                    setError(true)\n                })\n\n            } else if (Hls.isSupported()) {\n                const hls = new Hls({\n                    enableWorker: false,\n                })\n                hls.attachMedia(playerRef.current);\n                hls.on(Hls.Events.MEDIA_ATTACHED, () => {\n                    hls.loadSource(url)\n                    hls.on(Hls.Events.MANIFEST_PARSED, () => {\n                        playVideo()\n                    })\n                })\n\n\n                hls.on(Hls.Events.ERROR, function (event, data) {\n                    if (data.fatal) {\n                        setError(true)\n                        switch (data.type) {\n                            case Hls.ErrorTypes.NETWORK_ERROR:\n                                hls.startLoad();\n                                break;\n                            case Hls.ErrorTypes.MEDIA_ERROR:\n                                hls.recoverMediaError();\n                                break;\n                            default:\n                                // _initPlayer();\n                                break;\n                        }\n                    }\n                })\n\n            } else {\n                alert('Please use a modern browser to play the video');\n            }\n\n        }\n\n    }, [playerRef, error, hotKey, url]);\n\n    let timeout\n    const mouseMoveEvent = () => {\n        !showControl && setShowControl(true)\n        if (timeout) clearTimeout(timeout)\n        timeout = setTimeout(() => {\n            timeout && clearTimeout(timeout)\n            setShowControl(false)\n        }, 5000)\n    }\n\n    // useEffect(() => {\n    //     let timeout = null\n    //     window.addEventListener('mousemove', (e) => {\n    //         if (playerBlockRef && playerBlockRef.current && playerBlockRef.current.contains(e.target)) {\n    //             setHideControl(true)\n    //             timeout = setTimeout(() => {\n    //                 setHideControl(false)\n    //             },5000)\n    //         }\n    //     })\n    //\n    //     return () => {\n    //       window.removeEventListener('mousemove', () => false)\n    //         clearTimeout(timeout)\n    //     }\n    //\n    // }, [playerBlockRef])\n\n    // playerRef?.current?.ontimeupdate((e) => console.log('time', e))\n    return (\n        <DwedPlayerBlock\n            className={`${fullScreen ? 'full-screen' : ''} ${showControl ? 'active' : ''}`}\n            ref={playerBlockRef}\n        >\n            {\n                !error ?\n                    <>\n                        <AnimateButtonsBlock\n                            onClick={() => togglePlayPauseVideo()}\n                            onMouseMove={() => mouseMoveEvent()}\n                        >\n                            {\n                                loading && <DwedRollingSvg/>\n                            }\n                            {\n                                !loading && animateButton &&\n                                animateButton === 'play' ?\n                                    <div className={'animate'}>\n                                        <DwedPlaySvg/>\n                                    </div>\n                                    : animateButton === 'pause' ?\n                                        <div className={'animate'}>\n                                            <DwedPauseSvg/>\n                                        </div> : null\n\n                            }\n                        </AnimateButtonsBlock>\n                        <video\n                            autoPlay={true}\n                            playsInline\n                            onClick={() => togglePlayPauseVideo()}\n                            // tabIndex=\"-1\"\n                            ref={playerRef}\n                        />\n                        <PlayerControlBar\n                            onMouseMove={() => {\n                                timeout && clearTimeout(timeout)\n                                !showControl && setShowControl(true)\n                            }}\n                        >\n                            <PlayerControlLeft>\n                                <button id='playButton' className={'player-buttons'}\n                                        onClick={() => paused ? playVideo() : pauseVideo()}>\n                                    {\n                                        paused ?\n                                            <DwedPlaySvg/> :\n                                            <DwedPauseSvg/>\n                                    }\n                                </button>\n                                <PlayerVolumeBlock>\n                                    <button className={'player-buttons'} onClick={() => muteVideo()}>\n                                        {\n                                            !muted && volume > 5 ?\n                                                <DwedVolumeUpSvg/> :\n                                                !muted && volume > 0 ?\n                                                    <DwedVolumeDownSvg/> :\n                                                    <DwedVolumeMuteSvg/>\n                                        }\n                                    </button>\n                                    <Slider\n                                        min={0}\n                                        max={10}\n                                        onChange={changeVolume}\n                                        defaultValue={10}\n                                        value={volume}\n                                        tipFormatter={null}\n                                    />\n                                </PlayerVolumeBlock>\n                            </PlayerControlLeft>\n                            <PlayerControlRight>\n                                <button className={'player-buttons'} onClick={() => changeFullScreen()}>\n                                    {\n                                        fullScreen ?\n                                            <DwedFullScreenMinimizeSvg/> :\n                                            <DwedFullScreenMaximizeSvg/>\n                                    }\n                                </button>\n                            </PlayerControlRight>\n                        </PlayerControlBar>\n                    </> :\n                    <VideoError>\n                        <div>\n                            <DwedInfoSvg/>\n                            {t('error')}\n                        </div>\n                        <Button\n                            style={{'background': '#7F92A0', borderColor: '#7F92A0', marginTop: 17, textTransform: 'initial'}}\n                            onClick={() => {\n                                setError(false)\n                            }}\n                        >\n                            {t('try-again')}\n                        </Button>\n                    </VideoError>\n            }\n\n        </DwedPlayerBlock>\n    )\n\n}\n"]},"metadata":{},"sourceType":"module"}