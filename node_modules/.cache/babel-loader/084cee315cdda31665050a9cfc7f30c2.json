{"ast":null,"code":"import { useCallback } from 'react';\nimport { useListQuery, useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useParams } from 'react-router-dom';\nimport { $appModel } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { useInfiniteQuery, useMutation } from 'react-query';\nimport { queryClient } from '../../App';\nimport cart from '../../Service-v2/cart';\nimport orgApi from '../../Service-v2/organization';\nexport function useOrgOrder() {\n  const {\n    query\n  } = useListQuery();\n  const {\n    organization\n  } = useParams();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n  const create = useMutation(cart.addToCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const {\n        pages\n      } = queryClient.getQueryData(['/org/offerings', organization, query]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization], pages);\n    },\n    onSuccess: () => {\n      getOrgOrderCartsMount({\n        org_slug_name: organization,\n        params: {\n          limit: 1,\n          offset: 0\n        },\n        clear: true\n      });\n    },\n    onError: (err, itemId, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization]);\n    }\n  });\n  const remove = useMutation(order.deleteOrderCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo);\n    },\n    onSuccess: () => {\n      getOrgOrderCartsMount({\n        org_slug_name: organization,\n        params: {\n          limit: 1,\n          offset: 0\n        },\n        clear: true\n      });\n      const orgOfferQuery = useInfiniteQuery(['/org/offerings', organization, query], async ({\n        pageParam = 0\n      }) => {\n        let params = {\n          limit: 10,\n          offset: pageParam\n        };\n\n        if (query) {\n          params = { ...params,\n            ...query\n          };\n        }\n\n        const res = await orgApi.getOrgOffering({\n          slug: organization,\n          params\n        });\n        return { ...res.data,\n          nextOffset: pageParam + 10\n        };\n      }, {\n        enabled: !!(organization && query),\n        getNextPageParam: data => {\n          if (data.count > data.nextOffset) {\n            return data === null || data === void 0 ? void 0 : data.nextOffset;\n          } else {\n            return undefined;\n          }\n        }\n      });\n    },\n    onError: (err, newData, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization, query]).then(res => {\n        if (res) {\n          getOrgOrderCartsMount({\n            org_slug_name: organization,\n            params: {\n              limit: 1,\n              offset: 0\n            },\n            clear: true\n          });\n        }\n      });\n    }\n  });\n  const onCreatingCartItem = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (event.inCart) {\n      remove.mutate({\n        offering_id: event.id\n      });\n    } else {\n      const data = [{\n        offering_id: event.id,\n        responsible_id: specId ? specId : orgSpecList[0].id,\n        qty: event.qty ? event.qty : 1\n      }];\n      create.mutate(data);\n    }\n  }, [create, specId, remove]);\n  const getIsLoading = useCallback(id => {\n    var _create$variables, _create$variables$dat, _remove$variables;\n\n    if (create.isLoading && (create === null || create === void 0 ? void 0 : (_create$variables = create.variables) === null || _create$variables === void 0 ? void 0 : (_create$variables$dat = _create$variables.data) === null || _create$variables$dat === void 0 ? void 0 : _create$variables$dat.offering_id) === id) {\n      return true;\n    }\n\n    if (remove.isLoading && (remove === null || remove === void 0 ? void 0 : (_remove$variables = remove.variables) === null || _remove$variables === void 0 ? void 0 : _remove$variables.offering_id) === id) {\n      return true;\n    }\n\n    return false;\n  }, [create, remove]);\n  return {\n    currency,\n    create,\n    remove,\n    getIsLoading,\n    onCreatingCartItem\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useListQuery","useUrlParams","useStore","order","useParams","$appModel","$accountModel","getOrgOrderCartsMount","useInfiniteQuery","useMutation","queryClient","cart","orgApi","useOrgOrder","query","organization","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","create","addToCart","onMutate","itemInfo","cancelQueries","pages","getQueryData","setQueryData","onSuccess","org_slug_name","params","limit","offset","clear","onError","err","itemId","rollback","onSettled","invalidateQueries","remove","deleteOrderCart","previousTodo","orgOfferQuery","pageParam","res","getOrgOffering","slug","data","nextOffset","enabled","getNextPageParam","count","undefined","newData","then","onCreatingCartItem","event","orgSpecList","responsible","inCart","mutate","offering_id","id","responsible_id","qty","getIsLoading","isLoading","variables"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport {useListQuery, useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useParams} from 'react-router-dom'\nimport {$appModel} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {useInfiniteQuery, useMutation} from 'react-query'\nimport {queryClient} from '../../App'\nimport cart from '../../Service-v2/cart'\nimport orgApi from '../../Service-v2/organization'\n\nexport function useOrgOrder() {\n    const {query} = useListQuery()\n    const {organization} = useParams()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    const create = useMutation(cart.addToCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const {pages} = queryClient.getQueryData(['/org/offerings', organization, query])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization], pages)\n        },\n        onSuccess: () => {\n            getOrgOrderCartsMount({\n                org_slug_name: organization,\n                params: {limit: 1, offset: 0},\n                clear: true\n            })\n        },\n        onError: (err, itemId, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization])\n        }\n    })\n    \n    const remove = useMutation(order.deleteOrderCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo)\n        },\n        onSuccess: () => {\n            getOrgOrderCartsMount({\n                org_slug_name: organization,\n                params: {limit: 1, offset: 0},\n                clear: true\n            })\n            const orgOfferQuery = useInfiniteQuery(\n                ['/org/offerings', organization, query],\n                async ({pageParam = 0}) => {\n            \n                    let params = {\n                        limit: 10,\n                        offset: pageParam\n                    }\n            \n                    if (query) {\n                        params = {...params, ...query}\n                    }\n                    const res = await orgApi.getOrgOffering({slug: organization, params})\n                    return {...res.data, nextOffset: pageParam + 10}\n                },\n                {\n                    enabled: !!(organization && query),\n                    getNextPageParam: (data) => {\n                        if (data.count > data.nextOffset) {\n                            return data?.nextOffset\n                        } else {\n                            return undefined\n                        }\n                    }\n                }\n            )\n        },\n        onError: (err, newData, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization, query])\n                .then(res => {\n                    if (res) {\n                        getOrgOrderCartsMount({\n                            org_slug_name: organization,\n                            params: {limit: 1, offset: 0},\n                            clear: true\n                        })\n                    }\n                })\n        }\n    })\n    \n    const onCreatingCartItem = useCallback((event) => {\n        const orgSpecList = event.responsible\n        if (event.inCart) {\n            remove.mutate({offering_id: event.id})\n        } else {\n            const data = [\n                {\n                    offering_id: event.id,\n                    responsible_id: specId ? specId : orgSpecList[0].id,\n                    qty: event.qty ? event.qty : 1\n                }\n            ]\n            create.mutate(data)\n        }\n    }, [create, specId, remove])\n    \n    const getIsLoading = useCallback((id) => {\n        if (create.isLoading && create?.variables?.data?.offering_id === id) {\n            return true\n        }\n        \n        if (remove.isLoading && remove?.variables?.offering_id === id) {\n            return true\n        }\n        \n        return false\n    }, [create, remove])\n    \n    \n    return {\n        currency,\n        create,\n        remove,\n        getIsLoading,\n        onCreatingCartItem\n    }\n}"]},"metadata":{},"sourceType":"module"}