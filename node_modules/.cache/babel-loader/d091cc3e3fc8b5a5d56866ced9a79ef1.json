{"ast":null,"code":"import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useStore } from 'effector-react';\nimport { useEffect, useState } from 'react';\nimport account from '../../Service/account';\nimport { useTranslation } from 'react-i18next';\nimport { $accountModel, accountAvatarsMount } from '../../Models/account-model';\nconst defaultValue = {\n  name: '',\n  avatar: undefined,\n  lastname: '',\n  surname: '',\n  business_ava: undefined,\n  user_lang: '',\n  category: null,\n  region: null,\n  currency: '',\n  birthday: '',\n  // gender: '',\n  phone: '',\n  email: ''\n};\nexport function useProfileInfo() {\n  const [initialValues, setInitialValues] = useState(defaultValue);\n  const {\n    $accountInfo,\n    $accountAvatars\n  } = useStore($accountModel);\n  const [mounted, setMounted] = useState(false);\n  const validationSchema = Yup.object().shape({});\n  const {\n    i18n\n  } = useTranslation();\n  const formik = useFormik({\n    validationSchema,\n    initialValues,\n    enableReinitialize: true,\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      const {\n        category,\n        region,\n        user_lang,\n        avatar\n      } = values;\n\n      const changeLanguage = language => {\n        i18n.changeLanguage(language).then();\n      };\n\n      const data = {\n        main_cat_id: category.id,\n        region_id: region.id,\n        lang: user_lang,\n        avatar: avatar\n      };\n\n      if (values.user_lang === 'uz') {\n        changeLanguage('uz');\n      } else if (values.user_lang === 'ru') {\n        changeLanguage('ru');\n      }\n\n      account.updateAccount({\n        data\n      }).then(res => {\n        if (res) {// console.log(res.data)\n        }\n      }).catch(error => {\n        const errorData = error.response.data.errors || [];\n        const touched = {};\n        const data = {};\n\n        if (errorData) {\n          for (let i = 0; i < errorData.length; i++) {\n            touched[errorData[i].field] = true;\n            data[errorData[i].field] = errorData[i].message.replace(/[[\\]']+/g, '');\n          }\n        }\n      }).finally();\n    }\n\n  });\n\n  const getData = value => {\n    return value || '';\n  };\n\n  useEffect(() => {\n    const accountData = $accountInfo === null || $accountInfo === void 0 ? void 0 : $accountInfo.data;\n    const avatarsData = $accountAvatars === null || $accountAvatars === void 0 ? void 0 : $accountAvatars.data;\n\n    if (!!accountData && !!avatarsData && !mounted) {\n      var _accountData$currency;\n\n      const business_ava = avatarsData.length > 0 && avatarsData.find(item => item.business_ava);\n      setInitialValues({ ...defaultValue,\n        region: getData(accountData.region),\n        category: getData(accountData.main_cat),\n        business_ava: business_ava ? {\n          stringUrl: getData(business_ava.image),\n          file: null\n        } : false,\n        currency: getData(accountData === null || accountData === void 0 ? void 0 : (_accountData$currency = accountData.currency) === null || _accountData$currency === void 0 ? void 0 : _accountData$currency.code),\n        user_lang: getData(accountData.user_lang),\n        birthday: getData(accountData.birthday),\n        phone: getData(accountData.phone),\n        gender: getData(accountData.gender),\n        email: getData(accountData.email),\n        name: getData(accountData.name),\n        lastname: getData(accountData.lastname),\n        surname: getData(accountData.surname),\n        avatar: getData(accountData.avatar)\n      });\n      setMounted(true);\n    }\n  }, [$accountInfo.data, $accountAvatars.data, mounted]);\n  useEffect(() => {\n    accountAvatarsMount();\n  }, []);\n  return {\n    formik\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/account/use-profile-info.js"],"names":["Yup","useFormik","useStore","useEffect","useState","account","useTranslation","$accountModel","accountAvatarsMount","defaultValue","name","avatar","undefined","lastname","surname","business_ava","user_lang","category","region","currency","birthday","phone","email","useProfileInfo","initialValues","setInitialValues","$accountInfo","$accountAvatars","mounted","setMounted","validationSchema","object","shape","i18n","formik","enableReinitialize","onSubmit","values","setSubmitting","changeLanguage","language","then","data","main_cat_id","id","region_id","lang","updateAccount","res","catch","error","errorData","response","errors","touched","i","length","field","message","replace","finally","getData","value","accountData","avatarsData","find","item","main_cat","stringUrl","image","file","code","gender"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {useStore} from 'effector-react'\r\nimport {useEffect, useState} from 'react'\r\nimport account from '../../Service/account'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {$accountModel, accountAvatarsMount} from '../../Models/account-model'\r\n\r\nconst defaultValue = {\r\n    name: '',\r\n    avatar: undefined,\r\n    lastname: '',\r\n    surname: '',\r\n    business_ava: undefined,\r\n    user_lang: '',\r\n    category: null,\r\n    region: null,\r\n    currency: '',\r\n    birthday: '',\r\n    // gender: '',\r\n    phone: '',\r\n    email: ''\r\n}\r\n\r\nexport function useProfileInfo() {\r\n    const [initialValues, setInitialValues] = useState(defaultValue)\r\n    const {$accountInfo, $accountAvatars} = useStore($accountModel)\r\n    const [mounted, setMounted] = useState(false)\r\n    const validationSchema = Yup.object().shape({})\r\n    const {i18n} = useTranslation()\r\n    \r\n    const formik = useFormik({\r\n        validationSchema,\r\n        initialValues,\r\n        enableReinitialize: true,\r\n        onSubmit(values, {setSubmitting}) {\r\n            setSubmitting(true)\r\n            const {category, region, user_lang, avatar} = values\r\n            const changeLanguage = (language) => {\r\n                i18n.changeLanguage(language).then()\r\n            }\r\n            \r\n            const data = {\r\n                main_cat_id: category.id,\r\n                region_id: region.id,\r\n                lang: user_lang,\r\n                avatar: avatar\r\n            }\r\n            \r\n            if (values.user_lang === 'uz') {\r\n                changeLanguage('uz')\r\n            } else if (values.user_lang === 'ru') {\r\n                changeLanguage('ru')\r\n            }\r\n    \r\n            account.updateAccount({data})\r\n                .then(res => {\r\n                    if (res) {\r\n                        // console.log(res.data)\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    const errorData = error.response.data.errors || []\r\n                    const touched = {}\r\n                    const data = {}\r\n                    if (errorData) {\r\n                        for (let i = 0; i < errorData.length; i++) {\r\n                            touched[errorData[i].field] = true\r\n                            data[errorData[i].field] = errorData[i].message.replace(/[[\\]']+/g, '')\r\n                        }\r\n                    }\r\n                })\r\n                .finally()\r\n        }\r\n    })\r\n    \r\n    const getData = (value) => {\r\n        return value || ''\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const accountData = $accountInfo?.data\r\n        const avatarsData = $accountAvatars?.data\r\n        \r\n        if (!!accountData && !!avatarsData && !mounted) {\r\n            const business_ava = avatarsData.length > 0 && avatarsData.find(item => item.business_ava)\r\n            \r\n            setInitialValues({\r\n                ...defaultValue,\r\n                region: getData(accountData.region),\r\n                category: getData(accountData.main_cat),\r\n                business_ava: business_ava ? {stringUrl: getData(business_ava.image), file: null} : false,\r\n                currency: getData(accountData?.currency?.code),\r\n                user_lang: getData(accountData.user_lang),\r\n                birthday: getData(accountData.birthday),\r\n                phone: getData(accountData.phone),\r\n                gender: getData(accountData.gender),\r\n                email: getData(accountData.email),\r\n                name: getData(accountData.name),\r\n                lastname: getData(accountData.lastname),\r\n                surname: getData(accountData.surname),\r\n                avatar: getData(accountData.avatar)\r\n            })\r\n            \r\n            setMounted(true)\r\n        }\r\n        \r\n    }, [$accountInfo.data, $accountAvatars.data, mounted])\r\n    \r\n    useEffect(() => {\r\n        accountAvatarsMount()\r\n    }, [])\r\n    \r\n    return {\r\n        formik\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}