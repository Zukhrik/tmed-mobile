{"ast":null,"code":"import { useInfiniteQuery } from 'react-query';\nimport orgApi from '../../Service-v2/organization';\nimport { useListQuery } from '../app';\nimport { useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\nexport function useQueryOfferingList() {\n  const {\n    query\n  } = useListQuery();\n  const {\n    organization\n  } = useParams();\n  const orgOfferQuery = useInfiniteQuery(['/org/offerings', organization, query], async ({\n    pageParam = 0\n  }) => {\n    let params = {\n      limit: 10,\n      offset: pageParam\n    };\n\n    if (query) {\n      params = { ...params,\n        ...query\n      };\n    }\n\n    const res = await orgApi.getOrgOffering({\n      slug: organization,\n      params\n    });\n    return { ...res.data,\n      nextOffset: pageParam + 10\n    };\n  }, {\n    enabled: !!(organization && query),\n    getNextPageParam: data => {\n      if (data.count > data.nextOffset) {\n        return data === null || data === void 0 ? void 0 : data.nextOffset;\n      } else {\n        return undefined;\n      }\n    }\n  });\n  const list = useMemo(() => {\n    var _data, _data2;\n\n    if (((_data = data) === null || _data === void 0 ? void 0 : _data.pages) && ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.pages.length) > 0) {\n      var _data3;\n\n      const arr = (_data3 = data) === null || _data3 === void 0 ? void 0 : _data3.pages;\n      let tmp = [];\n\n      for (let g of arr) {\n        if (g === null || g === void 0 ? void 0 : g.result) {\n          tmp = [...tmp, ...g.result];\n        }\n      }\n\n      return tmp;\n    }\n\n    return [];\n  }, [data]);\n  const dataLength = useMemo(() => {\n    var _data4, _data$pages;\n\n    return ((_data4 = data) === null || _data4 === void 0 ? void 0 : _data4.pages) ? ((_data$pages = data.pages[data.pages.length - 1]) === null || _data$pages === void 0 ? void 0 : _data$pages.nextOffset) || 10 : 10;\n  }, [data]);\n  return {\n    orgOfferQuery,\n    dataLength,\n    list\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/offerings/use-query-offering-list.js"],"names":["useInfiniteQuery","orgApi","useListQuery","useMemo","useParams","useQueryOfferingList","query","organization","orgOfferQuery","pageParam","params","limit","offset","res","getOrgOffering","slug","data","nextOffset","enabled","getNextPageParam","count","undefined","list","pages","length","arr","tmp","g","result","dataLength"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,aAA/B;AACA,OAAOC,MAAP,MAAmB,+BAAnB;AACA,SAAQC,YAAR,QAA2B,QAA3B;AACA,SAAQC,OAAR,QAAsB,OAAtB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,OAAO,SAASC,oBAAT,GAAgC;AACnC,QAAM;AAACC,IAAAA;AAAD,MAAUJ,YAAY,EAA5B;AACA,QAAM;AAACK,IAAAA;AAAD,MAAiBH,SAAS,EAAhC;AAEA,QAAMI,aAAa,GAAGR,gBAAgB,CAClC,CAAC,gBAAD,EAAmBO,YAAnB,EAAiCD,KAAjC,CADkC,EAElC,OAAO;AAACG,IAAAA,SAAS,GAAG;AAAb,GAAP,KAA2B;AAEvB,QAAIC,MAAM,GAAG;AACTC,MAAAA,KAAK,EAAE,EADE;AAETC,MAAAA,MAAM,EAAEH;AAFC,KAAb;;AAKA,QAAIH,KAAJ,EAAW;AACPI,MAAAA,MAAM,GAAG,EAAC,GAAGA,MAAJ;AAAY,WAAGJ;AAAf,OAAT;AACH;;AACD,UAAMO,GAAG,GAAG,MAAMZ,MAAM,CAACa,cAAP,CAAsB;AAACC,MAAAA,IAAI,EAAER,YAAP;AAAqBG,MAAAA;AAArB,KAAtB,CAAlB;AACA,WAAO,EAAC,GAAGG,GAAG,CAACG,IAAR;AAAcC,MAAAA,UAAU,EAAER,SAAS,GAAG;AAAtC,KAAP;AACH,GAdiC,EAelC;AACIS,IAAAA,OAAO,EAAE,CAAC,EAAEX,YAAY,IAAID,KAAlB,CADd;AAEIa,IAAAA,gBAAgB,EAAGH,IAAD,IAAU;AACxB,UAAIA,IAAI,CAACI,KAAL,GAAaJ,IAAI,CAACC,UAAtB,EAAkC;AAC9B,eAAOD,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEC,UAAb;AACH,OAFD,MAEO;AACH,eAAOI,SAAP;AACH;AACJ;AARL,GAfkC,CAAtC;AA2BA,QAAMC,IAAI,GAAGnB,OAAO,CAAC,MAAM;AAAA;;AACvB,QAAI,UAAAa,IAAI,UAAJ,sCAAMO,KAAN,KAAe,WAAAP,IAAI,UAAJ,wCAAMO,KAAN,CAAYC,MAAZ,IAAqB,CAAxC,EAA2C;AAAA;;AACvC,YAAMC,GAAG,aAAGT,IAAH,2CAAG,OAAMO,KAAlB;AACA,UAAIG,GAAG,GAAG,EAAV;;AACA,WAAK,IAAIC,CAAT,IAAcF,GAAd,EAAmB;AACf,YAAIE,CAAJ,aAAIA,CAAJ,uBAAIA,CAAC,CAAEC,MAAP,EAAe;AACXF,UAAAA,GAAG,GAAG,CAAC,GAAGA,GAAJ,EAAS,GAAGC,CAAC,CAACC,MAAd,CAAN;AACH;AACJ;;AACD,aAAOF,GAAP;AACH;;AACD,WAAO,EAAP;AACH,GAZmB,EAYjB,CAACV,IAAD,CAZiB,CAApB;AAcA,QAAMa,UAAU,GAAG1B,OAAO,CAAC,MAAM;AAAA;;AAC7B,WAAO,WAAAa,IAAI,UAAJ,wCAAMO,KAAN,IAAc,gBAAAP,IAAI,CAACO,KAAL,CAAWP,IAAI,CAACO,KAAL,CAAWC,MAAX,GAAoB,CAA/B,6DAAmCP,UAAnC,KAAiD,EAA/D,GAAoE,EAA3E;AACH,GAFyB,EAEvB,CAACD,IAAD,CAFuB,CAA1B;AAIA,SAAO;AAACR,IAAAA,aAAD;AAAgBqB,IAAAA,UAAhB;AAA4BP,IAAAA;AAA5B,GAAP;AACH","sourcesContent":["import {useInfiniteQuery} from 'react-query'\nimport orgApi from '../../Service-v2/organization'\nimport {useListQuery} from '../app'\nimport {useMemo} from 'react'\nimport {useParams} from 'react-router-dom'\n\nexport function useQueryOfferingList() {\n    const {query} = useListQuery()\n    const {organization} = useParams()\n    \n    const orgOfferQuery = useInfiniteQuery(\n        ['/org/offerings', organization, query],\n        async ({pageParam = 0}) => {\n            \n            let params = {\n                limit: 10,\n                offset: pageParam\n            }\n            \n            if (query) {\n                params = {...params, ...query}\n            }\n            const res = await orgApi.getOrgOffering({slug: organization, params})\n            return {...res.data, nextOffset: pageParam + 10}\n        },\n        {\n            enabled: !!(organization && query),\n            getNextPageParam: (data) => {\n                if (data.count > data.nextOffset) {\n                    return data?.nextOffset\n                } else {\n                    return undefined\n                }\n            }\n        }\n    )\n    \n    const list = useMemo(() => {\n        if (data?.pages && data?.pages.length > 0) {\n            const arr = data?.pages\n            let tmp = []\n            for (let g of arr) {\n                if (g?.result) {\n                    tmp = [...tmp, ...g.result]\n                }\n            }\n            return tmp\n        }\n        return []\n    }, [data])\n    \n    const dataLength = useMemo(() => {\n        return data?.pages ? data.pages[data.pages.length - 1]?.nextOffset || 10 : 10\n    }, [data])\n    \n    return {orgOfferQuery, dataLength, list}\n}"]},"metadata":{},"sourceType":"module"}