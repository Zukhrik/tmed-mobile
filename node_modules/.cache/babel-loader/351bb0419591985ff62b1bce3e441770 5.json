{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useCallback,useState}from'react';import{useStore}from'effector-react';import{$appModel}from'../../Models/app';import{useLocation}from'react-router-dom';import{INFO_MAT}from'../../Constants/app';import{useChatCommon}from'../../Hooks/chat';import{AuthModal}from'../../UIComponents/AuthModal';import{IconBox}from'../../UIComponents/GlobalStyles';import{$accountModel}from'../../Models/account-model';import{bottomNavbarWithoutToken,bottomNavbarWithToken}from'../../data';import{BottomNavbarCounter,BottomNavbarItem,BottomNavWrapper,NavLinkItem,NavLinkWrapper}from'./style';export var BottomNavBar=function BottomNavBar(){var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useChatCommon=useChatCommon(),getChatList=_useChatCommon.getChatList;var _useStore=useStore($accountModel),currentProfile=_useStore.$profiles.currentProfile;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),modalIsOpen=_useState2[0],setModalIsOpen=_useState2[1];var _useStore2=useStore($appModel),token=_useStore2.$app.token,$socketCounters=_useStore2.$socketCounters,$device=_useStore2.$device;var generateCustomPath=function generateCustomPath(id){var customPath=currentProfile&&\"\".concat(currentProfile.url);return id.indexOf('profile')!==-1&&customPath;};var generateAction=function generateAction(id){switch(id){case'chat':return getChatList;default:return false;}};var getActive=useCallback(function(id){if(id==='/profile'){if(currentProfile){return pathname.indexOf(currentProfile.slug_name)!==-1;}}else{return pathname===id;}},[currentProfile,pathname]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(AuthModal,{title:false,modalIsOpen:modalIsOpen,onCancel:function onCancel(){return setModalIsOpen(false);}}),/*#__PURE__*/React.createElement(BottomNavWrapper,{borderBottom:true,style:{display:$device&&$device===INFO_MAT&&'none'}},/*#__PURE__*/React.createElement(NavLinkWrapper,null,$device&&$device!==INFO_MAT?token&&currentProfile?bottomNavbarWithToken.map(function(item){var Icon=item.icon;return/*#__PURE__*/React.createElement(Fragment,{key:item.icon},item.id==='tape'?/*#__PURE__*/React.createElement(React.Fragment,null,$device&&$device!==INFO_MAT&&/*#__PURE__*/React.createElement(NavLinkItem,{isActive:function isActive(){return getActive(\"\".concat(item.id==='tape'?'/':\"/\".concat(item.id)));},onClick:function onClick(){return item.onClick(generateAction(item.id));},to:item.generatePath(item.path,generateCustomPath(item.id))},/*#__PURE__*/React.createElement(IconBox,null,/*#__PURE__*/React.createElement(Icon,null),item.socketKey&&!!$socketCounters[item.socketKey]&&/*#__PURE__*/React.createElement(BottomNavbarCounter,null,$socketCounters[item.socketKey])))):/*#__PURE__*/React.createElement(NavLinkItem,{isActive:function isActive(){return getActive(\"\".concat(item.id==='tape'?'/':\"/\".concat(item.id)));},onClick:function onClick(){return item.onClick(generateAction(item.id));},to:item.generatePath(item.path,generateCustomPath(item.id))},/*#__PURE__*/React.createElement(IconBox,null,/*#__PURE__*/React.createElement(Icon,null),item.socketKey&&!!$socketCounters[item.socketKey]&&/*#__PURE__*/React.createElement(BottomNavbarCounter,null,$socketCounters[item.socketKey]))));}):/*#__PURE__*/React.createElement(React.Fragment,null,$device&&$device!==INFO_MAT&&bottomNavbarWithoutToken.map(function(item,idx){var Icon=item.icon;return/*#__PURE__*/React.createElement(Fragment,{key:\"\".concat(idx+1)},item.path==='/sign-in'?/*#__PURE__*/React.createElement(BottomNavbarItem,{onClick:function onClick(){return setModalIsOpen(true);}},/*#__PURE__*/React.createElement(Icon,null)):/*#__PURE__*/React.createElement(NavLinkItem,{isActive:function isActive(){return getActive(\"\".concat(item.id==='tape'?'/':\"/\".concat(item.id)));},onClick:function onClick(){return item.onClick(generateAction(item.id));},to:item.generatePath(item.path,generateCustomPath(item.id))},/*#__PURE__*/React.createElement(Icon,null)));})):'')));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx"],"names":["React","Fragment","useCallback","useState","useStore","$appModel","useLocation","INFO_MAT","useChatCommon","AuthModal","IconBox","$accountModel","bottomNavbarWithoutToken","bottomNavbarWithToken","BottomNavbarCounter","BottomNavbarItem","BottomNavWrapper","NavLinkItem","NavLinkWrapper","BottomNavBar","pathname","getChatList","currentProfile","$profiles","modalIsOpen","setModalIsOpen","token","$app","$socketCounters","$device","generateCustomPath","id","customPath","url","indexOf","generateAction","getActive","slug_name","display","map","item","Icon","icon","onClick","generatePath","path","socketKey","idx"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\nimport {useLocation} from 'react-router-dom'\r\nimport {INFO_MAT} from '../../Constants/app'\r\nimport {useChatCommon} from '../../Hooks/chat'\r\nimport {AuthModal} from '../../UIComponents/AuthModal'\r\nimport {IconBox} from '../../UIComponents/GlobalStyles'\r\nimport {$accountModel} from '../../Models/account-model'\r\nimport {bottomNavbarWithoutToken, bottomNavbarWithToken} from '../../data'\r\nimport {BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper} from './style'\r\n\r\n\r\nexport const BottomNavBar = () => {\r\n    const {pathname} = useLocation()\r\n    const {getChatList} = useChatCommon()\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const {$app: {token}, $socketCounters, $device} = useStore($appModel)\r\n    \r\n    const generateCustomPath = (id) => {\r\n        const customPath = currentProfile && `${currentProfile.url}`\r\n        return id.indexOf('profile') !== -1 && customPath\r\n    }\r\n    \r\n    const generateAction = (id) => {\r\n        switch (id) {\r\n            case 'chat':\r\n                return getChatList\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    \r\n    const getActive = useCallback((id) => {\r\n        if (id === '/profile') {\r\n            if (currentProfile) {\r\n                return pathname.indexOf(currentProfile.slug_name) !== -1\r\n            }\r\n        } else {\r\n            return pathname === id\r\n        }\r\n    }, [currentProfile, pathname])\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <AuthModal\r\n                title={false}\r\n                modalIsOpen={modalIsOpen}\r\n                onCancel={() => setModalIsOpen(false)}\r\n            />\r\n            <BottomNavWrapper\r\n                borderBottom\r\n                style={{display: $device && $device === INFO_MAT && 'none'}}\r\n            >\r\n                <NavLinkWrapper>\r\n                    {\r\n                        $device && $device !== INFO_MAT ? (\r\n                            token && currentProfile ? (\r\n                                bottomNavbarWithToken.map((item) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={item.icon}>\r\n                                            {\r\n                                                item.id === 'tape'\r\n                                                    ? (\r\n                                                        <>\r\n                                                            {\r\n                                                                $device && $device !== INFO_MAT && (\r\n                                                                    <NavLinkItem\r\n                                                                        isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                                        onClick={() => item.onClick(generateAction(item.id))}\r\n                                                                        to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                                    >\r\n                                                                        <IconBox>\r\n                                                                            <Icon/>\r\n                                                                            {\r\n                                                                                item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                                                    <BottomNavbarCounter>\r\n                                                                                        {$socketCounters[item.socketKey]}\r\n                                                                                    </BottomNavbarCounter>\r\n                                                                                )\r\n                                                                            }\r\n                                                                        </IconBox>\r\n                                                                    </NavLinkItem>\r\n                                                                )\r\n                                                            }\r\n                                                        </>\r\n                                                    )\r\n                                                    : (\r\n                                                        <NavLinkItem\r\n                                                            isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                            onClick={() => item.onClick(generateAction(item.id))}\r\n                                                            to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                        >\r\n                                                            <IconBox>\r\n                                                                <Icon/>\r\n                                                                {\r\n                                                                    item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                                        <BottomNavbarCounter>\r\n                                                                            {$socketCounters[item.socketKey]}\r\n                                                                        </BottomNavbarCounter>\r\n                                                                    )\r\n                                                                }\r\n                                                            </IconBox>\r\n                                                        </NavLinkItem>\r\n                                                    )\r\n                                            }\r\n                                        \r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            ) : (\r\n                                <>\r\n                                    {\r\n                                        $device && $device !== INFO_MAT && bottomNavbarWithoutToken.map((item, idx) => {\r\n                                            const Icon = item.icon\r\n                                            return (\r\n                                                <Fragment key={`${idx + 1}`}>\r\n                                                    {\r\n                                                        item.path === '/sign-in'\r\n                                                            ? <BottomNavbarItem onClick={() => setModalIsOpen(true)}>\r\n                                                                <Icon/>\r\n                                                            </BottomNavbarItem>\r\n                                                            : (<NavLinkItem\r\n                                                                    isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                                    onClick={() => item.onClick(generateAction(item.id))}\r\n                                                                    to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                                >\r\n                                                                    <Icon/>\r\n                                                                </NavLinkItem>\r\n                                                            )\r\n                                                    }\r\n                                                </Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </>\r\n                            )\r\n                        ) : ''\r\n                    }\r\n                </NavLinkWrapper>\r\n            </BottomNavWrapper>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}