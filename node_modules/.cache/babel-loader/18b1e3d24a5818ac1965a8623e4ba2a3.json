{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/PeopleList/index.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../../Models/app';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { useSubscription } from '../../../Hooks/user';\nimport { $userModel } from '../../../Models/user-model';\nimport { $accountModel } from '../../../Models/account-model';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { AccountCard, AccountCardSkeleton } from '../../../Components/Cards';\nconst skeleton = generateSkeleton(30);\nexport const PeopleList = ({\n  loadMore\n}) => {\n  const {\n    $device\n  } = useStore($appModel);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    subscribeToAccount: subscribe\n  } = useSubscription({\n    from: 'user_list'\n  });\n  const {\n    $allUserList: {\n      data,\n      forceLoading,\n      loading,\n      result\n    }\n  } = useStore($userModel);\n  return /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    style: {\n      overflow: 'visible'\n    },\n    dataLength: result.nextOffset || 20,\n    hasMore: !loading && !!result.next,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 12,\n    style: {\n      marginBottom: 60,\n      paddingTop: 20\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }\n  }, forceLoading === 2 ? /*#__PURE__*/React.createElement(React.Fragment, null, data.map((item, idx) => {\n    const itemData = {\n      subscribe,\n      imgUrl: item.avatar,\n      slug_name: item.username,\n      is_official: item.is_official,\n      path: `/@${item.username}/tape`,\n      subscribed: item.subs.subscribed,\n      text: item.main_cat ? item.main_cat.name : '',\n      name: item.full_name.trim().length > 0 ? item.full_name : `@${item.username}`\n    };\n    return /*#__PURE__*/React.createElement(Col, {\n      span: $device && $device === INFO_MAT ? 12 : 24,\n      key: `${idx + 1}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(AccountCard, Object.assign({}, itemData, {\n      imgSize: 56,\n      currentProfile: currentProfile && currentProfile,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 45\n      }\n    })));\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: `${idx + 1}`,\n    span: $device && $device === INFO_MAT ? 12 : 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(AccountCardSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 41\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/PeopleList/index.jsx"],"names":["React","Col","Row","useStore","$appModel","INFO_MAT","useSubscription","$userModel","$accountModel","InfiniteScroll","generateSkeleton","AccountCard","AccountCardSkeleton","skeleton","PeopleList","loadMore","$device","$profiles","currentProfile","subscribeToAccount","subscribe","from","$allUserList","data","forceLoading","loading","result","overflow","nextOffset","next","marginBottom","paddingTop","map","item","idx","itemData","imgUrl","avatar","slug_name","username","is_official","path","subscribed","subs","text","main_cat","name","full_name","trim","length"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {Col, Row} from 'antd'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../../Models/app'\r\nimport {INFO_MAT} from '../../../Constants/app'\r\nimport {useSubscription} from '../../../Hooks/user'\r\nimport {$userModel} from '../../../Models/user-model'\r\nimport {$accountModel} from '../../../Models/account-model'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {AccountCard, AccountCardSkeleton} from '../../../Components/Cards'\r\n\r\nconst skeleton = generateSkeleton(30)\r\nexport const PeopleList = ({loadMore}) => {\r\n    const {$device} = useStore($appModel)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {subscribeToAccount: subscribe} = useSubscription({from: 'user_list'})\r\n    const {$allUserList: {data, forceLoading, loading, result}} = useStore($userModel)\r\n    \r\n    return (\r\n        <InfiniteScroll\r\n            next={loadMore}\r\n            style={{overflow: 'visible'}}\r\n            dataLength={result.nextOffset || 20}\r\n            hasMore={!loading && !!result.next}\r\n            loader={<>...loading</>}\r\n        >\r\n            <Row\r\n                gutter={12}\r\n                style={{marginBottom: 60, paddingTop: 20}}\r\n            >\r\n                {\r\n                    forceLoading === 2\r\n                        ? <>\r\n                            {\r\n                                data.map((item, idx) => {\r\n                                    const itemData = {\r\n                                        subscribe,\r\n                                        imgUrl: item.avatar,\r\n                                        slug_name: item.username,\r\n                                        is_official: item.is_official,\r\n                                        path: `/@${item.username}/tape`,\r\n                                        subscribed: item.subs.subscribed,\r\n                                        text: item.main_cat ? item.main_cat.name : '',\r\n                                        name: item.full_name.trim().length > 0 ? item.full_name : `@${item.username}`\r\n                                    }\r\n                                    return (\r\n                                        <Col span={$device && $device === INFO_MAT ? 12 : 24} key={`${idx + 1}`}>\r\n                                            <AccountCard\r\n                                                {...itemData}\r\n                                                imgSize={56}\r\n                                                currentProfile={currentProfile && currentProfile}\r\n                                            />\r\n                                        </Col>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </>\r\n                        : <>\r\n                            {\r\n                                skeleton.map((item, idx) => (\r\n                                    <Col\r\n                                        key={`${idx + 1}`}\r\n                                        span={$device && $device === INFO_MAT ? 12 : 24}\r\n                                    >\r\n                                        <AccountCardSkeleton/>\r\n                                    </Col>\r\n                                ))\r\n                            }\r\n                        </>\r\n                }\r\n            </Row>\r\n        </InfiniteScroll>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}