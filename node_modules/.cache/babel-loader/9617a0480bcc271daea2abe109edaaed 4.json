{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { URL_KEYS } from '../../Constants';\nimport { useParams } from 'react-router-dom';\nimport { useCallback, useEffect } from 'react';\nimport { $offeringsModel, offeringForceLoading, orgOfferGroupListMount, orgOfferingsListMount } from '../../Models/offerings-model';\nimport { useStore } from 'effector-react';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useOfferingList() {\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    organization\n  } = useParams();\n  const group = urlData[URL_KEYS.OFFERING_GROUP_ID];\n  const specialist = urlData[URL_KEYS.SPECIALIST_ID];\n  const {\n    $offeringsList: {\n      result\n    }\n  } = useStore($offeringsModel);\n  const {\n    $offeringGroupList: {\n      result: offeringGroupResult\n    }\n  } = useStore($offeringsModel);\n  const getOfferingGroupList = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgOfferGroupListMount(data);\n    }\n  }, [organization]);\n  const getOrgOfferingsList = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgOfferingsListMount(data);\n    }\n  }, [organization]);\n  const loadMoreOfferings = useCallback(() => {\n    if (result.nextOffset) {\n      const data = {\n        params: { ...initialParams,\n          offset: result.nextOffset\n        }\n      };\n\n      if (specialist) {\n        data['params']['responsible'] = specialist;\n      } else {\n        delete data['params']['responsible'];\n      }\n\n      if (group) {\n        data['params']['group'] = group;\n      }\n\n      getOrgOfferingsList(data);\n    }\n  }, [getOrgOfferingsList, specialist, group, result]);\n  const loadMoreOfferingGroup = useCallback(() => {\n    if (offeringGroupResult === null || offeringGroupResult === void 0 ? void 0 : offeringGroupResult.nextOffset) {\n      const data = {\n        params: { ...initialParams,\n          offset: result === null || result === void 0 ? void 0 : result.nextOffset\n        }\n      };\n      getOfferingGroupList(data);\n    }\n  }, [offeringGroupResult, getOfferingGroupList]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (specialist) {\n        data['params']['specialist'] = specialist;\n      } else {\n        delete data['params']['specialist'];\n      }\n\n      getOfferingGroupList(data);\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [specialist, getOfferingGroupList]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (specialist) {\n        data['params']['responsible'] = specialist;\n      } else {\n        delete data['params']['responsible'];\n      }\n\n      if (group) {\n        data['params']['group'] = group;\n      }\n\n      offeringForceLoading();\n      getOrgOfferingsList(data);\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getOrgOfferingsList, specialist, group]);\n  return {\n    loadMoreOfferings,\n    loadMoreOfferingGroup\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/offerings/use-offering-list.js"],"names":["useUrlParams","URL_KEYS","useParams","useCallback","useEffect","$offeringsModel","offeringForceLoading","orgOfferGroupListMount","orgOfferingsListMount","useStore","initialParams","limit","offset","useOfferingList","urlData","organization","group","OFFERING_GROUP_ID","specialist","SPECIALIST_ID","$offeringsList","result","$offeringGroupList","offeringGroupResult","getOfferingGroupList","params","data","getOrgOfferingsList","loadMoreOfferings","nextOffset","loadMoreOfferingGroup","timeout","setTimeout","clear","clearTimeout"],"mappings":"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","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {URL_KEYS} from '../../Constants'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useCallback, useEffect} from 'react'\r\nimport {\r\n    $offeringsModel,\r\n    offeringForceLoading,\r\n    orgOfferGroupListMount,\r\n    orgOfferingsListMount\r\n} from '../../Models/offerings-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useOfferingList() {\r\n    const {urlData} = useUrlParams()\r\n    const {organization} = useParams()\r\n    const group = urlData[URL_KEYS.OFFERING_GROUP_ID]\r\n    const specialist = urlData[URL_KEYS.SPECIALIST_ID]\r\n    const {$offeringsList: {result}} = useStore($offeringsModel)\r\n    const {$offeringGroupList: {result: offeringGroupResult}} = useStore($offeringsModel)\r\n\r\n    \r\n    const getOfferingGroupList = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgOfferGroupListMount(data)\r\n        }\r\n        \r\n    }, [organization])\r\n    \r\n    const getOrgOfferingsList = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgOfferingsListMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    const loadMoreOfferings = useCallback(() => {\r\n        if (result.nextOffset) {\r\n            const data = {\r\n                params: {\r\n                    ...initialParams,\r\n                    offset: result.nextOffset\r\n                }\r\n            }\r\n            \r\n            if (specialist) {\r\n                data['params']['responsible'] = specialist\r\n            } else {\r\n                delete data['params']['responsible']\r\n            }\r\n            \r\n            if (group) {\r\n                data['params']['group'] = group\r\n            }\r\n            \r\n            getOrgOfferingsList(data)\r\n        }\r\n    }, [getOrgOfferingsList, specialist, group, result])\r\n    \r\n    const loadMoreOfferingGroup = useCallback(() => {\r\n        if (offeringGroupResult?.nextOffset) {\r\n            const data = {\r\n                params: {\r\n                    ...initialParams,\r\n                    offset: result?.nextOffset\r\n                }\r\n            }\r\n            getOfferingGroupList(data)\r\n        }\r\n    }, [offeringGroupResult, getOfferingGroupList])\r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            \r\n            if (specialist) {\r\n                data['params']['specialist'] = specialist\r\n            } else {\r\n                delete data['params']['specialist']\r\n            }\r\n            \r\n            getOfferingGroupList(data)\r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [specialist, getOfferingGroupList])\r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            \r\n            if (specialist) {\r\n                data['params']['responsible'] = specialist\r\n            } else {\r\n                delete data['params']['responsible']\r\n            }\r\n            \r\n            if (group) {\r\n                data['params']['group'] = group\r\n            }\r\n            offeringForceLoading()\r\n            getOrgOfferingsList(data)\r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [getOrgOfferingsList, specialist, group])\r\n    \r\n    return {\r\n        loadMoreOfferings,\r\n        loadMoreOfferingGroup\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}