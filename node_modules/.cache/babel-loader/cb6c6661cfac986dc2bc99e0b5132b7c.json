{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/OfferingsList/index.jsx\";\nimport React from 'react';\nimport { useStore } from 'effector-react';\nimport { useTranslation } from 'react-i18next';\nimport { $appModel } from '../../../Models/app';\nimport { numberFormat } from '../../../utils/number-utils';\nimport { $accountModel } from '../../../Models/account-model';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Container, RootContent } from '../../../UIComponents/GlobalStyles';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { $offeringsModel } from '../../../Models/offerings-model';\nimport Masorny, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { ProductCard, ProductCardSkeleton } from '../../../Components/Cards';\nconst skeleton = generateSkeleton(10, 100, 220);\nexport const OfferingsList = ({\n  loadMore\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    $offeringsList: {\n      data,\n      forceLoading,\n      loading,\n      result\n    }\n  } = useStore($offeringsModel);\n  const currency = currentProfile && currentProfile.currency ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n\n  const getSellerInfo = item => {\n    let data = {};\n\n    if (item.org) {\n      data = {\n        name: item.org.name,\n        imgUrl: item.org.logo,\n        path: `/${item.org.slug_name}`\n      };\n    }\n\n    if (item.user) {\n      data = {\n        name: item.user.full_name,\n        imgUrl: item.user.avatar,\n        path: `/@${item.user.username}`\n      };\n    }\n\n    return data;\n  };\n\n  return /*#__PURE__*/React.createElement(RootContent, {\n    paddingBottom: \"60px\",\n    paddingTop: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    dataLength: result.nextOffset || 20,\n    hasMore: !loading && !!result.next,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    columnsCountBreakPoints: {\n      350: 2,\n      768: 2,\n      900: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 21\n    }\n  }, forceLoading === 2 ? /*#__PURE__*/React.createElement(Masorny, {\n    gutter: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 37\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && (data === null || data === void 0 ? void 0 : data.map((item, idx) => {\n    const offeringData = {\n      id: item.id,\n      qty: item.qty,\n      name: item.name,\n      image: item.image,\n      currency: currency,\n      seller: getSellerInfo(item),\n      path: `${getSellerInfo(item).path}/offerings/${item.id}`,\n      cost: item.cost ? `${numberFormat(item.cost)}` : t('free')\n    };\n    return /*#__PURE__*/React.createElement(ProductCard, {\n      key: `${idx + 1}`,\n      item: offeringData,\n      handleClick: item => console.log(item),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 53\n      }\n    });\n  }))) : /*#__PURE__*/React.createElement(Masorny, {\n    gutter: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  }, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(ProductCardSkeleton, {\n    key: `${idx + 1}`,\n    imgSkeletonHeight: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 49\n    }\n  })))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/OfferingsList/index.jsx"],"names":["React","useStore","useTranslation","$appModel","numberFormat","$accountModel","InfiniteScroll","Container","RootContent","generateSkeleton","$offeringsModel","Masorny","ResponsiveMasonry","ProductCard","ProductCardSkeleton","skeleton","OfferingsList","loadMore","t","$detectLocationInfo","$profiles","currentProfile","$offeringsList","data","forceLoading","loading","result","currency","code","getSellerInfo","item","org","name","imgUrl","logo","path","slug_name","user","full_name","avatar","username","nextOffset","next","length","map","idx","offeringData","id","qty","image","seller","cost","console","log"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {$appModel} from '../../../Models/app'\r\nimport {numberFormat} from '../../../utils/number-utils'\r\nimport {$accountModel} from '../../../Models/account-model'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {Container, RootContent} from '../../../UIComponents/GlobalStyles'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {$offeringsModel} from '../../../Models/offerings-model'\r\nimport Masorny, {ResponsiveMasonry} from 'react-responsive-masonry'\r\nimport {ProductCard, ProductCardSkeleton} from '../../../Components/Cards'\r\n\r\nconst skeleton = generateSkeleton(10, 100, 220)\r\nexport const OfferingsList = ({loadMore}) => {\r\n    const {t} = useTranslation()\r\n    const {$detectLocationInfo} = useStore($appModel)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {$offeringsList: {data, forceLoading, loading, result}} = useStore($offeringsModel)\r\n    const currency = currentProfile && currentProfile.currency\r\n        ? currentProfile.currency.code\r\n        : $detectLocationInfo.currency\r\n        || ''\r\n    \r\n    \r\n    const getSellerInfo = (item) => {\r\n        let data = {}\r\n        \r\n        if (item.org) {\r\n            data = {\r\n                name: item.org.name,\r\n                imgUrl: item.org.logo,\r\n                path: `/${item.org.slug_name}`\r\n            }\r\n        }\r\n        \r\n        if (item.user) {\r\n            data = {\r\n                name: item.user.full_name,\r\n                imgUrl: item.user.avatar,\r\n                path: `/@${item.user.username}`\r\n            }\r\n        }\r\n        \r\n        return data\r\n    }\r\n    \r\n    return (\r\n        <RootContent\r\n            paddingBottom='60px'\r\n            paddingTop='12px'\r\n        >\r\n            <Container>\r\n                <InfiniteScroll\r\n                    next={loadMore}\r\n                    dataLength={result.nextOffset || 20}\r\n                    hasMore={!loading && !!result.next}\r\n                    loader={<>...loading</>}\r\n                >\r\n                    <ResponsiveMasonry\r\n                        columnsCountBreakPoints={{350: 2, 768: 2, 900: 3}}\r\n                    >\r\n                        {\r\n                            forceLoading === 2\r\n                                ? (\r\n                                    <Masorny gutter='12px'>\r\n                                        {\r\n                                            data?.length > 0 && data?.map((item, idx) => {\r\n                                                const offeringData = {\r\n                                                    id: item.id,\r\n                                                    qty: item.qty,\r\n                                                    name: item.name,\r\n                                                    image: item.image,\r\n                                                    currency: currency,\r\n                                                    seller: getSellerInfo(item),\r\n                                                    path: `${getSellerInfo(item).path}/offerings/${item.id}`,\r\n                                                    cost: item.cost ? `${numberFormat(item.cost)}` : t('free')\r\n                                                }\r\n                                                return (\r\n                                                    <ProductCard\r\n                                                        key={`${idx + 1}`}\r\n                                                        item={offeringData}\r\n                                                        handleClick={(item) => console.log(item)}\r\n                                                    />\r\n                                                )\r\n                                            })\r\n                                        }\r\n                                    </Masorny>\r\n                                )\r\n                                : (\r\n                                    <Masorny gutter='12px'>\r\n                                        {\r\n                                            skeleton.map((item, idx) => (\r\n                                                <ProductCardSkeleton\r\n                                                    key={`${idx + 1}`}\r\n                                                    imgSkeletonHeight={item}\r\n                                                />\r\n                                            ))\r\n                                        }\r\n                                    </Masorny>\r\n                                )\r\n                        }\r\n                    </ResponsiveMasonry>\r\n                </InfiniteScroll>\r\n            </Container>\r\n        </RootContent>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}