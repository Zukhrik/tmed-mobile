{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/StreamList/index.jsx\";\nimport React from 'react';\nimport moment from 'moment';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { StreamCard } from '../../../Components/Cards';\nimport { $streamModel } from '../../../Models/stream-model';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { StreamCardSkeleton } from '../../../Components/Cards/StreamCardSkeleton';\nimport { RootContent } from '../../../UIComponents/GlobalStyles';\nconst skeleton = generateSkeleton(5);\nexport const StreamList = ({\n  loadMore\n}) => {\n  const {\n    $allStreamList: {\n      data,\n      forceLoading,\n      loading,\n      result\n    }\n  } = useStore($streamModel);\n  return /*#__PURE__*/React.createElement(RootContent, {\n    paddingTop: \"12px\",\n    paddingBottom: \"60px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    dataLength: result.nextOffset | 10,\n    hasMore: !loading && !!result.next,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [0, 12],\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }\n  }, forceLoading === 2 ? /*#__PURE__*/React.createElement(React.Fragment, null, data && data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(StreamCard, {\n    imgUrl: item.logo,\n    src: item.live_schedule ? item.live_schedule.image : item.thumbnail,\n    title: item.channel_name,\n    streamPath: `/stream/${item.channel_slug}`,\n    currentAnonsName: item.live_schedule && item.live_schedule.title,\n    anonsDate: item.live_schedule ? moment(item.live_schedule.date).format('YYYY-MM-DD hh:mm') : '',\n    liveWatchers: item.live_watchers,\n    live: item.live_at,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 45\n    }\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(StreamCardSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 45\n    }\n  })))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/StreamList/index.jsx"],"names":["React","moment","Col","Row","useStore","StreamCard","$streamModel","InfiniteScroll","generateSkeleton","StreamCardSkeleton","RootContent","skeleton","StreamList","loadMore","$allStreamList","data","forceLoading","loading","result","nextOffset","next","map","item","idx","logo","live_schedule","image","thumbnail","channel_name","channel_slug","title","date","format","live_watchers","live_at"],"mappings":"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","sourcesContent":["import React from 'react'\nimport moment from 'moment'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {StreamCard} from '../../../Components/Cards'\nimport {$streamModel} from '../../../Models/stream-model'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\nimport {StreamCardSkeleton} from '../../../Components/Cards/StreamCardSkeleton'\nimport {RootContent} from '../../../UIComponents/GlobalStyles'\n\n\nconst skeleton = generateSkeleton(5)\nexport const StreamList = ({loadMore}) => {\n    const {$allStreamList: {data, forceLoading, loading, result}} = useStore($streamModel)\n    \n    return (\n        <RootContent\n            paddingTop='12px'\n            paddingBottom='60px'\n        >\n            <InfiniteScroll\n                next={loadMore}\n                dataLength={result.nextOffset | 10}\n                hasMore={!loading && !!result.next}\n                loader={<>...loading</>}\n            >\n                <Row gutter={[0, 12]} className='container'>\n                    {\n                        forceLoading === 2\n                            ? <>\n                                {\n                                    data && data.map((item, idx) => (\n                                        <Col\n                                            span={24}\n                                            key={`${idx + 1}`}\n                                        >\n                                            <StreamCard\n                                                imgUrl={item.logo}\n                                                src={\n                                                    item.live_schedule\n                                                        ? item.live_schedule.image\n                                                        : item.thumbnail\n                                                }\n                                                title={item.channel_name}\n                                                streamPath={`/stream/${item.channel_slug}`}\n                                                currentAnonsName={item.live_schedule && item.live_schedule.title}\n                                                anonsDate={\n                                                    item.live_schedule\n                                                        ? moment(item.live_schedule.date).format('YYYY-MM-DD hh:mm')\n                                                        : ''\n                                                }\n                                                liveWatchers={item.live_watchers}\n                                                live={item.live_at}\n                                            />\n                                        </Col>\n                                    ))\n                                }\n                            </>\n                            : <>\n                                {\n                                    skeleton.map((item, idx) => (\n                                        <Col\n                                            span={24}\n                                            key={`${idx + 1}`}\n                                        >\n                                            <StreamCardSkeleton/>\n                                        </Col>\n                                    ))\n                                }\n                            </>\n                    }\n                </Row>\n            </InfiniteScroll>\n        </RootContent>\n    )\n}"]},"metadata":{},"sourceType":"module"}