{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessageItem/index.jsx\";\nimport React from 'react';\nimport { Avatar, Col, Row } from 'antd';\nimport { MessageContent, MessageFileContent, MessageItemRow, MessageReplyContent, MessageStatusRow, MessageText, MessageTextContent } from '../style';\nimport { Text } from '../../../UIComponents/Typography/Text';\nimport moment from 'moment';\nimport { useTranslation } from 'react-i18next';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { ClockSvg } from '../../../Icons/Clock';\nimport { AllDoneCheckSvg, CheckLineSvg } from '../../../Icons/CheckMark';\nimport { ImageLazyLoad } from '../../../UIComponents/ImageLazyLoad';\nimport { Title } from '../../../UIComponents/Typography/Title';\nimport { useChatIsRead } from '../../../Hooks/chat';\nexport const MessageItem = ({\n  me,\n  item,\n  avatar,\n  showAvatar,\n  handleMsgClick,\n  popupShowed\n}) => {\n  const {\n    ref\n  } = useChatIsRead({\n    item\n  });\n  const {\n    t\n  } = useTranslation();\n  const isCurMsgPopup = popupShowed && popupShowed.id === item.id;\n\n  const getMsgDate = () => {\n    return /*#__PURE__*/React.createElement(Text, {\n      level: 6,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 13\n      }\n    }, item.updated ? `${t('edited')} ${moment(item.updated).format('HH:mm')}` : moment(item.date).format('HH:mm'));\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    justify: me ? 'end' : 'start',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    onClick: e => handleMsgClick(e, item, me),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MessageItemRow, {\n    me: me,\n    avatarShowed: showAvatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }\n  }, avatar && showAvatar && /*#__PURE__*/React.createElement(Avatar, {\n    className: \"message-item-avatar\",\n    src: avatar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 46\n    }\n  }), /*#__PURE__*/React.createElement(MessageContent, {\n    me: me,\n    style: {\n      zIndex: isCurMsgPopup && 10\n    },\n    \"data-id\": item.id,\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 21\n    }\n  }, item.file && /*#__PURE__*/React.createElement(MessageFileContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(ImageLazyLoad, {\n    uploadProgress: item.uploadStatus,\n    hideEffect: item.dataSrc,\n    showProgress: true,\n    dataSrc: item.dataSrc,\n    src: item.file,\n    alt: \"file\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 37\n    }\n  }), !item.text && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"file-message-date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(MessageStatusRow, {\n    wrap: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 53\n    }\n  }, moment(item.date).format('HH:mm')), me && /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 63\n    }\n  }, /*#__PURE__*/React.createElement(IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 61\n    }\n  }, item.sent ? /*#__PURE__*/React.createElement(ClockSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 75\n    }\n  }) : item.is_read ? /*#__PURE__*/React.createElement(AllDoneCheckSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 90\n    }\n  }) : /*#__PURE__*/React.createElement(CheckLineSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 73\n    }\n  })))))), item.text && item.text.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, item.reply_to && /*#__PURE__*/React.createElement(MessageReplyContent, {\n    me: me,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 49\n    }\n  }, item.reply_to.sender.full_name), /*#__PURE__*/React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 49\n    }\n  }, item.reply_to.text)), /*#__PURE__*/React.createElement(MessageTextContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(MessageText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 41\n    }\n  }, item.text), /*#__PURE__*/React.createElement(MessageStatusRow, {\n    wrap: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 45\n    }\n  }, getMsgDate()), me && /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 53\n    }\n  }, /*#__PURE__*/React.createElement(IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 57\n    }\n  }, item.sent ? /*#__PURE__*/React.createElement(ClockSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 71\n    }\n  }) : item.is_read ? /*#__PURE__*/React.createElement(AllDoneCheckSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 86\n    }\n  }) : /*#__PURE__*/React.createElement(CheckLineSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 69\n    }\n  }))))))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessageItem/index.jsx"],"names":["React","Avatar","Col","Row","MessageContent","MessageFileContent","MessageItemRow","MessageReplyContent","MessageStatusRow","MessageText","MessageTextContent","Text","moment","useTranslation","IconBox","ClockSvg","AllDoneCheckSvg","CheckLineSvg","ImageLazyLoad","Title","useChatIsRead","MessageItem","me","item","avatar","showAvatar","handleMsgClick","popupShowed","ref","t","isCurMsgPopup","id","getMsgDate","updated","format","date","e","zIndex","file","uploadStatus","dataSrc","text","sent","is_read","length","reply_to","sender","full_name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,GAAhB,EAAqBC,GAArB,QAA+B,MAA/B;AACA,SACIC,cADJ,EAEIC,kBAFJ,EAGIC,cAHJ,EAIIC,mBAJJ,EAKIC,gBALJ,EAMIC,WANJ,EAOIC,kBAPJ,QAQO,UARP;AASA,SAAQC,IAAR,QAAmB,uCAAnB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,OAAR,QAAsB,oCAAtB;AACA,SAAQC,QAAR,QAAuB,sBAAvB;AACA,SAAQC,eAAR,EAAyBC,YAAzB,QAA4C,0BAA5C;AACA,SAAQC,aAAR,QAA4B,qCAA5B;AACA,SAAQC,KAAR,QAAoB,wCAApB;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG,CAAC;AAACC,EAAAA,EAAD;AAAKC,EAAAA,IAAL;AAAWC,EAAAA,MAAX;AAAmBC,EAAAA,UAAnB;AAA+BC,EAAAA,cAA/B;AAA+CC,EAAAA;AAA/C,CAAD,KAAiE;AACxF,QAAM;AAACC,IAAAA;AAAD,MAAQR,aAAa,CAAC;AAACG,IAAAA;AAAD,GAAD,CAA3B;AACA,QAAM;AAACM,IAAAA;AAAD,MAAMhB,cAAc,EAA1B;AACA,QAAMiB,aAAa,GAAGH,WAAW,IAAIA,WAAW,CAACI,EAAZ,KAAmBR,IAAI,CAACQ,EAA7D;;AACA,QAAMC,UAAU,GAAG,MAAM;AACrB,wBACI,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAE,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEQT,IAAI,CAACU,OAAL,GACO,GAAEJ,CAAC,CAAC,QAAD,CAAW,IAAGjB,MAAM,CAACW,IAAI,CAACU,OAAN,CAAN,CAAqBC,MAArB,CAA4B,OAA5B,CAAqC,EAD7D,GAEMtB,MAAM,CAACW,IAAI,CAACY,IAAN,CAAN,CAAkBD,MAAlB,CAAyB,OAAzB,CAJd,CADJ;AASH,GAVD;;AAYA,sBACI,oBAAC,GAAD;AAAK,IAAA,OAAO,EAAEZ,EAAE,GAAG,KAAH,GAAW,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAiB,IAAA,OAAO,EAAGc,CAAD,IAAOV,cAAc,CAACU,CAAD,EAAIb,IAAJ,EAAUD,EAAV,CAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,cAAD;AAAgB,IAAA,EAAE,EAAEA,EAApB;AAAwB,IAAA,YAAY,EAAEG,UAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,MAAM,IAAIC,UAAV,iBAAwB,oBAAC,MAAD;AAAQ,IAAA,SAAS,EAAC,qBAAlB;AAAwC,IAAA,GAAG,EAAED,MAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,eAEI,oBAAC,cAAD;AACI,IAAA,EAAE,EAAEF,EADR;AAEI,IAAA,KAAK,EAAE;AAACe,MAAAA,MAAM,EAAEP,aAAa,IAAI;AAA1B,KAFX;AAGI,eAASP,IAAI,CAACQ,EAHlB;AAGsB,IAAA,GAAG,EAAEH,GAH3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMSL,IAAI,CAACe,IAAN,iBACI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,aAAD;AACI,IAAA,cAAc,EAAEf,IAAI,CAACgB,YADzB;AAEI,IAAA,UAAU,EAAEhB,IAAI,CAACiB,OAFrB;AAGI,IAAA,YAAY,MAHhB;AAGiB,IAAA,OAAO,EAAEjB,IAAI,CAACiB,OAH/B;AAII,IAAA,GAAG,EAAEjB,IAAI,CAACe,IAJd;AAIoB,IAAA,GAAG,EAAC,MAJxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAOQ,CAACf,IAAI,CAACkB,IAAN,iBACI;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK7B,MAAM,CAACW,IAAI,CAACY,IAAN,CAAN,CAAkBD,MAAlB,CAAyB,OAAzB,CADL,CADJ,EAKQZ,EAAE,iBAAI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACF,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,IAAI,CAACmB,IAAL,gBACM,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,GAEMnB,IAAI,CAACoB,OAAL,gBAAe,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf,gBACF,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALZ,CADE,CALd,CADJ,CARZ,CAPZ,EAwCQpB,IAAI,CAACkB,IAAL,IAAalB,IAAI,CAACkB,IAAL,CAAUG,MAAV,GAAmB,CAAhC,iBACI,0CAEQrB,IAAI,CAACsB,QAAL,iBACI,oBAAC,mBAAD;AAAqB,IAAA,EAAE,EAAEvB,EAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKC,IAAI,CAACsB,QAAL,CAAcC,MAAd,CAAqBC,SAD1B,CADJ,eAII,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKxB,IAAI,CAACsB,QAAL,CAAcJ,IADnB,CAJJ,CAHZ,eAaI,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKlB,IAAI,CAACkB,IADV,CADJ,eAII,oBAAC,gBAAD;AAAkB,IAAA,IAAI,EAAE,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKT,UAAU,EADf,CADJ,EAKQV,EAAE,iBACE,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQC,IAAI,CAACmB,IAAL,gBACM,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADN,GAEMnB,IAAI,CAACoB,OAAL,gBAAe,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf,gBACF,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALZ,CADJ,CANZ,CAJJ,CAbJ,CAzCZ,CAFJ,CADJ,CADJ,CADJ;AA2FH,CA3GM","sourcesContent":["import React from 'react'\nimport {Avatar, Col, Row} from 'antd'\nimport {\n    MessageContent,\n    MessageFileContent,\n    MessageItemRow,\n    MessageReplyContent,\n    MessageStatusRow,\n    MessageText,\n    MessageTextContent\n} from '../style'\nimport {Text} from '../../../UIComponents/Typography/Text'\nimport moment from 'moment'\nimport {useTranslation} from 'react-i18next'\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\nimport {ClockSvg} from '../../../Icons/Clock'\nimport {AllDoneCheckSvg, CheckLineSvg} from '../../../Icons/CheckMark'\nimport {ImageLazyLoad} from '../../../UIComponents/ImageLazyLoad'\nimport {Title} from '../../../UIComponents/Typography/Title'\nimport {useChatIsRead} from '../../../Hooks/chat'\n\nexport const MessageItem = ({me, item, avatar, showAvatar, handleMsgClick, popupShowed}) => {\n    const {ref} = useChatIsRead({item})\n    const {t} = useTranslation()\n    const isCurMsgPopup = popupShowed && popupShowed.id === item.id\n    const getMsgDate = () => {\n        return (\n            <Text level={6}>\n                {\n                    item.updated\n                        ? `${t('edited')} ${moment(item.updated).format('HH:mm')}`\n                        : moment(item.date).format('HH:mm')\n                }\n            </Text>\n        )\n    }\n\n    return (\n        <Row justify={me ? 'end' : 'start'}>\n            <Col span='auto' onClick={(e) => handleMsgClick(e, item, me)}>\n                <MessageItemRow me={me} avatarShowed={showAvatar}>\n                    {avatar && showAvatar && <Avatar className='message-item-avatar' src={avatar}/>}\n                    <MessageContent\n                        me={me}\n                        style={{zIndex: isCurMsgPopup && 10}}\n                        data-id={item.id} ref={ref}\n                    >\n                        {\n                            (item.file) && (\n                                <MessageFileContent>\n                                    <ImageLazyLoad\n                                        uploadProgress={item.uploadStatus}\n                                        hideEffect={item.dataSrc}\n                                        showProgress dataSrc={item.dataSrc}\n                                        src={item.file} alt='file'/>\n                                    {\n                                        !item.text && (\n                                            <div className='file-message-date'>\n                                                <MessageStatusRow wrap={false}>\n                                                    <Col span='auto'>\n                                                        {moment(item.date).format('HH:mm')}\n                                                    </Col>\n                                                    {\n                                                        me && <Col span='auto'>\n                                                            <IconBox>\n                                                                {\n                                                                    item.sent\n                                                                        ? <ClockSvg/>\n                                                                        : item.is_read ? <AllDoneCheckSvg/> :\n                                                                        <CheckLineSvg/>\n                                                                }\n                                                            </IconBox>\n                                                        </Col>\n                                                    }\n                                                </MessageStatusRow>\n                                            </div>\n                                        )\n                                    }\n                                </MessageFileContent>\n                            )\n                        }\n                        {\n                            item.text && item.text.length > 0 && (\n                                <>\n                                    {\n                                        item.reply_to && (\n                                            <MessageReplyContent me={me}>\n                                                <Title>\n                                                    {item.reply_to.sender.full_name}\n                                                </Title>\n                                                <Text>\n                                                    {item.reply_to.text}\n                                                </Text>\n                                            </MessageReplyContent>\n                                        )\n                                    }\n                                    <MessageTextContent>\n                                        <MessageText>\n                                            {item.text}\n                                        </MessageText>\n                                        <MessageStatusRow wrap={false}>\n                                            <Col span='auto'>\n                                                {getMsgDate()}\n                                            </Col>\n                                            {\n                                                me && (\n                                                    <Col span='auto'>\n                                                        <IconBox>\n                                                            {\n                                                                item.sent\n                                                                    ? <ClockSvg/>\n                                                                    : item.is_read ? <AllDoneCheckSvg/> :\n                                                                    <CheckLineSvg/>\n                                                            }\n                                                        </IconBox>\n                                                    </Col>\n                                                )\n                                            }\n                                        </MessageStatusRow>\n                                    </MessageTextContent>\n                                </>\n                            )\n                        }\n                    </MessageContent>\n                </MessageItemRow>\n            </Col>\n        </Row>\n    )\n}"]},"metadata":{},"sourceType":"module"}