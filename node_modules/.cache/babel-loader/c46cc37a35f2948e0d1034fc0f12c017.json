{"ast":null,"code":"import{useCallback}from'react';import Cookies from'js-cookie';import jwtDecode from'jwt-decode';import{useHistory}from'react-router-dom';import account from'../../Service/account';import{tokenMount}from'../../Models/app';import{PROFILE_TYPE}from'../../Constants';import{getCurrentAccount}from'../../Models/account-model';import{showMessage}from'../../UIComponents/MessageNotification';export function useProfileMenu(){var _useHistory=useHistory(),push=_useHistory.push;var tokens=Cookies.get('users')&&JSON.parse(Cookies.get('users'));var changeOrgProfile=useCallback(function(item){getCurrentAccount({slug_name:item.slug_name,type:PROFILE_TYPE.ORGANIZATION});push(\"/\".concat(item.slug_name,\"/offerings\"));},[push]);var changeUserProfile=useCallback(function(username){if(tokens&&tokens[username]){account.refreshToken({refresh:tokens[username].refresh}).then(function(response){var data=response.data;if(tokens){tokens[jwtDecode(data.access).username]={access:data.access,refresh:data.refresh};}Cookies.set('users',JSON.stringify(tokens));Cookies.set('token',data.access);Cookies.set('refresh-token',data.refresh);tokenMount(data.access);getCurrentAccount({slug_name:username,type:PROFILE_TYPE.USER});// if (!pathname.includes('create-organization') || !pathname.includes('sign-in')) {\n//     push(`/@${username}/tape`)\n// }\n// if (pathname.includes('sign-in')) {\n//     push('/')\n// }\n}).catch(function(){push('/sign-in');});}else{push({pathname:'/sign-in',state:{username:username}});}},[push,tokens]);var changeAccount=useCallback(function(username){var messageText=arguments.length>1&&arguments[1]!==undefined?arguments[1]:null;var redirect=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!messageText){changeUserProfile(username);}else{showMessage(messageText,'danger');}},[changeUserProfile]);var handleExit=function handleExit(){Cookies.remove('token');Cookies.remove('refresh-token');Cookies.remove('users');getCurrentAccount(null);tokenMount(null);};return{changeAccount:changeAccount,changeOrgProfile:changeOrgProfile,handleExit:handleExit};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/app/use-profile-menu.js"],"names":["useCallback","Cookies","jwtDecode","useHistory","account","tokenMount","PROFILE_TYPE","getCurrentAccount","showMessage","useProfileMenu","push","tokens","get","JSON","parse","changeOrgProfile","item","slug_name","type","ORGANIZATION","changeUserProfile","username","refreshToken","refresh","then","response","data","access","set","stringify","USER","catch","pathname","state","changeAccount","messageText","redirect","handleExit","remove"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\r\nimport Cookies from 'js-cookie'\r\nimport jwtDecode from 'jwt-decode'\r\nimport {useHistory} from 'react-router-dom'\r\nimport account from '../../Service/account'\r\nimport {tokenMount} from '../../Models/app'\r\nimport {PROFILE_TYPE} from '../../Constants'\r\nimport {getCurrentAccount} from '../../Models/account-model'\r\nimport {showMessage} from '../../UIComponents/MessageNotification'\r\n\r\nexport function useProfileMenu() {\r\n    const {push} = useHistory()\r\n    const tokens = Cookies.get('users') && JSON.parse(Cookies.get('users'))\r\n    \r\n    const changeOrgProfile = useCallback((item) => {\r\n        getCurrentAccount({slug_name: item.slug_name, type: PROFILE_TYPE.ORGANIZATION})\r\n        push(`/${item.slug_name}/offerings`)\r\n    }, [push])\r\n    \r\n    const changeUserProfile = useCallback((username) => {\r\n        if (tokens && tokens[username]) {\r\n            account.refreshToken({refresh: tokens[username].refresh})\r\n                .then(response => {\r\n                    const data = response.data\r\n                    if (tokens) {\r\n                        tokens[jwtDecode(data.access).username] = {\r\n                            access: data.access,\r\n                            refresh: data.refresh\r\n                        }\r\n                        \r\n                    }\r\n                    Cookies.set('users', JSON.stringify(tokens))\r\n                    Cookies.set('token', data.access)\r\n                    Cookies.set('refresh-token', data.refresh)\r\n                    tokenMount(data.access)\r\n                    getCurrentAccount({slug_name: username, type: PROFILE_TYPE.USER})\r\n                    // if (!pathname.includes('create-organization') || !pathname.includes('sign-in')) {\r\n                    //     push(`/@${username}/tape`)\r\n                    // }\r\n                    \r\n                    // if (pathname.includes('sign-in')) {\r\n                    //     push('/')\r\n                    // }\r\n                    \r\n                    \r\n                })\r\n                .catch(() => {\r\n                    push('/sign-in')\r\n                })\r\n        } else {\r\n            push({\r\n                pathname: '/sign-in',\r\n                state: {username}\r\n            })\r\n        }\r\n    }, [push, tokens])\r\n    \r\n    const changeAccount = useCallback((username, messageText = null, redirect = false) => {\r\n        if (!messageText) {\r\n            changeUserProfile(username)\r\n        } else {\r\n            showMessage(messageText, 'danger')\r\n        }\r\n    }, [changeUserProfile])\r\n    \r\n    const handleExit = () => {\r\n        Cookies.remove('token')\r\n        Cookies.remove('refresh-token')\r\n        Cookies.remove('users')\r\n        getCurrentAccount(null)\r\n        tokenMount(null)\r\n    }\r\n    return {changeAccount, changeOrgProfile, handleExit}\r\n    \r\n}"]},"metadata":{},"sourceType":"module"}