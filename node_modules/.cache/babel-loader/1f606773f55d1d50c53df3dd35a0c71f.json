{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { $userModel, userSubsMeMount, userSubsMyMount } from '../../Models/user-model';\nimport { useStore } from 'effector-react';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useUserSubs({\n  slug_name,\n  type\n}) {\n  const [username, setUsername] = useState(null);\n  const {\n    $userSubsMy: {\n      result: resultSubsMy\n    },\n    $userSubsMe: {\n      result: subsMeResult\n    }\n  } = useStore($userModel);\n  const getUserSubMyList = useCallback(params => {\n    if (username) {\n      const data = {\n        username,\n        ...params\n      };\n      userSubsMyMount(data);\n    }\n  }, [username]);\n  const getUserSubsMeList = useCallback(params => {\n    if (username) {\n      const data = {\n        username,\n        ...params\n      };\n      userSubsMeMount(data);\n    }\n  }, [username]);\n  const loadMore = useCallback(type => {\n    if (type === 'my') {\n      if (resultSubsMy && resultSubsMy.nextOffset) {\n        const data = {\n          params: { ...initialParams,\n            offset: resultSubsMy.nextOffset\n          }\n        };\n        getUserSubMyList(data);\n      }\n    }\n\n    if (type === 'me') {\n      if (subsMeResult && subsMeResult.nextOffset) {\n        const data = {\n          params: { ...initialParams,\n            offset: subsMeResult.nextOffset\n          }\n        };\n        getUserSubsMeList(data);\n      }\n    }\n  }, [getUserSubMyList, getUserSubsMeList, subsMeResult, resultSubsMy]);\n  useEffect(() => {\n    const data = {\n      clear: true,\n      params: initialParams\n    };\n\n    if (type === 'me') {\n      getUserSubsMeList(data);\n    } else if (type === 'my') {\n      getUserSubMyList(data);\n    }\n  }, [getUserSubMyList, type, getUserSubsMeList]);\n  useEffect(() => {\n    if (slug_name) {\n      setUsername(slug_name);\n    } else {\n      setUsername(null);\n    }\n  }, [slug_name]);\n  return {\n    getUserSubMyList,\n    loadMore\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/user/use-subs.js"],"names":["useCallback","useEffect","useState","$userModel","userSubsMeMount","userSubsMyMount","useStore","initialParams","limit","offset","useUserSubs","slug_name","type","username","setUsername","$userSubsMy","result","resultSubsMy","$userSubsMe","subsMeResult","getUserSubMyList","params","data","getUserSubsMeList","loadMore","nextOffset","clear"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\r\nimport {$userModel, userSubsMeMount, userSubsMyMount} from '../../Models/user-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useUserSubs({slug_name, type}) {\r\n    const [username, setUsername] = useState(null)\r\n    const {$userSubsMy: {result: resultSubsMy}, $userSubsMe: {result: subsMeResult}} = useStore($userModel)\r\n    \r\n    const getUserSubMyList = useCallback((params) => {\r\n        if (username) {\r\n            const data = {\r\n                username,\r\n                ...params\r\n            }\r\n            userSubsMyMount(data)\r\n        }\r\n        \r\n    }, [username])\r\n    \r\n    const getUserSubsMeList = useCallback((params) => {\r\n        if (username) {\r\n            const data = {\r\n                username,\r\n                ...params\r\n            }\r\n            userSubsMeMount(data)\r\n        }\r\n    }, [username])\r\n    \r\n    const loadMore = useCallback((type) => {\r\n        if (type === 'my') {\r\n            if (resultSubsMy && resultSubsMy.nextOffset) {\r\n                const data = {\r\n                    params: {\r\n                        ...initialParams,\r\n                        offset: resultSubsMy.nextOffset\r\n                    }\r\n                }\r\n                getUserSubMyList(data)\r\n            }\r\n        }\r\n        \r\n        if (type === 'me') {\r\n            if (subsMeResult && subsMeResult.nextOffset) {\r\n                const data = {\r\n                    params: {\r\n                        ...initialParams,\r\n                        offset: subsMeResult.nextOffset\r\n                    }\r\n                }\r\n                getUserSubsMeList(data)\r\n            }\r\n        }\r\n    }, [getUserSubMyList, getUserSubsMeList, subsMeResult, resultSubsMy])\r\n    \r\n    useEffect(() => {\r\n        const data = {\r\n            clear: true,\r\n            params: initialParams\r\n        }\r\n        if (type === 'me') {\r\n            getUserSubsMeList(data)\r\n        } else if (type === 'my') {\r\n            getUserSubMyList(data)\r\n        }\r\n    }, [getUserSubMyList, type, getUserSubsMeList])\r\n    \r\n    useEffect(() => {\r\n        if (slug_name) {\r\n            setUsername(slug_name)\r\n        } else {\r\n            setUsername(null)\r\n        }\r\n    }, [slug_name])\r\n    \r\n    return {\r\n        getUserSubMyList,\r\n        loadMore\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}