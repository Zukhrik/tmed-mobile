{"ast":null,"code":"import { useCallback } from 'react';\nimport Cookies from 'js-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { useHistory } from 'react-router-dom';\nimport account from '../../Service/account';\nimport { tokenMount } from '../../Models/app';\nimport { PROFILE_TYPE } from '../../Constants';\nimport { getCurrentAccount } from '../../Models/account-model';\nimport { showMessage } from '../../UIComponents/MessageNotification';\nexport function useProfileMenu() {\n  const {\n    push\n  } = useHistory();\n  const tokens = Cookies.get('users') && JSON.parse(Cookies.get('users'));\n  const changeOrgProfile = useCallback(item => {\n    getCurrentAccount({\n      slug_name: item.slug_name,\n      type: PROFILE_TYPE.ORGANIZATION\n    });\n    push(`/${item.slug_name}/offerings`);\n  }, [push]);\n  const changeUserProfile = useCallback(username => {\n    if (tokens && tokens[username]) {\n      account.refreshToken({\n        refresh: tokens[username].refresh\n      }).then(response => {\n        const data = response.data;\n\n        if (tokens) {\n          tokens[jwtDecode(data.access).username] = {\n            access: data.access,\n            refresh: data.refresh\n          };\n        }\n\n        Cookies.set('users', JSON.stringify(tokens));\n        Cookies.set('token', data.access);\n        Cookies.set('refresh-token', data.refresh);\n        tokenMount(data.access);\n        getCurrentAccount({\n          slug_name: username,\n          type: PROFILE_TYPE.USER\n        }); // if (!pathname.includes('create-organization') || !pathname.includes('sign-in')) {\n        //     push(`/@${username}/tape`)\n        // }\n        // if (pathname.includes('sign-in')) {\n        //     push('/')\n        // }\n      }).catch(() => {\n        push('/sign-in');\n      });\n    } else {\n      push({\n        pathname: '/sign-in',\n        state: {\n          username\n        }\n      });\n    }\n  }, [push, tokens]);\n  const changeAccount = useCallback((username, messageText = null, redirect = false) => {\n    if (!messageText) {\n      changeUserProfile(username);\n    } else {\n      showMessage(messageText, 'danger');\n    }\n  }, [changeUserProfile]);\n\n  const handleExit = () => {\n    Cookies.remove('token');\n    Cookies.remove('refresh-token');\n    Cookies.remove('users');\n    getCurrentAccount(null);\n    tokenMount(null);\n  };\n\n  return {\n    changeAccount,\n    changeOrgProfile,\n    handleExit\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/app/use-profile-menu.js"],"names":["useCallback","Cookies","jwtDecode","useHistory","account","tokenMount","PROFILE_TYPE","getCurrentAccount","showMessage","useProfileMenu","push","tokens","get","JSON","parse","changeOrgProfile","item","slug_name","type","ORGANIZATION","changeUserProfile","username","refreshToken","refresh","then","response","data","access","set","stringify","USER","catch","pathname","state","changeAccount","messageText","redirect","handleExit","remove"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport Cookies from 'js-cookie'\nimport jwtDecode from 'jwt-decode'\nimport {useHistory} from 'react-router-dom'\nimport account from '../../Service/account'\nimport {tokenMount} from '../../Models/app'\nimport {PROFILE_TYPE} from '../../Constants'\nimport {getCurrentAccount} from '../../Models/account-model'\nimport {showMessage} from '../../UIComponents/MessageNotification'\n\nexport function useProfileMenu() {\n    const {push} = useHistory()\n    const tokens = Cookies.get('users') && JSON.parse(Cookies.get('users'))\n    \n    const changeOrgProfile = useCallback((item) => {\n        getCurrentAccount({slug_name: item.slug_name, type: PROFILE_TYPE.ORGANIZATION})\n        push(`/${item.slug_name}/offerings`)\n    }, [push])\n    \n    const changeUserProfile = useCallback((username) => {\n        if (tokens && tokens[username]) {\n            account.refreshToken({refresh: tokens[username].refresh})\n                .then(response => {\n                    const data = response.data\n                    if (tokens) {\n                        tokens[jwtDecode(data.access).username] = {\n                            access: data.access,\n                            refresh: data.refresh\n                        }\n                        \n                    }\n                    Cookies.set('users', JSON.stringify(tokens))\n                    Cookies.set('token', data.access)\n                    Cookies.set('refresh-token', data.refresh)\n                    tokenMount(data.access)\n                    getCurrentAccount({slug_name: username, type: PROFILE_TYPE.USER})\n                    // if (!pathname.includes('create-organization') || !pathname.includes('sign-in')) {\n                    //     push(`/@${username}/tape`)\n                    // }\n                    \n                    // if (pathname.includes('sign-in')) {\n                    //     push('/')\n                    // }\n                    \n                    \n                })\n                .catch(() => {\n                    push('/sign-in')\n                })\n        } else {\n            push({\n                pathname: '/sign-in',\n                state: {username}\n            })\n        }\n    }, [push, tokens])\n    \n    const changeAccount = useCallback((username, messageText = null, redirect = false) => {\n        if (!messageText) {\n            changeUserProfile(username)\n        } else {\n            showMessage(messageText, 'danger')\n        }\n    }, [changeUserProfile])\n    \n    const handleExit = () => {\n        Cookies.remove('token')\n        Cookies.remove('refresh-token')\n        Cookies.remove('users')\n        getCurrentAccount(null)\n        tokenMount(null)\n    }\n    return {changeAccount, changeOrgProfile, handleExit}\n    \n}"]},"metadata":{},"sourceType":"module"}