{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchSearchList } from './effects';\nconst $searchList = createStore({\n  loading: false,\n  data: [],\n  error: false,\n  result: {}\n}).on(fetchSearchList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchSearchList.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: []\n})).on(fetchSearchList.done, (state, {\n  result,\n  params\n}) => {\n  // const processed = commonStoreList({\n  //     response: result.data, state, clear: params.clear, ...params.params\n  // })\n  return { ...state,\n    data: result.data\n  };\n});\nexport const $searchModel = combine({\n  $searchList\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/search-model/stores.js"],"names":["combine","createStore","fetchSearchList","$searchList","loading","data","error","result","on","pending","state","fail","done","params","$searchModel"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,UAAnC;AACA,SAAQC,eAAR,QAA8B,WAA9B;AAEA,MAAMC,WAAW,GAAGF,WAAW,CAAC;AAACG,EAAAA,OAAO,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE,EAAvB;AAA2BC,EAAAA,KAAK,EAAE,KAAlC;AAAyCC,EAAAA,MAAM,EAAE;AAAjD,CAAD,CAAX,CACfC,EADe,CACZN,eAAe,CAACO,OADJ,EACa,CAACC,KAAD,EAAQN,OAAR,MAAqB,EAAC,GAAGM,KAAJ;AAAWN,EAAAA;AAAX,CAArB,CADb,EAEfI,EAFe,CAEZN,eAAe,CAACS,IAFJ,EAEU,CAACD,KAAD,EAAQ;AAACJ,EAAAA;AAAD,CAAR,MAAqB,EAC3C,GAAGI,KADwC;AACjCJ,EAAAA,KADiC;AAC1BD,EAAAA,IAAI,EAAE;AADoB,CAArB,CAFV,EAKfG,EALe,CAKZN,eAAe,CAACU,IALJ,EAKU,CAACF,KAAD,EAAQ;AAACH,EAAAA,MAAD;AAASM,EAAAA;AAAT,CAAR,KAA6B;AACnD;AACA;AACA;AACA,SAAO,EAAC,GAAGH,KAAJ;AAAWL,IAAAA,IAAI,EAAEE,MAAM,CAACF;AAAxB,GAAP;AACH,CAVe,CAApB;AAaA,OAAO,MAAMS,YAAY,GAAGd,OAAO,CAAC;AAChCG,EAAAA;AADgC,CAAD,CAA5B","sourcesContent":["import {combine, createStore} from 'effector'\nimport {fetchSearchList} from './effects'\n\nconst $searchList = createStore({loading: false, data: [], error: false, result: {}})\n    .on(fetchSearchList.pending, (state, loading) => ({...state, loading}))\n    .on(fetchSearchList.fail, (state, {error}) => ({\n        ...state, error, data: []\n    }))\n    .on(fetchSearchList.done, (state, {result, params}) => {\n        // const processed = commonStoreList({\n        //     response: result.data, state, clear: params.clear, ...params.params\n        // })\n        return {...state, data: result.data}\n    })\n\n\nexport const $searchModel = combine({\n    $searchList\n})"]},"metadata":{},"sourceType":"module"}