{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{Fragment,useCallback,useState}from'react';import{useStore}from'effector-react';import{$appModel}from'../../Models/app';import{useLocation}from'react-router-dom';import{useChatCommon}from'../../Hooks/chat';import{IconBox}from'../../UIComponents/GlobalStyles';import{$accountModel}from'../../Models/account-model';import{bottomNavbarWithoutToken,bottomNavbarWithToken}from'../../data';import{BottomNavbarCounter,BottomNavbarItem,BottomNavWrapper,NavLinkItem,NavLinkWrapper}from'./style';import{OverlayAuth}from'../../UIComponents/OverlayAuth';import{OverlaySettings}from'../Overlay';export var BottomNavBar=function BottomNavBar(){var _useLocation=useLocation(),pathname=_useLocation.pathname;var _useChatCommon=useChatCommon(),getChatList=_useChatCommon.getChatList;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),auth=_useState2[0],setAuth=_useState2[1];var _useStore=useStore($accountModel),currentProfile=_useStore.$profiles.currentProfile;var _useStore2=useStore($appModel),token=_useStore2.$app.token,$socketCounters=_useStore2.$socketCounters;var generateCustomPath=function generateCustomPath(id){var customPath=currentProfile&&\"\".concat(currentProfile.url,\"/tape\");return id.indexOf('profile')!==-1&&customPath;};var generateAction=function generateAction(id){switch(id){case'chat':return getChatList;default:return false;}};var getActive=useCallback(function(id){if(id==='/profile'){if(currentProfile){return pathname.indexOf(currentProfile.slug_name)!==-1;}}else if(id==='/records'){return pathname.slice(0,8)==='/records';}else{return pathname===id;}},[currentProfile,pathname]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(OverlaySettings,{openSettings:auth,onClose:function onClose(){return setAuth(false);},content:/*#__PURE__*/React.createElement(OverlayAuth,{auth:auth,setAuth:setAuth,onClose:function onClose(){return setAuth(false);}})}),/*#__PURE__*/React.createElement(BottomNavWrapper,{borderBottom:true},/*#__PURE__*/React.createElement(NavLinkWrapper,null,token&&currentProfile?bottomNavbarWithToken.map(function(item){var Icon=item.icon;return/*#__PURE__*/React.createElement(Fragment,{key:item.icon},/*#__PURE__*/React.createElement(NavLinkItem,{isActive:function isActive(){return getActive(\"\".concat(item.id==='org'?'/':\"/\".concat(item.id)));},onClick:function onClick(){return item.onClick(generateAction(item.id));},to:item.generatePath(item.path,generateCustomPath(item.id))},/*#__PURE__*/React.createElement(IconBox,null,/*#__PURE__*/React.createElement(Icon,null),item.socketKey&&!!$socketCounters[item.socketKey]&&/*#__PURE__*/React.createElement(BottomNavbarCounter,null,$socketCounters[item.socketKey]))));}):bottomNavbarWithoutToken.map(function(item,idx){var Icon=item.icon;return/*#__PURE__*/React.createElement(Fragment,{key:\"\".concat(idx+1)},item.path==='/sign-in'?/*#__PURE__*/React.createElement(BottomNavbarItem,{onClick:function onClick(){return setAuth(true);}},/*#__PURE__*/React.createElement(Icon,null)):/*#__PURE__*/React.createElement(NavLinkItem,{isActive:function isActive(){return getActive(\"\".concat(item.id==='tape'?'/':\"/\".concat(item.id)));},onClick:function onClick(){return item.onClick(generateAction(item.id));},to:item.generatePath(item.path,generateCustomPath(item.id))},/*#__PURE__*/React.createElement(Icon,null)));}))));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx"],"names":["React","Fragment","useCallback","useState","useStore","$appModel","useLocation","useChatCommon","IconBox","$accountModel","bottomNavbarWithoutToken","bottomNavbarWithToken","BottomNavbarCounter","BottomNavbarItem","BottomNavWrapper","NavLinkItem","NavLinkWrapper","OverlayAuth","OverlaySettings","BottomNavBar","pathname","getChatList","auth","setAuth","currentProfile","$profiles","token","$app","$socketCounters","generateCustomPath","id","customPath","url","indexOf","generateAction","getActive","slug_name","slice","map","item","Icon","icon","onClick","generatePath","path","socketKey","idx"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\nimport {useLocation} from 'react-router-dom'\r\nimport {useChatCommon} from '../../Hooks/chat'\r\nimport {IconBox} from '../../UIComponents/GlobalStyles'\r\nimport {$accountModel} from '../../Models/account-model'\r\nimport {bottomNavbarWithoutToken, bottomNavbarWithToken} from '../../data'\r\nimport {BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper} from './style'\r\nimport {OverlayAuth} from '../../UIComponents/OverlayAuth'\r\nimport {OverlaySettings} from '../Overlay'\r\n\r\n\r\nexport const BottomNavBar = () => {\r\n    const {pathname} = useLocation()\r\n    const {getChatList} = useChatCommon()\r\n    const [auth, setAuth] = useState(false)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {$app: {token}, $socketCounters} = useStore($appModel)\r\n    \r\n    const generateCustomPath = (id) => {\r\n        const customPath = currentProfile && `${currentProfile.url}/tape`\r\n        return id.indexOf('profile') !== -1 && customPath\r\n    }\r\n    \r\n    const generateAction = (id) => {\r\n        switch (id) {\r\n            case 'chat':\r\n                return getChatList\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    \r\n    const getActive = useCallback((id) => {\r\n        if (id === '/profile') {\r\n            if (currentProfile) {\r\n                return pathname.indexOf(currentProfile.slug_name) !== -1\r\n            }\r\n        } else if (id === '/records') {\r\n            return pathname.slice(0, 8) === '/records'\r\n        } else {\r\n            return pathname === id\r\n        }\r\n    }, [currentProfile, pathname])\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <OverlaySettings\r\n                openSettings={auth}\r\n                onClose={() => setAuth(false)}\r\n                content={<OverlayAuth\r\n                    auth={auth}\r\n                    setAuth={setAuth}\r\n                    onClose={() => setAuth(false)}\r\n                />}\r\n            />\r\n            <BottomNavWrapper borderBottom>\r\n                <NavLinkWrapper>\r\n                    {\r\n                        token && currentProfile\r\n                            ? (\r\n                                bottomNavbarWithToken.map((item) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={item.icon}>\r\n                                            <NavLinkItem\r\n                                                isActive={() => getActive(`${item.id === 'org'\r\n                                                    ? '/'\r\n                                                    : `/${item.id}`}`)\r\n                                                }\r\n                                                onClick={() => item.onClick(generateAction(item.id))}\r\n                                                to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                            >\r\n                                                <IconBox>\r\n                                                    <Icon/>\r\n                                                    {\r\n                                                        item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                            <BottomNavbarCounter>\r\n                                                                {$socketCounters[item.socketKey]}\r\n                                                            </BottomNavbarCounter>\r\n                                                        )\r\n                                                    }\r\n                                                </IconBox>\r\n                                            </NavLinkItem>\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            ) : (\r\n                                bottomNavbarWithoutToken.map((item, idx) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={`${idx + 1}`}>\r\n                                            {\r\n                                                item.path === '/sign-in'\r\n                                                    ? <BottomNavbarItem onClick={() => setAuth(true)}>\r\n                                                        <Icon/>\r\n                                                    </BottomNavbarItem>\r\n                                                    : (<NavLinkItem\r\n                                                            isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                            onClick={() => item.onClick(generateAction(item.id))}\r\n                                                            to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                        >\r\n                                                            <Icon/>\r\n                                                        </NavLinkItem>\r\n                                                    )\r\n                                            }\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            )\r\n                    }\r\n                </NavLinkWrapper>\r\n            </BottomNavWrapper>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}