{"ast":null,"code":"import moment from 'moment';\nimport order from '../../Service/order';\nimport { getWeekDay } from '../../utils/time-utils';\nimport { useCallback, useEffect, useState } from 'react';\nexport const formatter = 'YYYY-MM-DD HH:mm:ss';\nexport const strHourToInt = strHour => parseInt(strHour.split(':')[0]);\n\nconst getDateTime = number => {\n  const now = new Date().toDateString();\n  const time = String(number.toFixed(2)).split('.').join(':');\n  return new Date(`${now} ${time}`);\n};\n\nexport function useSpecialistDate({\n  job,\n  dateData,\n  active,\n  handleChange\n}) {\n  const [error, setError] = useState([]);\n  const [currentWeekday, setCurrentWeekday] = useState(getWeekDay(new Date()));\n  const [date, setDate] = useState(new Date());\n  const [hours, setHours] = useState([]);\n  const [meetTimes, setMeetTimes] = useState({});\n  const [requestData, setRequestData] = useState({});\n  const [isCurrentDate, setIsCurrentDate] = useState(true);\n  const [requestLoading, setRequestLoading] = useState(false);\n  const [mounted, setMounted] = useState(false);\n  const generateData = useCallback(data => {\n    const tmp = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const id = moment(data[i].meet_date).format(formatter);\n      const meetTime = moment(data[i].meet_date).format('HH.mm');\n      tmp[id] = {\n        id: data[i].id,\n        user: data[i].user,\n        meetTime: parseFloat(meetTime).toFixed(1),\n        meetTimeStr: moment(data[i].meet_date).format('HH:mm')\n      };\n    }\n\n    return tmp;\n  }, []);\n  const addClientData = useCallback(order => {\n    if (dateData && dateData.id) {\n      const meetTime = moment(dateData.id).format('HH.mm');\n      order[dateData.id] = {\n        id: active.id,\n        user: active.user,\n        meetTime: parseFloat(meetTime).toFixed(1),\n        meetTimeStr: moment(dateData.id).format('HH:mm')\n      };\n      return order;\n    }\n\n    return false;\n  }, [active, dateData]);\n  const renderMeetRow = useCallback(id => {\n    const strHour = moment(id).format('HH:mm');\n    const hourInt = strHourToInt(strHour);\n    return meetTimes[hourInt] && Object.values(meetTimes[hourInt]).sort((a, b) => a - b);\n  }, [meetTimes]);\n  const getOrgOrder = useCallback(params => {\n    setRequestLoading(true);\n    order.getOrgOrderResponsible(params).then(res => {\n      const data = res.data.results;\n      let orders = generateData(data);\n      const withClientOrder = addClientData(orders);\n\n      if (withClientOrder) {\n        orders = withClientOrder;\n      }\n\n      setRequestData(orders);\n    }).finally(() => setRequestLoading(false)).catch(() => {\n      setRequestLoading(false);\n    });\n  }, [generateData, addClientData]);\n  useEffect(() => {\n    if (job && job.operating_mode && job.operating_mode[currentWeekday]) {\n      const data = job.operating_mode[currentWeekday];\n      const breaks = data.breaks;\n      const to = parseInt(data.to);\n      const interval = data.proc_interval;\n      const tmp = [];\n      const possibleMeetTime = {};\n      let from = parseInt(data.from);\n      let a = data.from;\n\n      while (a < to) {\n        for (let i = 0; i < breaks.length; i++) {\n          if (parseInt(a) === parseInt(breaks[i].from) && (breaks[i].from >= a || a < breaks[i].to)) {\n            a = breaks[i].to;\n          }\n        }\n\n        possibleMeetTime[parseInt(a)] = possibleMeetTime[parseInt(a)] ? { ...possibleMeetTime[parseInt(a)]\n        } : {};\n        const strHour = moment(new Date(new Date(getDateTime(a)).setMinutes(new Date(getDateTime(a === from ? data.from : a)).getMinutes() + interval)));\n        const id = moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter);\n        possibleMeetTime[parseInt(a)][id] = {\n          intDate: a,\n          isPossible: isCurrentDate,\n          strDate: `${moment(getDateTime(a)).format('HH:mm')} - ${strHour.format('HH:mm')}`,\n          dateString: moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter)\n        };\n        a = parseFloat(strHour.format('HH.mm'));\n      }\n\n      setMeetTimes(possibleMeetTime);\n\n      if (isCurrentDate) {\n        from = moment(new Date()).format('H');\n      }\n\n      for (let i = from; i < to; i++) {\n        const id = moment(new Date(`${date.toDateString()} 0${i}:00`)).format(formatter);\n\n        if (i < 10) {\n          tmp.push({\n            hour: `0${i}:00`,\n            interval: data.proc_interval,\n            id\n          });\n        } else {\n          tmp.push({\n            hour: `${i}:00`,\n            interval: data.proc_interval,\n            id\n          });\n        }\n      }\n\n      setHours(tmp);\n      setError(null);\n    } else {\n      setError('Не рабочий день');\n    }\n  }, [job, currentWeekday, date, isCurrentDate]);\n  const getOrders = useCallback(id => {\n    const data = {\n      responsible_id: id,\n      params: {\n        limit: 200,\n        offset: 0,\n        meet_date__gt: moment(new Date(`${date.toDateString()} 00:00`)).format(formatter),\n        meet_date__lt: moment(new Date(`${date.toDateString()} 23:59`)).format(formatter)\n      }\n    };\n    getOrgOrder(data);\n  }, [date, getOrgOrder]);\n  const changeClientDate = useCallback((meet_date, meetTime) => {\n    const orders = { ...requestData\n    };\n    const params = {\n      id: active.id,\n      user: active.user,\n      meetTime: parseFloat(meetTime).toFixed(1),\n      meetTimeStr: moment(meet_date).format('HH:mm')\n    };\n\n    if (dateData && dateData.id && orders[dateData.id]) {\n      delete orders[dateData.id];\n    }\n\n    const clientDate = {\n      date: meet_date,\n      id: meet_date\n    };\n    handleChange(clientDate);\n    orders[meet_date] = params;\n    setRequestData(orders);\n  }, [active, dateData, requestData, handleChange]);\n  const onChange = useCallback(meetDate => {\n    const meet_date = moment(new Date(`${date.toDateString()} ${moment(getDateTime(meetDate)).format('HH:mm')}`)).format(formatter);\n    const meetTime = moment(meet_date).format('HH.mm');\n    changeClientDate(meet_date, meetTime);\n  }, [changeClientDate, date]);\n  const selectDate = useCallback(date => {\n    setDate(new Date(date));\n    setCurrentWeekday(getWeekDay(new Date(date)));\n\n    if (moment(date).format('YYYY-MM-DD') === moment(new Date()).format('YYYY-MM-DD')) {\n      setIsCurrentDate(true);\n    } else {\n      setIsCurrentDate(false);\n    }\n  }, []);\n  useEffect(() => {\n    if (!mounted && job) {\n      getOrders(job.id);\n      setMounted(true);\n    }\n  }, [getOrders, mounted, job]);\n  return {\n    hours,\n    renderMeetRow,\n    requestData,\n    onChange,\n    selectDate,\n    date,\n    requestLoading,\n    error\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/checkout/use-specialist-date.js"],"names":["moment","order","getWeekDay","useCallback","useEffect","useState","formatter","strHourToInt","strHour","parseInt","split","getDateTime","number","now","Date","toDateString","time","String","toFixed","join","useSpecialistDate","job","dateData","active","handleChange","error","setError","currentWeekday","setCurrentWeekday","date","setDate","hours","setHours","meetTimes","setMeetTimes","requestData","setRequestData","isCurrentDate","setIsCurrentDate","requestLoading","setRequestLoading","mounted","setMounted","generateData","data","tmp","i","length","id","meet_date","format","meetTime","user","parseFloat","meetTimeStr","addClientData","renderMeetRow","hourInt","Object","values","sort","a","b","getOrgOrder","params","getOrgOrderResponsible","then","res","results","orders","withClientOrder","finally","catch","operating_mode","breaks","to","interval","proc_interval","possibleMeetTime","from","setMinutes","getMinutes","intDate","isPossible","strDate","dateString","push","hour","getOrders","responsible_id","limit","offset","meet_date__gt","meet_date__lt","changeClientDate","clientDate","onChange","meetDate","selectDate"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,UAAR,QAAyB,wBAAzB;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AAEA,OAAO,MAAMC,SAAS,GAAG,qBAAlB;AAEP,OAAO,MAAMC,YAAY,GAAIC,OAAD,IAAaC,QAAQ,CAACD,OAAO,CAACE,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAD,CAA1C;;AAEP,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC5B,QAAMC,GAAG,GAAG,IAAIC,IAAJ,GAAWC,YAAX,EAAZ;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACL,MAAM,CAACM,OAAP,CAAe,CAAf,CAAD,CAAN,CAA0BR,KAA1B,CAAgC,GAAhC,EAAqCS,IAArC,CAA0C,GAA1C,CAAb;AACA,SAAO,IAAIL,IAAJ,CAAU,GAAED,GAAI,IAAGG,IAAK,EAAxB,CAAP;AACH,CAJD;;AAMA,OAAO,SAASI,iBAAT,CAA2B;AAACC,EAAAA,GAAD;AAAMC,EAAAA,QAAN;AAAgBC,EAAAA,MAAhB;AAAwBC,EAAAA;AAAxB,CAA3B,EAAkE;AACrE,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBrB,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACsB,cAAD,EAAiBC,iBAAjB,IAAsCvB,QAAQ,CAACH,UAAU,CAAC,IAAIY,IAAJ,EAAD,CAAX,CAApD;AACA,QAAM,CAACe,IAAD,EAAOC,OAAP,IAAkBzB,QAAQ,CAAC,IAAIS,IAAJ,EAAD,CAAhC;AACA,QAAM,CAACiB,KAAD,EAAQC,QAAR,IAAoB3B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAAC8B,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgC,aAAD,EAAgBC,gBAAhB,IAAoCjC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACkC,cAAD,EAAiBC,iBAAjB,IAAsCnC,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACoC,OAAD,EAAUC,UAAV,IAAwBrC,QAAQ,CAAC,KAAD,CAAtC;AAGA,QAAMsC,YAAY,GAAGxC,WAAW,CAAEyC,IAAD,IAAU;AACvC,UAAMC,GAAG,GAAG,EAAZ;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,YAAME,EAAE,GAAGhD,MAAM,CAAC4C,IAAI,CAACE,CAAD,CAAJ,CAAQG,SAAT,CAAN,CAA0BC,MAA1B,CAAiC5C,SAAjC,CAAX;AACA,YAAM6C,QAAQ,GAAGnD,MAAM,CAAC4C,IAAI,CAACE,CAAD,CAAJ,CAAQG,SAAT,CAAN,CAA0BC,MAA1B,CAAiC,OAAjC,CAAjB;AACAL,MAAAA,GAAG,CAACG,EAAD,CAAH,GAAU;AACNA,QAAAA,EAAE,EAAEJ,IAAI,CAACE,CAAD,CAAJ,CAAQE,EADN;AAENI,QAAAA,IAAI,EAAER,IAAI,CAACE,CAAD,CAAJ,CAAQM,IAFR;AAGND,QAAAA,QAAQ,EAAEE,UAAU,CAACF,QAAD,CAAV,CAAqBjC,OAArB,CAA6B,CAA7B,CAHJ;AAINoC,QAAAA,WAAW,EAAEtD,MAAM,CAAC4C,IAAI,CAACE,CAAD,CAAJ,CAAQG,SAAT,CAAN,CAA0BC,MAA1B,CAAiC,OAAjC;AAJP,OAAV;AAMH;;AACD,WAAOL,GAAP;AACH,GAb+B,EAa7B,EAb6B,CAAhC;AAeA,QAAMU,aAAa,GAAGpD,WAAW,CAAEF,KAAD,IAAW;AACzC,QAAIqB,QAAQ,IAAIA,QAAQ,CAAC0B,EAAzB,EAA6B;AACzB,YAAMG,QAAQ,GAAGnD,MAAM,CAACsB,QAAQ,CAAC0B,EAAV,CAAN,CAAoBE,MAApB,CAA2B,OAA3B,CAAjB;AACAjD,MAAAA,KAAK,CAACqB,QAAQ,CAAC0B,EAAV,CAAL,GAAqB;AACjBA,QAAAA,EAAE,EAAEzB,MAAM,CAACyB,EADM;AAEjBI,QAAAA,IAAI,EAAE7B,MAAM,CAAC6B,IAFI;AAGjBD,QAAAA,QAAQ,EAAEE,UAAU,CAACF,QAAD,CAAV,CAAqBjC,OAArB,CAA6B,CAA7B,CAHO;AAIjBoC,QAAAA,WAAW,EAAEtD,MAAM,CAACsB,QAAQ,CAAC0B,EAAV,CAAN,CAAoBE,MAApB,CAA2B,OAA3B;AAJI,OAArB;AAMA,aAAOjD,KAAP;AACH;;AAED,WAAO,KAAP;AACH,GAbgC,EAa9B,CAACsB,MAAD,EAASD,QAAT,CAb8B,CAAjC;AAeA,QAAMkC,aAAa,GAAGrD,WAAW,CAAE6C,EAAD,IAAQ;AACtC,UAAMxC,OAAO,GAAGR,MAAM,CAACgD,EAAD,CAAN,CAAWE,MAAX,CAAkB,OAAlB,CAAhB;AACA,UAAMO,OAAO,GAAGlD,YAAY,CAACC,OAAD,CAA5B;AACA,WAAOyB,SAAS,CAACwB,OAAD,CAAT,IACAC,MAAM,CAACC,MAAP,CAAc1B,SAAS,CAACwB,OAAD,CAAvB,EAAkCG,IAAlC,CAAuC,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAArD,CADP;AAEH,GALgC,EAK9B,CAAC7B,SAAD,CAL8B,CAAjC;AAOA,QAAM8B,WAAW,GAAG5D,WAAW,CAAE6D,MAAD,IAAY;AACxCxB,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAvC,IAAAA,KAAK,CAACgE,sBAAN,CAA6BD,MAA7B,EACKE,IADL,CACUC,GAAG,IAAI;AACT,YAAMvB,IAAI,GAAGuB,GAAG,CAACvB,IAAJ,CAASwB,OAAtB;AACA,UAAIC,MAAM,GAAG1B,YAAY,CAACC,IAAD,CAAzB;AACA,YAAM0B,eAAe,GAAGf,aAAa,CAACc,MAAD,CAArC;;AACA,UAAIC,eAAJ,EAAqB;AACjBD,QAAAA,MAAM,GAAGC,eAAT;AACH;;AACDlC,MAAAA,cAAc,CAACiC,MAAD,CAAd;AACH,KATL,EAUKE,OAVL,CAUa,MAAM/B,iBAAiB,CAAC,KAAD,CAVpC,EAWKgC,KAXL,CAWW,MAAM;AACThC,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH,KAbL;AAcH,GAhB8B,EAgB5B,CAACG,YAAD,EAAeY,aAAf,CAhB4B,CAA/B;AAkBAnD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIiB,GAAG,IAAIA,GAAG,CAACoD,cAAX,IAA6BpD,GAAG,CAACoD,cAAJ,CAAmB9C,cAAnB,CAAjC,EAAqE;AACjE,YAAMiB,IAAI,GAAGvB,GAAG,CAACoD,cAAJ,CAAmB9C,cAAnB,CAAb;AACA,YAAM+C,MAAM,GAAG9B,IAAI,CAAC8B,MAApB;AACA,YAAMC,EAAE,GAAGlE,QAAQ,CAACmC,IAAI,CAAC+B,EAAN,CAAnB;AACA,YAAMC,QAAQ,GAAGhC,IAAI,CAACiC,aAAtB;AACA,YAAMhC,GAAG,GAAG,EAAZ;AACA,YAAMiC,gBAAgB,GAAG,EAAzB;AACA,UAAIC,IAAI,GAAGtE,QAAQ,CAACmC,IAAI,CAACmC,IAAN,CAAnB;AACA,UAAIlB,CAAC,GAAGjB,IAAI,CAACmC,IAAb;;AAEA,aAAOlB,CAAC,GAAGc,EAAX,EAAe;AACX,aAAK,IAAI7B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,MAAM,CAAC3B,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACpC,cAAIrC,QAAQ,CAACoD,CAAD,CAAR,KAAgBpD,QAAQ,CAACiE,MAAM,CAAC5B,CAAD,CAAN,CAAUiC,IAAX,CAAxB,KAA6CL,MAAM,CAAC5B,CAAD,CAAN,CAAUiC,IAAV,IAAkBlB,CAAlB,IAAuBA,CAAC,GAAGa,MAAM,CAAC5B,CAAD,CAAN,CAAU6B,EAAlF,CAAJ,EAA2F;AACvFd,YAAAA,CAAC,GAAGa,MAAM,CAAC5B,CAAD,CAAN,CAAU6B,EAAd;AACH;AACJ;;AAEDG,QAAAA,gBAAgB,CAACrE,QAAQ,CAACoD,CAAD,CAAT,CAAhB,GAAgCiB,gBAAgB,CAACrE,QAAQ,CAACoD,CAAD,CAAT,CAAhB,GAC1B,EAAC,GAAGiB,gBAAgB,CAACrE,QAAQ,CAACoD,CAAD,CAAT;AAApB,SAD0B,GAE1B,EAFN;AAIA,cAAMrD,OAAO,GAAGR,MAAM,CAAC,IAAIc,IAAJ,CAAS,IAAIA,IAAJ,CAASH,WAAW,CAACkD,CAAD,CAApB,EAC3BmB,UAD2B,CAChB,IAAIlE,IAAJ,CAASH,WAAW,CAACkD,CAAC,KAAKkB,IAAN,GAAanC,IAAI,CAACmC,IAAlB,GAAyBlB,CAA1B,CAApB,EAAkDoB,UAAlD,KAAiEL,QADjD,CAAT,CAAD,CAAtB;AAGA,cAAM5B,EAAE,GAAGhD,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,IAAGf,MAAM,CAACW,WAAW,CAACkD,CAAD,CAAZ,CAAN,CAAuBX,MAAvB,CAA8B,OAA9B,CAAuC,EAA1E,CAAD,CAAN,CAAqFA,MAArF,CAA4F5C,SAA5F,CAAX;AAEAwE,QAAAA,gBAAgB,CAACrE,QAAQ,CAACoD,CAAD,CAAT,CAAhB,CAA8Bb,EAA9B,IAAoC;AAChCkC,UAAAA,OAAO,EAAErB,CADuB;AAEhCsB,UAAAA,UAAU,EAAE9C,aAFoB;AAGhC+C,UAAAA,OAAO,EAAG,GAAEpF,MAAM,CAACW,WAAW,CAACkD,CAAD,CAAZ,CAAN,CAAuBX,MAAvB,CAA8B,OAA9B,CAAuC,MAAK1C,OAAO,CAAC0C,MAAR,CAAe,OAAf,CAAwB,EAHhD;AAIhCmC,UAAAA,UAAU,EAAErF,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,IAAGf,MAAM,CAACW,WAAW,CAACkD,CAAD,CAAZ,CAAN,CAAuBX,MAAvB,CAA8B,OAA9B,CAAuC,EAA1E,CAAD,CAAN,CAAqFA,MAArF,CAA4F5C,SAA5F;AAJoB,SAApC;AAMAuD,QAAAA,CAAC,GAAGR,UAAU,CAAC7C,OAAO,CAAC0C,MAAR,CAAe,OAAf,CAAD,CAAd;AACH;;AAEDhB,MAAAA,YAAY,CAAC4C,gBAAD,CAAZ;;AAEA,UAAIzC,aAAJ,EAAmB;AACf0C,QAAAA,IAAI,GAAG/E,MAAM,CAAC,IAAIc,IAAJ,EAAD,CAAN,CAAmBoC,MAAnB,CAA0B,GAA1B,CAAP;AACH;;AAED,WAAK,IAAIJ,CAAC,GAAGiC,IAAb,EAAmBjC,CAAC,GAAG6B,EAAvB,EAA2B7B,CAAC,EAA5B,EAAgC;AAC5B,cAAME,EAAE,GAAGhD,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,KAAI+B,CAAE,KAAtC,CAAD,CAAN,CAAoDI,MAApD,CAA2D5C,SAA3D,CAAX;;AACA,YAAIwC,CAAC,GAAG,EAAR,EAAY;AACRD,UAAAA,GAAG,CAACyC,IAAJ,CAAS;AAACC,YAAAA,IAAI,EAAG,IAAGzC,CAAE,KAAb;AAAmB8B,YAAAA,QAAQ,EAAEhC,IAAI,CAACiC,aAAlC;AAAiD7B,YAAAA;AAAjD,WAAT;AACH,SAFD,MAEO;AACHH,UAAAA,GAAG,CAACyC,IAAJ,CAAS;AAACC,YAAAA,IAAI,EAAG,GAAEzC,CAAE,KAAZ;AAAkB8B,YAAAA,QAAQ,EAAEhC,IAAI,CAACiC,aAAjC;AAAgD7B,YAAAA;AAAhD,WAAT;AACH;AACJ;;AACDhB,MAAAA,QAAQ,CAACa,GAAD,CAAR;AACAnB,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,KAnDD,MAmDO;AACHA,MAAAA,QAAQ,CAAC,iBAAD,CAAR;AACH;AACJ,GAvDQ,EAuDN,CAACL,GAAD,EAAMM,cAAN,EAAsBE,IAAtB,EAA4BQ,aAA5B,CAvDM,CAAT;AAyDA,QAAMmD,SAAS,GAAGrF,WAAW,CAAE6C,EAAD,IAAQ;AAClC,UAAMJ,IAAI,GAAG;AACT6C,MAAAA,cAAc,EAAEzC,EADP;AAETgB,MAAAA,MAAM,EAAE;AACJ0B,QAAAA,KAAK,EAAE,GADH;AAEJC,QAAAA,MAAM,EAAE,CAFJ;AAGJC,QAAAA,aAAa,EAAE5F,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,QAAhC,CAAD,CAAN,CAAiDmC,MAAjD,CAAwD5C,SAAxD,CAHX;AAIJuF,QAAAA,aAAa,EAAE7F,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,QAAhC,CAAD,CAAN,CAAiDmC,MAAjD,CAAwD5C,SAAxD;AAJX;AAFC,KAAb;AASAyD,IAAAA,WAAW,CAACnB,IAAD,CAAX;AACH,GAX4B,EAW1B,CAACf,IAAD,EAAOkC,WAAP,CAX0B,CAA7B;AAaA,QAAM+B,gBAAgB,GAAG3F,WAAW,CAAC,CAAC8C,SAAD,EAAYE,QAAZ,KAAyB;AAC1D,UAAMkB,MAAM,GAAG,EAAC,GAAGlC;AAAJ,KAAf;AACA,UAAM6B,MAAM,GAAG;AACXhB,MAAAA,EAAE,EAAEzB,MAAM,CAACyB,EADA;AAEXI,MAAAA,IAAI,EAAE7B,MAAM,CAAC6B,IAFF;AAGXD,MAAAA,QAAQ,EAAEE,UAAU,CAACF,QAAD,CAAV,CAAqBjC,OAArB,CAA6B,CAA7B,CAHC;AAIXoC,MAAAA,WAAW,EAAEtD,MAAM,CAACiD,SAAD,CAAN,CAAkBC,MAAlB,CAAyB,OAAzB;AAJF,KAAf;;AAMA,QAAI5B,QAAQ,IAAIA,QAAQ,CAAC0B,EAArB,IAA2BqB,MAAM,CAAC/C,QAAQ,CAAC0B,EAAV,CAArC,EAAoD;AAChD,aAAOqB,MAAM,CAAC/C,QAAQ,CAAC0B,EAAV,CAAb;AACH;;AAED,UAAM+C,UAAU,GAAG;AACflE,MAAAA,IAAI,EAAEoB,SADS;AAEfD,MAAAA,EAAE,EAAEC;AAFW,KAAnB;AAKAzB,IAAAA,YAAY,CAACuE,UAAD,CAAZ;AACA1B,IAAAA,MAAM,CAACpB,SAAD,CAAN,GAAoBe,MAApB;AACA5B,IAAAA,cAAc,CAACiC,MAAD,CAAd;AACH,GApBmC,EAoBjC,CAAC9C,MAAD,EAASD,QAAT,EAAmBa,WAAnB,EAAgCX,YAAhC,CApBiC,CAApC;AAsBA,QAAMwE,QAAQ,GAAG7F,WAAW,CAAE8F,QAAD,IAAc;AACvC,UAAMhD,SAAS,GAAGjD,MAAM,CAAC,IAAIc,IAAJ,CAAU,GAAEe,IAAI,CAACd,YAAL,EAAoB,IAAGf,MAAM,CAACW,WAAW,CAACsF,QAAD,CAAZ,CAAN,CAA8B/C,MAA9B,CAAqC,OAArC,CAA8C,EAAjF,CAAD,CAAN,CAA4FA,MAA5F,CAAmG5C,SAAnG,CAAlB;AACA,UAAM6C,QAAQ,GAAGnD,MAAM,CAACiD,SAAD,CAAN,CAAkBC,MAAlB,CAAyB,OAAzB,CAAjB;AACA4C,IAAAA,gBAAgB,CAAC7C,SAAD,EAAYE,QAAZ,CAAhB;AAEH,GAL2B,EAKzB,CAAC2C,gBAAD,EAAmBjE,IAAnB,CALyB,CAA5B;AAOA,QAAMqE,UAAU,GAAG/F,WAAW,CAAE0B,IAAD,IAAU;AACrCC,IAAAA,OAAO,CAAC,IAAIhB,IAAJ,CAASe,IAAT,CAAD,CAAP;AACAD,IAAAA,iBAAiB,CAAC1B,UAAU,CAAC,IAAIY,IAAJ,CAASe,IAAT,CAAD,CAAX,CAAjB;;AAEA,QAAI7B,MAAM,CAAC6B,IAAD,CAAN,CAAaqB,MAAb,CAAoB,YAApB,MAAsClD,MAAM,CAAC,IAAIc,IAAJ,EAAD,CAAN,CAAmBoC,MAAnB,CAA0B,YAA1B,CAA1C,EAAmF;AAC/EZ,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH,KAFD,MAEO;AACHA,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH;AACJ,GAT6B,EAS3B,EAT2B,CAA9B;AAWAlC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACqC,OAAD,IAAYpB,GAAhB,EAAqB;AACjBmE,MAAAA,SAAS,CAACnE,GAAG,CAAC2B,EAAL,CAAT;AACAN,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GALQ,EAKN,CAAC8C,SAAD,EAAY/C,OAAZ,EAAqBpB,GAArB,CALM,CAAT;AAOA,SAAO;AACHU,IAAAA,KADG;AAEHyB,IAAAA,aAFG;AAGHrB,IAAAA,WAHG;AAIH6D,IAAAA,QAJG;AAKHE,IAAAA,UALG;AAMHrE,IAAAA,IANG;AAOHU,IAAAA,cAPG;AAQHd,IAAAA;AARG,GAAP;AAUH","sourcesContent":["import moment from 'moment'\nimport order from '../../Service/order'\nimport {getWeekDay} from '../../utils/time-utils'\nimport {useCallback, useEffect, useState} from 'react'\n\nexport const formatter = 'YYYY-MM-DD HH:mm:ss'\n\nexport const strHourToInt = (strHour) => parseInt(strHour.split(':')[0])\n\nconst getDateTime = (number) => {\n    const now = new Date().toDateString()\n    const time = String(number.toFixed(2)).split('.').join(':')\n    return new Date(`${now} ${time}`)\n}\n\nexport function useSpecialistDate({job, dateData, active, handleChange}) {\n    const [error, setError] = useState([])\n    const [currentWeekday, setCurrentWeekday] = useState(getWeekDay(new Date()))\n    const [date, setDate] = useState(new Date())\n    const [hours, setHours] = useState([])\n    const [meetTimes, setMeetTimes] = useState({})\n    const [requestData, setRequestData] = useState({})\n    const [isCurrentDate, setIsCurrentDate] = useState(true)\n    const [requestLoading, setRequestLoading] = useState(false)\n    const [mounted, setMounted] = useState(false)\n    \n    \n    const generateData = useCallback((data) => {\n        const tmp = {}\n        for (let i = 0; i < data.length; i++) {\n            const id = moment(data[i].meet_date).format(formatter)\n            const meetTime = moment(data[i].meet_date).format('HH.mm')\n            tmp[id] = {\n                id: data[i].id,\n                user: data[i].user,\n                meetTime: parseFloat(meetTime).toFixed(1),\n                meetTimeStr: moment(data[i].meet_date).format('HH:mm')\n            }\n        }\n        return tmp\n    }, [])\n    \n    const addClientData = useCallback((order) => {\n        if (dateData && dateData.id) {\n            const meetTime = moment(dateData.id).format('HH.mm')\n            order[dateData.id] = {\n                id: active.id,\n                user: active.user,\n                meetTime: parseFloat(meetTime).toFixed(1),\n                meetTimeStr: moment(dateData.id).format('HH:mm')\n            }\n            return order\n        }\n        \n        return false\n    }, [active, dateData])\n    \n    const renderMeetRow = useCallback((id) => {\n        const strHour = moment(id).format('HH:mm')\n        const hourInt = strHourToInt(strHour)\n        return meetTimes[hourInt]\n            && Object.values(meetTimes[hourInt]).sort((a, b) => a - b)\n    }, [meetTimes])\n    \n    const getOrgOrder = useCallback((params) => {\n        setRequestLoading(true)\n        order.getOrgOrderResponsible(params)\n            .then(res => {\n                const data = res.data.results\n                let orders = generateData(data)\n                const withClientOrder = addClientData(orders)\n                if (withClientOrder) {\n                    orders = withClientOrder\n                }\n                setRequestData(orders)\n            })\n            .finally(() => setRequestLoading(false))\n            .catch(() => {\n                setRequestLoading(false)\n            })\n    }, [generateData, addClientData])\n    \n    useEffect(() => {\n        if (job && job.operating_mode && job.operating_mode[currentWeekday]) {\n            const data = job.operating_mode[currentWeekday]\n            const breaks = data.breaks\n            const to = parseInt(data.to)\n            const interval = data.proc_interval\n            const tmp = []\n            const possibleMeetTime = {}\n            let from = parseInt(data.from)\n            let a = data.from\n            \n            while (a < to) {\n                for (let i = 0; i < breaks.length; i++) {\n                    if (parseInt(a) === parseInt(breaks[i].from) && (breaks[i].from >= a || a < breaks[i].to)) {\n                        a = breaks[i].to\n                    }\n                }\n                \n                possibleMeetTime[parseInt(a)] = possibleMeetTime[parseInt(a)]\n                    ? {...possibleMeetTime[parseInt(a)]}\n                    : {}\n                \n                const strHour = moment(new Date(new Date(getDateTime(a))\n                    .setMinutes(new Date(getDateTime(a === from ? data.from : a)).getMinutes() + interval)))\n                \n                const id = moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter)\n                \n                possibleMeetTime[parseInt(a)][id] = {\n                    intDate: a,\n                    isPossible: isCurrentDate,\n                    strDate: `${moment(getDateTime(a)).format('HH:mm')} - ${strHour.format('HH:mm')}`,\n                    dateString: moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter)\n                }\n                a = parseFloat(strHour.format('HH.mm'))\n            }\n            \n            setMeetTimes(possibleMeetTime)\n            \n            if (isCurrentDate) {\n                from = moment(new Date()).format('H')\n            }\n            \n            for (let i = from; i < to; i++) {\n                const id = moment(new Date(`${date.toDateString()} 0${i}:00`)).format(formatter)\n                if (i < 10) {\n                    tmp.push({hour: `0${i}:00`, interval: data.proc_interval, id})\n                } else {\n                    tmp.push({hour: `${i}:00`, interval: data.proc_interval, id})\n                }\n            }\n            setHours(tmp)\n            setError(null)\n        } else {\n            setError('Не рабочий день')\n        }\n    }, [job, currentWeekday, date, isCurrentDate])\n    \n    const getOrders = useCallback((id) => {\n        const data = {\n            responsible_id: id,\n            params: {\n                limit: 200,\n                offset: 0,\n                meet_date__gt: moment(new Date(`${date.toDateString()} 00:00`)).format(formatter),\n                meet_date__lt: moment(new Date(`${date.toDateString()} 23:59`)).format(formatter)\n            }\n        }\n        getOrgOrder(data)\n    }, [date, getOrgOrder])\n    \n    const changeClientDate = useCallback((meet_date, meetTime) => {\n        const orders = {...requestData}\n        const params = {\n            id: active.id,\n            user: active.user,\n            meetTime: parseFloat(meetTime).toFixed(1),\n            meetTimeStr: moment(meet_date).format('HH:mm')\n        }\n        if (dateData && dateData.id && orders[dateData.id]) {\n            delete orders[dateData.id]\n        }\n        \n        const clientDate = {\n            date: meet_date,\n            id: meet_date\n        }\n        \n        handleChange(clientDate)\n        orders[meet_date] = params\n        setRequestData(orders)\n    }, [active, dateData, requestData, handleChange])\n    \n    const onChange = useCallback((meetDate) => {\n        const meet_date = moment(new Date(`${date.toDateString()} ${moment(getDateTime(meetDate)).format('HH:mm')}`)).format(formatter)\n        const meetTime = moment(meet_date).format('HH.mm')\n        changeClientDate(meet_date, meetTime)\n        \n    }, [changeClientDate, date])\n    \n    const selectDate = useCallback((date) => {\n        setDate(new Date(date))\n        setCurrentWeekday(getWeekDay(new Date(date)))\n        \n        if (moment(date).format('YYYY-MM-DD') === moment(new Date()).format('YYYY-MM-DD')) {\n            setIsCurrentDate(true)\n        } else {\n            setIsCurrentDate(false)\n        }\n    }, [])\n    \n    useEffect(() => {\n        if (!mounted && job) {\n            getOrders(job.id)\n            setMounted(true)\n        }\n    }, [getOrders, mounted, job])\n    \n    return {\n        hours,\n        renderMeetRow,\n        requestData,\n        onChange,\n        selectDate,\n        date,\n        requestLoading,\n        error\n    }\n}"]},"metadata":{},"sourceType":"module"}