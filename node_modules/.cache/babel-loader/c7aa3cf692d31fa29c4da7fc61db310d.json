{"ast":null,"code":"import { useCallback } from 'react';\nimport { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useLocation } from 'react-router-dom';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { changeLoadingStatusOffering, changeOrgOfferingStatus } from '../../Models/offerings-model';\nimport { useMutation, useQuery } from 'react-query';\nexport function useOrgOrder() {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''; // const checkoutOffering = useCallback((event) => {\n  //     const orgSpecList = event.responsible\n  //\n  //     if (!event.loading) {\n  //         changeLoadingStatusOffering({id: event.id, status: true})\n  //         if (!event.inCart) {\n  //             const params = {\n  //                 org_slug_name: event.organization,\n  //                 data: {\n  //                     offering_id: event.id,\n  //                     responsible_id: specId ? specId : orgSpecList[0].id\n  //                 }\n  //             }\n  //             order.postOrgOrderCart(params)\n  //                 .then((res) => {\n  //                     if (res) {\n  //                         saveURLMount(pathname)\n  //                         changeOrgOfferingStatus({\n  //                             offering_id: params.data.offering_id,\n  //                             status: true,\n  //                             loadingStatus: false\n  //                         })\n  //                         getOrgOrderCartsMount({\n  //                             org_slug_name: event.organization,\n  //                             params: {limit: 1, offset: 0},\n  //                             clear: true\n  //                         })\n  //                     }\n  //                 })\n  //                 .catch((e) => {\n  //                     console.log(e.response)\n  //                 })\n  //         } else {\n  //             order.deleteOrderCart({offering_id: event.id})\n  //                 .then((res) => {\n  //                     if (res) {\n  //                         changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n  //                         getOrgOrderCartsMount({\n  //                             org_slug_name: event.organization,\n  //                             params: {limit: 1, offset: 0},\n  //                             clear: true\n  //                         })\n  //                     }\n  //                 })\n  //                 .catch((e) => {\n  //                     console.log(e.response)\n  //                 })\n  //         }\n  //     }\n  //\n  // }, [specId, pathname])\n\n  const {\n    status,\n    data,\n    error,\n    isFetching\n  } = useQuery('todos', async () => {\n    const res = await axios.get('/api/data');\n    return res.data;\n  });\n  return {\n    currency,\n    checkoutOffering\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useUrlParams","useStore","order","useLocation","$appModel","saveURLMount","$accountModel","getOrgOrderCartsMount","changeLoadingStatusOffering","changeOrgOfferingStatus","useMutation","useQuery","useOrgOrder","pathname","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","status","data","error","isFetching","res","axios","get","checkoutOffering"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,SAAR,EAAmBC,YAAnB,QAAsC,kBAAtC;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AACA,SAAQC,2BAAR,EAAqCC,uBAArC,QAAmE,8BAAnE;AACA,SAAQC,WAAR,EAAqBC,QAArB,QAAoC,aAApC;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAaV,WAAW,EAA9B;AACA,QAAM;AAACW,IAAAA;AAAD,MAAwBb,QAAQ,CAACG,SAAD,CAAtC;AACA,QAAM;AAACW,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAEC;AAAhB;AAAV,MAAqCjB,YAAY,EAAvD;AACA,QAAM;AAACkB,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgClB,QAAQ,CAACK,aAAD,CAA9C;AACA,QAAMc,QAAQ,GAAGD,cAAc,GAAGA,cAAc,CAACC,QAAf,CAAwBC,IAA3B,GAAkCP,mBAAmB,CAACM,QAApB,IAAgC,EAAjG,CAL0B,CAO1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAM;AAAEE,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA,KAAhB;AAAuBC,IAAAA;AAAvB,MAAsCd,QAAQ,CAAC,OAAD,EAAU,YAAY;AACtE,UAAMe,GAAG,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAU,WAAV,CAAlB;AACA,WAAOF,GAAG,CAACH,IAAX;AACH,GAHmD,CAApD;AAKA,SAAO;AACHH,IAAAA,QADG;AACOS,IAAAA;AADP,GAAP;AAGH","sourcesContent":["import {useCallback} from 'react'\nimport {useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useLocation} from 'react-router-dom'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {changeLoadingStatusOffering, changeOrgOfferingStatus} from '../../Models/offerings-model'\nimport {useMutation, useQuery} from 'react-query'\n\nexport function useOrgOrder() {\n    const {pathname} = useLocation()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    // const checkoutOffering = useCallback((event) => {\n    //     const orgSpecList = event.responsible\n    //\n    //     if (!event.loading) {\n    //         changeLoadingStatusOffering({id: event.id, status: true})\n    //         if (!event.inCart) {\n    //             const params = {\n    //                 org_slug_name: event.organization,\n    //                 data: {\n    //                     offering_id: event.id,\n    //                     responsible_id: specId ? specId : orgSpecList[0].id\n    //                 }\n    //             }\n    //             order.postOrgOrderCart(params)\n    //                 .then((res) => {\n    //                     if (res) {\n    //                         saveURLMount(pathname)\n    //                         changeOrgOfferingStatus({\n    //                             offering_id: params.data.offering_id,\n    //                             status: true,\n    //                             loadingStatus: false\n    //                         })\n    //                         getOrgOrderCartsMount({\n    //                             org_slug_name: event.organization,\n    //                             params: {limit: 1, offset: 0},\n    //                             clear: true\n    //                         })\n    //                     }\n    //                 })\n    //                 .catch((e) => {\n    //                     console.log(e.response)\n    //                 })\n    //         } else {\n    //             order.deleteOrderCart({offering_id: event.id})\n    //                 .then((res) => {\n    //                     if (res) {\n    //                         changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n    //                         getOrgOrderCartsMount({\n    //                             org_slug_name: event.organization,\n    //                             params: {limit: 1, offset: 0},\n    //                             clear: true\n    //                         })\n    //                     }\n    //                 })\n    //                 .catch((e) => {\n    //                     console.log(e.response)\n    //                 })\n    //         }\n    //     }\n    //\n    // }, [specId, pathname])\n    \n    const { status, data, error, isFetching } = useQuery('todos', async () => {\n        const res = await axios.get('/api/data')\n        return res.data\n    })\n    \n    return {\n        currency, checkoutOffering\n    }\n}"]},"metadata":{},"sourceType":"module"}