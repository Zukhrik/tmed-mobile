{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { URL_KEYS } from '../../Constants';\nimport { useParams } from 'react-router-dom';\nimport { useCallback, useEffect } from 'react';\nimport { $orgModel, orgSpecialistsMount } from '../../Models/org-model';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useOrgSpecialistLists() {\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    organization\n  } = useParams();\n  const {\n    $app: {\n      showSpecPanel\n    }\n  } = useStore($appModel);\n  const {\n    $orgSpecialistsList: {\n      result\n    }\n  } = useStore($orgModel);\n  const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID];\n  const getOrgSpecialists = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgSpecialistsMount(data);\n    }\n  }, [organization]); // const getOrgSpecCatList = useCallback((params) => {\n  //     if (organization) {\n  //         const data = {\n  //             organization,\n  //             ...params\n  //         }\n  //         orgSpecialistCatMount(data)\n  //     }\n  // }, [organization])\n\n  const loadMore = useCallback(() => {\n    if (result === null || result === void 0 ? void 0 : result.nextOffset) {\n      const data = {\n        organization: organization,\n        params: { ...initialParams,\n          offset: result.nextOffset\n        }\n      };\n      orgSpecialistsMount(data);\n    }\n  }, [result, organization]); // useEffect(() => {\n  //     const data = {\n  //         clear: true,\n  //         params: {...initialParams}\n  //     }\n  //     getOrgSpecCatList(data)\n  // }, [getOrgSpecCatList])\n\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (showSpecPanel) {\n        if (spec_cat_id) {\n          data['params']['spec_cat'] = spec_cat_id;\n        } else {\n          delete data['params']['spec_cat'];\n        }\n\n        getOrgSpecialists(data);\n      }\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getOrgSpecialists, spec_cat_id, showSpecPanel]);\n  return {\n    loadMore\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/org/use-org-specialists.js"],"names":["useUrlParams","URL_KEYS","useParams","useCallback","useEffect","$orgModel","orgSpecialistsMount","useStore","$appModel","initialParams","limit","offset","useOrgSpecialistLists","urlData","organization","$app","showSpecPanel","$orgSpecialistsList","result","spec_cat_id","SPECIALIST_CATEGORY_ID","getOrgSpecialists","params","data","loadMore","nextOffset","timeout","setTimeout","clear","clearTimeout"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,WAAR,EAAqBC,SAArB,QAAqC,OAArC;AACA,SAAQC,SAAR,EAAmBC,mBAAnB,QAA6C,wBAA7C;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,OAAO,SAASC,qBAAT,GAAiC;AACpC,QAAM;AAACC,IAAAA;AAAD,MAAYb,YAAY,EAA9B;AACA,QAAM;AAACc,IAAAA;AAAD,MAAiBZ,SAAS,EAAhC;AACA,QAAM;AAACa,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAP,MAA0BT,QAAQ,CAACC,SAAD,CAAxC;AACA,QAAM;AAACS,IAAAA,mBAAmB,EAAE;AAACC,MAAAA;AAAD;AAAtB,MAAkCX,QAAQ,CAACF,SAAD,CAAhD;AACA,QAAMc,WAAW,GAAGN,OAAO,CAACZ,QAAQ,CAACmB,sBAAV,CAA3B;AAEA,QAAMC,iBAAiB,GAAGlB,WAAW,CAAEmB,MAAD,IAAY;AAC9C,QAAIR,YAAJ,EAAkB;AACd,YAAMS,IAAI,GAAG;AACTT,QAAAA,YADS;AAET,WAAGQ;AAFM,OAAb;AAIAhB,MAAAA,mBAAmB,CAACiB,IAAD,CAAnB;AACH;AACJ,GARoC,EAQlC,CAACT,YAAD,CARkC,CAArC,CAPoC,CAiBpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,QAAMU,QAAQ,GAAGrB,WAAW,CAAC,MAAM;AAC/B,QAAIe,MAAJ,aAAIA,MAAJ,uBAAIA,MAAM,CAAEO,UAAZ,EAAwB;AACpB,YAAMF,IAAI,GAAG;AACTT,QAAAA,YAAY,EAAEA,YADL;AAETQ,QAAAA,MAAM,EAAE,EACJ,GAAGb,aADC;AAEJE,UAAAA,MAAM,EAAEO,MAAM,CAACO;AAFX;AAFC,OAAb;AAOAnB,MAAAA,mBAAmB,CAACiB,IAAD,CAAnB;AACH;AACJ,GAX2B,EAWzB,CAACL,MAAD,EAASJ,YAAT,CAXyB,CAA5B,CA3BoC,CAwCpC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIsB,OAAO,GAAG,IAAd;AAEAA,IAAAA,OAAO,GAAGC,UAAU,CAAC,MAAM;AACvB,YAAMJ,IAAI,GAAG;AACTK,QAAAA,KAAK,EAAE,IADE;AAETN,QAAAA,MAAM,EAAE,EACJ,GAAGb;AADC;AAFC,OAAb;;AAOA,UAAIO,aAAJ,EAAmB;AACf,YAAIG,WAAJ,EAAiB;AACbI,UAAAA,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,IAA6BJ,WAA7B;AACH,SAFD,MAEO;AACH,iBAAOI,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,CAAP;AACH;;AAEDF,QAAAA,iBAAiB,CAACE,IAAD,CAAjB;AACH;AACJ,KAjBmB,EAiBjB,GAjBiB,CAApB;AAmBA,WAAO,MAAM;AACTM,MAAAA,YAAY,CAACH,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH,KAHD;AAKH,GA3BQ,EA2BN,CAACL,iBAAD,EAAoBF,WAApB,EAAiCH,aAAjC,CA3BM,CAAT;AA6BA,SAAO;AAACQ,IAAAA;AAAD,GAAP;AACH","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {URL_KEYS} from '../../Constants'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useCallback, useEffect} from 'react'\r\nimport {$orgModel, orgSpecialistsMount} from '../../Models/org-model'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useOrgSpecialistLists() {\r\n    const {urlData} = useUrlParams()\r\n    const {organization} = useParams()\r\n    const {$app: {showSpecPanel}} = useStore($appModel)\r\n    const {$orgSpecialistsList: {result}} = useStore($orgModel)\r\n    const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]\r\n    \r\n    const getOrgSpecialists = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgSpecialistsMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    // const getOrgSpecCatList = useCallback((params) => {\r\n    //     if (organization) {\r\n    //         const data = {\r\n    //             organization,\r\n    //             ...params\r\n    //         }\r\n    //         orgSpecialistCatMount(data)\r\n    //     }\r\n    // }, [organization])\r\n    \r\n    const loadMore = useCallback(() => {\r\n        if (result?.nextOffset) {\r\n            const data = {\r\n                organization: organization,\r\n                params: {\r\n                    ...initialParams,\r\n                    offset: result.nextOffset\r\n                }\r\n            }\r\n            orgSpecialistsMount(data)\r\n        }\r\n    }, [result, organization])\r\n    \r\n    // useEffect(() => {\r\n    //     const data = {\r\n    //         clear: true,\r\n    //         params: {...initialParams}\r\n    //     }\r\n    //     getOrgSpecCatList(data)\r\n    // }, [getOrgSpecCatList])\r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            \r\n            if (showSpecPanel) {\r\n                if (spec_cat_id) {\r\n                    data['params']['spec_cat'] = spec_cat_id\r\n                } else {\r\n                    delete data['params']['spec_cat']\r\n                }\r\n                \r\n                getOrgSpecialists(data)\r\n            }\r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n        \r\n    }, [getOrgSpecialists, spec_cat_id, showSpecPanel])\r\n    \r\n    return {loadMore}\r\n}"]},"metadata":{},"sourceType":"module"}