{"ast":null,"code":"import useWebSocket from 'react-use-websocket';\nimport { addedMessageToListFromSocket, chatSocketActionsMount, updateChatFromSocket, updateCounterFromSocket } from '../../Models/chat-model';\nimport { $appModel, socketCountersMount } from '../../Models/app';\nimport { useEffect, useState } from 'react';\nimport { useStore } from 'effector-react';\nexport function useChatWsAction() {\n  const [chatsActionUrl, setChatsActionUrl] = useState(null);\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const chatActions = useWebSocket(chatsActionUrl, {\n    onMessage: e => {\n      const data = JSON.parse(e.data);\n      console.log('chat_action', data);\n\n      if (data.action === 'read' && !data.myself) {\n        updateChatFromSocket({\n          id: data.chat.id,\n          username: data.user.username,\n          action: 'read'\n        });\n\n        if (data.counters) {\n          socketCountersMount({\n            chatUnreadCounter: data.counters.unread_count_all\n          });\n          addedMessageToListFromSocket({\n            key: data.user.username,\n            type: 'user',\n            payload: {\n              unread_count: data.counters.unread_count\n            }\n          });\n        }\n      }\n\n      if (data.action === 'typing') {\n        updateChatFromSocket({\n          username: data.user.username,\n          action: 'typing',\n          typing: data.typing\n        });\n      }\n\n      if (data.myself && data.action_ === 'read' && data.counters) {\n        socketCountersMount({\n          chatUnreadCounter: data.counters.unread_count_all\n        });\n        updateCounterFromSocket({\n          key: data.user.username,\n          type: 'user',\n          payload: {\n            unread_count: data.counters.unread_count\n          }\n        });\n      }\n    }\n  });\n  useEffect(() => {\n    if (chatActions) {\n      chatSocketActionsMount({\n        chatActionSendMessage: chatActions.sendMessage\n      });\n    }\n  }, [chatActions]);\n  useEffect(() => {\n    if (token) {\n      setChatsActionUrl(`wss://py.dwed.biz/ws/v1.0/chats/actions/?token=${token}`);\n    } else {\n      setChatsActionUrl(null);\n    }\n  }, [token]);\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/chat/use-chat-ws-action.js"],"names":["useWebSocket","addedMessageToListFromSocket","chatSocketActionsMount","updateChatFromSocket","updateCounterFromSocket","$appModel","socketCountersMount","useEffect","useState","useStore","useChatWsAction","chatsActionUrl","setChatsActionUrl","$app","token","chatActions","onMessage","e","data","JSON","parse","console","log","action","myself","id","chat","username","user","counters","chatUnreadCounter","unread_count_all","key","type","payload","unread_count","typing","action_","chatActionSendMessage","sendMessage"],"mappings":"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","sourcesContent":["import useWebSocket from 'react-use-websocket'\nimport {\n    addedMessageToListFromSocket,\n    chatSocketActionsMount,\n    updateChatFromSocket,\n    updateCounterFromSocket\n} from '../../Models/chat-model'\nimport {$appModel, socketCountersMount} from '../../Models/app'\nimport {useEffect, useState} from 'react'\nimport {useStore} from 'effector-react'\n\nexport function useChatWsAction() {\n    const [chatsActionUrl, setChatsActionUrl] = useState(null)\n    const {$app: {token}} = useStore($appModel)\n\n    const chatActions = useWebSocket(chatsActionUrl, {\n        onMessage: (e) => {\n            const data = JSON.parse(e.data)\n            console.log('chat_action', data)\n            if (data.action === 'read' && !data.myself) {\n                updateChatFromSocket({id: data.chat.id, username: data.user.username, action: 'read'})\n                if (data.counters) {\n                    socketCountersMount({chatUnreadCounter: data.counters.unread_count_all})\n                    addedMessageToListFromSocket({\n                        key: data.user.username,\n                        type: 'user',\n                        payload: {unread_count: data.counters.unread_count}\n                    })\n                }\n            }\n\n            if (data.action === 'typing') {\n                updateChatFromSocket({username: data.user.username, action: 'typing', typing: data.typing})\n            }\n\n            if (data.myself && data.action_ === 'read' && data.counters) {\n                socketCountersMount({chatUnreadCounter: data.counters.unread_count_all})\n                updateCounterFromSocket({\n                    key: data.user.username,\n                    type: 'user',\n                    payload: {unread_count: data.counters.unread_count}\n                })\n            }\n        }\n    })\n\n    useEffect(() => {\n        if (chatActions) {\n            chatSocketActionsMount({chatActionSendMessage: chatActions.sendMessage})\n        }\n    }, [chatActions])\n\n    useEffect(() => {\n        if (token) {\n            setChatsActionUrl(`wss://py.dwed.biz/ws/v1.0/chats/actions/?token=${token}`)\n        } else {\n            setChatsActionUrl(null)\n        }\n    }, [token])\n}"]},"metadata":{},"sourceType":"module"}