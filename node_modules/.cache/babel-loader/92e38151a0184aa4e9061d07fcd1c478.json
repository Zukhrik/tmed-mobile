{"ast":null,"code":"import { useCallback } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { useSubscription } from './use-subscription';\nimport { $userModel } from '../../Models/user-model';\nimport { $accountModel } from '../../Models/account-model';\nexport function useUserPage() {\n  const {\n    subscribeToAccount,\n    unsubscribeFromAccount\n  } = useSubscription({\n    from: 'user_info'\n  });\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    $user: {\n      data,\n      forceLoading\n    }\n  } = useStore($userModel);\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const {\n    username\n  } = useParams();\n  const userInfo = data[username];\n  const {\n    t\n  } = useTranslation();\n  const getSubscription = useCallback(() => {\n    let tmp = {\n      text: null,\n      toggle: () => false\n    };\n\n    if (!token) {\n      return false;\n    }\n\n    if (userInfo && username && currentProfile && currentProfile.slug_name !== userInfo.username) {\n      const full_name = `${userInfo.lastname ? `${userInfo.lastname} ` : ''}${userInfo.name}`;\n\n      if (userInfo.subs.subscribed) {\n        tmp = {\n          text: t('unsubscribe'),\n          toggle: () => unsubscribeFromAccount({\n            slug_name: username,\n            name: full_name\n          })\n        };\n      } else {\n        tmp = {\n          text: t('subscribe'),\n          toggle: () => subscribeToAccount({\n            slug_name: username,\n            name: full_name\n          })\n        };\n      }\n    }\n\n    return tmp;\n  }, [userInfo, currentProfile, t, token, username, subscribeToAccount, unsubscribeFromAccount]);\n  return {\n    currentProfile,\n    token,\n    username,\n    userInfo,\n    getSubscription,\n    forceLoading\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/user/use-user-page.js"],"names":["useCallback","useStore","$appModel","useParams","useTranslation","useSubscription","$userModel","$accountModel","useUserPage","subscribeToAccount","unsubscribeFromAccount","from","$profiles","currentProfile","$user","data","forceLoading","$app","token","username","userInfo","t","getSubscription","tmp","text","toggle","slug_name","full_name","lastname","name","subs","subscribed"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC1B,QAAM;AAACC,IAAAA,kBAAD;AAAqBC,IAAAA;AAArB,MAA+CL,eAAe,CAAC;AAACM,IAAAA,IAAI,EAAE;AAAP,GAAD,CAApE;AACA,QAAM;AAACC,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgCZ,QAAQ,CAACM,aAAD,CAA9C;AACA,QAAM;AAACO,IAAAA,KAAK,EAAE;AAACC,MAAAA,IAAD;AAAOC,MAAAA;AAAP;AAAR,MAAgCf,QAAQ,CAACK,UAAD,CAA9C;AACA,QAAM;AAACW,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAP,MAAkBjB,QAAQ,CAACC,SAAD,CAAhC;AACA,QAAM;AAACiB,IAAAA;AAAD,MAAahB,SAAS,EAA5B;AACA,QAAMiB,QAAQ,GAAGL,IAAI,CAACI,QAAD,CAArB;AACA,QAAM;AAACE,IAAAA;AAAD,MAAMjB,cAAc,EAA1B;AAEA,QAAMkB,eAAe,GAAGtB,WAAW,CAAC,MAAM;AACtC,QAAIuB,GAAG,GAAG;AACNC,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,MAAM,EAAE,MAAM;AAFR,KAAV;;AAIA,QAAI,CAACP,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AAED,QAAIE,QAAQ,IAAID,QAAZ,IAAwBN,cAAxB,IAA0CA,cAAc,CAACa,SAAf,KAA6BN,QAAQ,CAACD,QAApF,EAA8F;AAC1F,YAAMQ,SAAS,GAAI,GAAEP,QAAQ,CAACQ,QAAT,GAAqB,GAAER,QAAQ,CAACQ,QAAS,GAAzC,GAA8C,EAAG,GAAER,QAAQ,CAACS,IAAK,EAAtF;;AACA,UAAIT,QAAQ,CAACU,IAAT,CAAcC,UAAlB,EAA8B;AAC1BR,QAAAA,GAAG,GAAG;AACFC,UAAAA,IAAI,EAAEH,CAAC,CAAC,aAAD,CADL;AAEFI,UAAAA,MAAM,EAAE,MAAMf,sBAAsB,CAAC;AAACgB,YAAAA,SAAS,EAAEP,QAAZ;AAAsBU,YAAAA,IAAI,EAAEF;AAA5B,WAAD;AAFlC,SAAN;AAIH,OALD,MAKO;AACHJ,QAAAA,GAAG,GAAG;AACFC,UAAAA,IAAI,EAAEH,CAAC,CAAC,WAAD,CADL;AAEFI,UAAAA,MAAM,EAAE,MAAMhB,kBAAkB,CAAC;AAACiB,YAAAA,SAAS,EAAEP,QAAZ;AAAsBU,YAAAA,IAAI,EAAEF;AAA5B,WAAD;AAF9B,SAAN;AAIH;AACJ;;AAED,WAAOJ,GAAP;AACH,GAzBkC,EAyBhC,CAACH,QAAD,EAAWP,cAAX,EAA2BQ,CAA3B,EAA8BH,KAA9B,EAAqCC,QAArC,EAA+CV,kBAA/C,EAAmEC,sBAAnE,CAzBgC,CAAnC;AA2BA,SAAO;AAACG,IAAAA,cAAD;AAAiBK,IAAAA,KAAjB;AAAwBC,IAAAA,QAAxB;AAAkCC,IAAAA,QAAlC;AAA4CE,IAAAA,eAA5C;AAA6DN,IAAAA;AAA7D,GAAP;AACH","sourcesContent":["import {useCallback} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../Models/app'\nimport {useParams} from 'react-router-dom'\nimport {useTranslation} from 'react-i18next'\nimport {useSubscription} from './use-subscription'\nimport {$userModel} from '../../Models/user-model'\nimport {$accountModel} from '../../Models/account-model'\n\nexport function useUserPage() {\n    const {subscribeToAccount, unsubscribeFromAccount} = useSubscription({from: 'user_info'})\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const {$user: {data, forceLoading}} = useStore($userModel)\n    const {$app: {token}} = useStore($appModel)\n    const {username} = useParams()\n    const userInfo = data[username]\n    const {t} = useTranslation()\n    \n    const getSubscription = useCallback(() => {\n        let tmp = {\n            text: null,\n            toggle: () => false\n        }\n        if (!token) {\n            return false\n        }\n        \n        if (userInfo && username && currentProfile && currentProfile.slug_name !== userInfo.username) {\n            const full_name = `${userInfo.lastname ? `${userInfo.lastname} ` : ''}${userInfo.name}`\n            if (userInfo.subs.subscribed) {\n                tmp = {\n                    text: t('unsubscribe'),\n                    toggle: () => unsubscribeFromAccount({slug_name: username, name: full_name})\n                }\n            } else {\n                tmp = {\n                    text: t('subscribe'),\n                    toggle: () => subscribeToAccount({slug_name: username, name: full_name})\n                }\n            }\n        }\n        \n        return tmp\n    }, [userInfo, currentProfile, t, token, username, subscribeToAccount, unsubscribeFromAccount])\n    \n    return {currentProfile, token, username, userInfo, getSubscription, forceLoading}\n}"]},"metadata":{},"sourceType":"module"}