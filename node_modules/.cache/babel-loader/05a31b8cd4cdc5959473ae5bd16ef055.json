{"ast":null,"code":"import { useCallback } from 'react';\nimport { useListQuery, useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { changeLoadingStatusOffering, changeOrgOfferingStatus } from '../../Models/offerings-model';\nimport { useMutation } from 'react-query';\nimport { queryClient } from '../../App';\nexport function useOrgOrder() {\n  const {\n    query\n  } = useListQuery();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    organization\n  } = useParams();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n  const checkoutOffering = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (!event.loading) {\n      changeLoadingStatusOffering({\n        id: event.id,\n        status: true\n      });\n\n      if (!event.inCart) {\n        const params = {\n          org_slug_name: event.organization,\n          data: {\n            offering_id: event.id,\n            responsible_id: specId ? specId : orgSpecList[0].id\n          }\n        };\n        order.postOrgOrderCart(params).then(res => {\n          if (res) {\n            saveURLMount(pathname);\n            changeOrgOfferingStatus({\n              offering_id: params.data.offering_id,\n              status: true,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      } else {\n        order.deleteOrderCart({\n          offering_id: event.id\n        }).then(res => {\n          if (res) {\n            changeOrgOfferingStatus({\n              offering_id: event.id,\n              status: false,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      }\n    }\n  }, [specId, pathname]);\n  const create = useMutation(order.postOrgOrderCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const {\n        pages\n      } = queryClient.getQueryData(['/org/offerings', organization, query]);\n      console.log(Object.values(pages).filter(item => Object.keys(item.result)));\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization], pages);\n    },\n    onError: (err, itemId, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization]).then();\n    }\n  });\n  const remove = useMutation(order.deleteOrderCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query]);\n      console.log(previousTodo);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo);\n    },\n    onError: (err, newData, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization, query]).then(res => {\n        if (res) {\n          getOrgOrderCartsMount({\n            org_slug_name: organization,\n            params: {\n              limit: 1,\n              offset: 0\n            },\n            clear: true\n          });\n        }\n      });\n    }\n  });\n  const onCreatingCartItem = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (event.inCart) {\n      remove.mutate({\n        offering_id: event.id\n      });\n    } else {\n      const params = {\n        org_slug_name: event.organization,\n        data: {\n          offering_id: event.id,\n          responsible_id: specId ? specId : orgSpecList[0].id\n        }\n      };\n      create.mutate(params);\n    }\n  }, [create, specId, remove]);\n  const getIsLoading = useCallback(id => {\n    var _create$variables, _create$variables$dat, _remove$variables;\n\n    if (create.isLoading && (create === null || create === void 0 ? void 0 : (_create$variables = create.variables) === null || _create$variables === void 0 ? void 0 : (_create$variables$dat = _create$variables.data) === null || _create$variables$dat === void 0 ? void 0 : _create$variables$dat.offering_id) === id) {\n      return true;\n    } else if (remove.isLoading && (remove === null || remove === void 0 ? void 0 : (_remove$variables = remove.variables) === null || _remove$variables === void 0 ? void 0 : _remove$variables.offering_id) === id) {\n      return true;\n    }\n\n    return false;\n  }, [create, remove]);\n  return {\n    currency,\n    checkoutOffering,\n    create,\n    remove,\n    getIsLoading,\n    onCreatingCartItem\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useListQuery","useUrlParams","useStore","order","useLocation","useParams","$appModel","saveURLMount","$accountModel","getOrgOrderCartsMount","changeLoadingStatusOffering","changeOrgOfferingStatus","useMutation","queryClient","useOrgOrder","query","pathname","organization","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","checkoutOffering","event","orgSpecList","responsible","loading","id","status","inCart","params","org_slug_name","data","offering_id","responsible_id","postOrgOrderCart","then","res","loadingStatus","limit","offset","clear","catch","e","console","log","response","deleteOrderCart","create","onMutate","itemInfo","cancelQueries","pages","getQueryData","Object","values","filter","item","keys","result","setQueryData","onError","err","itemId","rollback","onSettled","invalidateQueries","remove","previousTodo","newData","onCreatingCartItem","mutate","getIsLoading","isLoading","variables"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport {useListQuery, useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useLocation, useParams} from 'react-router-dom'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {changeLoadingStatusOffering, changeOrgOfferingStatus} from '../../Models/offerings-model'\nimport {useMutation} from 'react-query'\nimport {queryClient} from '../../App'\n\nexport function useOrgOrder() {\n    const {query} = useListQuery()\n    const {pathname} = useLocation()\n    const {organization} = useParams()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    const checkoutOffering = useCallback((event) => {\n        const orgSpecList = event.responsible\n        \n        if (!event.loading) {\n            changeLoadingStatusOffering({id: event.id, status: true})\n            if (!event.inCart) {\n                const params = {\n                    org_slug_name: event.organization,\n                    data: {\n                        offering_id: event.id,\n                        responsible_id: specId ? specId : orgSpecList[0].id\n                    }\n                }\n                order.postOrgOrderCart(params)\n                    .then((res) => {\n                        if (res) {\n                            saveURLMount(pathname)\n                            changeOrgOfferingStatus({\n                                offering_id: params.data.offering_id,\n                                status: true,\n                                loadingStatus: false\n                            })\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            } else {\n                order.deleteOrderCart({offering_id: event.id})\n                    .then((res) => {\n                        if (res) {\n                            changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            }\n        }\n        \n    }, [specId, pathname])\n    \n    const create = useMutation(order.postOrgOrderCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const {pages} = queryClient.getQueryData(['/org/offerings', organization, query])\n            \n            console.log(Object.values(pages).filter(item => Object.keys(item.result)))\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization], pages)\n        },\n        onError: (err, itemId, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization])\n                .then()\n        }\n    })\n    \n    const remove = useMutation(order.deleteOrderCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query])\n            console.log(previousTodo)\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo)\n        },\n        onError: (err, newData, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization, query])\n                .then(res => {\n                    if (res) {\n                        getOrgOrderCartsMount({\n                            org_slug_name: organization,\n                            params: {limit: 1, offset: 0},\n                            clear: true\n                        })\n                    }\n                })\n        }\n    })\n    \n    const onCreatingCartItem = useCallback((event) => {\n        const orgSpecList = event.responsible\n        if (event.inCart) {\n            remove.mutate({offering_id: event.id})\n        } else {\n            const params = {\n                org_slug_name: event.organization,\n                data: {\n                    offering_id: event.id,\n                    responsible_id: specId ? specId : orgSpecList[0].id\n                }\n            }\n            create.mutate(params)\n        }\n    }, [create, specId, remove])\n    \n    const getIsLoading = useCallback((id) => {\n        if (create.isLoading && create?.variables?.data?.offering_id === id) {\n            return true\n        } else if (remove.isLoading && remove?.variables?.offering_id === id) {\n            return true\n        }\n        \n        return false\n    }, [create, remove])\n    \n    return {\n        currency,\n        checkoutOffering,\n        create,\n        remove,\n        getIsLoading,\n        onCreatingCartItem\n    }\n}"]},"metadata":{},"sourceType":"module"}