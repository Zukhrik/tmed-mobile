{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { URL_KEYS, URL_VALUES } from '../../Constants';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { debounce } from '../../utils/debounce-utils';\nimport { $chatModel, chatAllGroupMount, chatAllUserMount } from '../../Models/chat-model';\nimport { useStore } from 'effector-react';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useChatContactSearch() {\n  const {\n    urlData\n  } = useUrlParams();\n  const search = urlData[URL_KEYS.SEARCH];\n  const tab = urlData[URL_KEYS.TAB];\n  const {\n    push,\n    location: {\n      pathname\n    }\n  } = useHistory();\n  const [searchText, setSearchText] = useState(null);\n  const [mounted, setMounted] = useState(false);\n  const {\n    $searchContact: {\n      result\n    }\n  } = useStore($chatModel);\n  const getList = useCallback((params, validate = false) => {\n    if (tab) {\n      if (validate) {\n        if (tab === URL_VALUES.PEOPLE) {\n          chatAllUserMount(params);\n        } // if(tab === URL_VALUES.ORGANIZATION) {\n        //     chatAllOrgMount(params)\n        // }\n\n\n        if (tab === URL_VALUES.GROUP) {\n          chatAllGroupMount(params);\n        }\n      } else {\n        chatAllUserMount(params);\n        chatAllGroupMount(params);\n      }\n    }\n  }, [tab]);\n  const getNextOffset = useCallback(() => {\n    let nextOffset;\n\n    if (tab === URL_VALUES.PEOPLE) {\n      nextOffset = result[URL_VALUES.PEOPLE] && result[URL_VALUES.PEOPLE].nextOffset;\n    } // if(tab === URL_VALUES.ORGANIZATION) {\n    //     chatAllOrgMount(params)\n    // }\n\n\n    if (tab === URL_VALUES.GROUP) {\n      nextOffset = result[URL_VALUES.GROUP] && result[URL_VALUES.GROUP].nextOffset;\n    }\n\n    return nextOffset;\n  }, [result, tab]);\n  const onChange = useCallback(value => {\n    if (value.length > 2) {\n      const query = [];\n      const data = {\n        clear: true,\n        params: { ...initialParams,\n          search: value\n        }\n      };\n\n      if (tab) {\n        query.push(`${URL_KEYS.TAB}=${tab}`);\n      } else {\n        query.push(`${URL_KEYS.TAB}=${URL_VALUES.PEOPLE}`);\n      }\n\n      query.push(`${URL_KEYS.SEARCH}=${value}`);\n      push({\n        pathname,\n        search: query.join('&')\n      });\n      debounce(getList(data), 300);\n    } else {\n      push(pathname);\n    }\n\n    setSearchText(value);\n  }, [push, pathname, tab, getList]);\n  const loadMore = useCallback(() => {\n    const nextOffset = getNextOffset();\n\n    if (nextOffset) {\n      const data = {\n        params: { ...initialParams,\n          search,\n          offset: nextOffset\n        }\n      };\n      getList(data, true);\n    }\n  }, [getNextOffset, search, getList]);\n  useEffect(() => {\n    let timeout = null;\n\n    if (!mounted && search && search.length > 2) {\n      timeout = setTimeout(() => {\n        const data = {\n          clear: true,\n          params: { ...initialParams,\n            search\n          }\n        };\n        getList(data);\n        setMounted(true);\n      }, 300);\n    }\n\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [search, mounted, getList]);\n  useEffect(() => {\n    if (!searchText) {\n      if (search) {\n        setSearchText(search);\n      } else {\n        setSearchText(null);\n      }\n    }\n  }, [search, searchText]);\n  return {\n    searchText,\n    onChange,\n    loadMore\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/chat/use-chat-contact-search.js"],"names":["useUrlParams","URL_KEYS","URL_VALUES","useCallback","useEffect","useState","useHistory","debounce","$chatModel","chatAllGroupMount","chatAllUserMount","useStore","initialParams","limit","offset","useChatContactSearch","urlData","search","SEARCH","tab","TAB","push","location","pathname","searchText","setSearchText","mounted","setMounted","$searchContact","result","getList","params","validate","PEOPLE","GROUP","getNextOffset","nextOffset","onChange","value","length","query","data","clear","join","loadMore","timeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {URL_KEYS, URL_VALUES} from '../../Constants'\r\nimport {useCallback, useEffect, useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {debounce} from '../../utils/debounce-utils'\r\nimport {$chatModel, chatAllGroupMount, chatAllUserMount} from '../../Models/chat-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useChatContactSearch() {\r\n    const {urlData} = useUrlParams()\r\n    const search = urlData[URL_KEYS.SEARCH]\r\n    const tab = urlData[URL_KEYS.TAB]\r\n    const {push, location: {pathname}} = useHistory()\r\n    const [searchText, setSearchText] = useState(null)\r\n    const [mounted, setMounted] = useState(false)\r\n    const {$searchContact: {result}} = useStore($chatModel)\r\n\r\n    const getList = useCallback((params, validate = false) => {\r\n        if (tab) {\r\n            if(validate) {\r\n                if (tab === URL_VALUES.PEOPLE) {\r\n                    chatAllUserMount(params)\r\n                }\r\n\r\n                // if(tab === URL_VALUES.ORGANIZATION) {\r\n                //     chatAllOrgMount(params)\r\n                // }\r\n\r\n                if (tab === URL_VALUES.GROUP) {\r\n                    chatAllGroupMount(params)\r\n                }\r\n            }else {\r\n                chatAllUserMount(params)\r\n                chatAllGroupMount(params)\r\n            }\r\n        }\r\n    }, [tab])\r\n\r\n    const getNextOffset = useCallback(() => {\r\n        let nextOffset\r\n        if (tab === URL_VALUES.PEOPLE) {\r\n            nextOffset = result[URL_VALUES.PEOPLE] && result[URL_VALUES.PEOPLE].nextOffset\r\n        }\r\n\r\n        // if(tab === URL_VALUES.ORGANIZATION) {\r\n        //     chatAllOrgMount(params)\r\n        // }\r\n\r\n        if (tab === URL_VALUES.GROUP) {\r\n            nextOffset = result[URL_VALUES.GROUP] && result[URL_VALUES.GROUP].nextOffset\r\n        }\r\n\r\n        return nextOffset\r\n    }, [result, tab])\r\n\r\n    const onChange = useCallback((value) => {\r\n        if (value.length > 2) {\r\n            const query = []\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams,\r\n                    search: value\r\n                }\r\n            }\r\n\r\n            if (tab) {\r\n                query.push(`${URL_KEYS.TAB}=${tab}`)\r\n            } else {\r\n                query.push(`${URL_KEYS.TAB}=${URL_VALUES.PEOPLE}`)\r\n            }\r\n\r\n            query.push(`${URL_KEYS.SEARCH}=${value}`)\r\n\r\n            push({\r\n                pathname,\r\n                search: query.join('&')\r\n            })\r\n            debounce(getList(data), 300)\r\n        } else {\r\n            push(pathname)\r\n        }\r\n        setSearchText(value)\r\n    }, [push, pathname, tab, getList])\r\n\r\n    const loadMore = useCallback(() => {\r\n        const nextOffset = getNextOffset()\r\n\r\n        if(nextOffset) {\r\n            const data = {\r\n                params: {\r\n                    ...initialParams,\r\n                    search,\r\n                    offset: nextOffset\r\n                }\r\n            }\r\n\r\n            getList(data, true)\r\n        }\r\n    }, [getNextOffset, search, getList])\r\n\r\n    useEffect(() => {\r\n        let timeout = null\r\n\r\n        if (!mounted && search && search.length > 2) {\r\n            timeout = setTimeout(() => {\r\n                const data = {\r\n                    clear: true,\r\n                    params: {\r\n                        ...initialParams,\r\n                        search\r\n                    }\r\n                }\r\n\r\n                getList(data)\r\n                setMounted(true)\r\n            }, 300)\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [search, mounted, getList])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!searchText) {\r\n            if (search) {\r\n                setSearchText(search)\r\n            } else {\r\n                setSearchText(null)\r\n            }\r\n        }\r\n    }, [search, searchText])\r\n\r\n    return {searchText, onChange, loadMore}\r\n}"]},"metadata":{},"sourceType":"module"}