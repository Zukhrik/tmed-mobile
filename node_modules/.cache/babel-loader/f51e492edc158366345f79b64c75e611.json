{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchCommentReplyList, fetchCreateComment, fetchPost, fetchPostComments, fetchPostOfferings } from './effects';\nimport { storeListWithKey, storeWithKey } from '../../utils/store-utils';\nimport { commentLikeMount, createCommentMount, deleteLikeMount, deletePostCommentMount } from './events';\nimport { tapeLikeMount, tapeRemoveLikesMount } from '../tape-model';\nconst $postOfferings = createStore({\n  loading: false,\n  data: {},\n  result: {},\n  error: false\n}).on(fetchPostOfferings.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchPostOfferings.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {}\n})).on(fetchPostOfferings.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeListWithKey({\n    response: result.data,\n    key: params.post_id,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed\n  };\n});\nconst $getPost = createStore({\n  loading: false,\n  data: {},\n  result: {},\n  forceLoading: 0,\n  error: false\n}).on(fetchPost.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchPost.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchPost.done, (state, {\n  params,\n  result\n}) => {\n  const processed = storeWithKey({\n    response: result.data,\n    key: params.post_id,\n    state,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2,\n    result: result\n  };\n}).on(tapeRemoveLikesMount, (state, {\n  post_id\n}) => {\n  const data = { ...state.data\n  };\n\n  if (data[post_id]) {\n    data[post_id] = { ...data[post_id],\n      is_liked: false,\n      likes_count: data[post_id].likes_count > 0 && data[post_id].likes_count - 1\n    };\n  }\n\n  return { ...state,\n    data\n  };\n}).on(tapeLikeMount, (state, {\n  post_id\n}) => {\n  const data = { ...state.data\n  };\n\n  if (data[post_id]) {\n    data[post_id] = { ...data[post_id],\n      is_liked: true,\n      likes_count: data[post_id].likes_count + 1\n    };\n  }\n\n  return { ...state,\n    data\n  };\n});\nconst $getPostComments = createStore({\n  loading: false,\n  data: {},\n  forceLoading: 0,\n  result: {},\n  error: false\n}).on(fetchPostComments.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchPostComments.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  result: {},\n  data: [],\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchPostComments.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeListWithKey({\n    response: result.data,\n    key: params.post_id,\n    clear: params.clear,\n    state,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(createCommentMount, (state, {\n  temp_data,\n  post_id\n}) => {\n  const data = { ...state.data\n  };\n\n  if (data[post_id]) {\n    data[post_id] = [temp_data, ...data[post_id]];\n  }\n\n  return { ...state,\n    data\n  };\n}).on(fetchCreateComment.done, (state, {\n  result,\n  params\n}) => {\n  const data = { ...state.data\n  };\n  const {\n    post_id,\n    temp_data\n  } = params;\n  const idx = !!data[post_id] && data[post_id].findIndex(item => item.id === temp_data.id);\n\n  if (idx !== false && idx !== -1) {\n    const item = result.data;\n    data[post_id] = [...data[post_id].slice(0, idx), item, ...data[post_id].slice(idx + 1)];\n  }\n\n  return { ...state,\n    data\n  };\n}).on(commentLikeMount, (state, {\n  post_id,\n  comment_id\n}) => {\n  const data = { ...state.data\n  };\n  const idx = data[post_id].findIndex(item => item.id === comment_id);\n\n  if (idx !== -1 && idx !== false) {\n    const oldData = { ...data[post_id][idx]\n    };\n    data[post_id] = [...data[post_id].slice(0, idx), { ...oldData,\n      is_liked: true,\n      likes_count: oldData.likes_count + 1\n    }, ...data[post_id].slice(idx + 1)];\n  }\n\n  return { ...state,\n    data\n  };\n}).on(deleteLikeMount, (state, {\n  post_id,\n  comment_id\n}) => {\n  const data = { ...state.data\n  };\n  const idx = data[post_id].findIndex(item => item.id === comment_id);\n\n  if (idx !== false && idx !== -1) {\n    const oldData = { ...data[post_id][idx]\n    };\n    data[post_id] = [...data[post_id].slice(0, idx), { ...oldData,\n      is_liked: false,\n      likes_count: oldData.likes_count - 1\n    }, ...data[post_id].slice(idx + 1)];\n  }\n\n  return { ...state,\n    data\n  };\n}).on(deletePostCommentMount, (state, {\n  post_id,\n  comment_id\n}) => {\n  const data = { ...state.data\n  };\n  const idx = data[post_id].findIndex(item => item.id === comment_id);\n\n  if (data[post_id]) {\n    if (idx !== -1 && idx !== false) {\n      data[post_id] = [...data[post_id].splice(0, idx), ...data[post_id].splice(idx + 1)];\n    }\n  }\n\n  return { ...state,\n    data\n  };\n});\nconst $commentReplyList = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false\n}).on(fetchCommentReplyList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchCommentReplyList.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  result: {}\n})).on(fetchCommentReplyList.done, (state, {\n  result\n}) => {\n  return { ...state,\n    data: result.data.results,\n    result: result.data\n  };\n});\nexport const $postModel = combine({\n  $getPost,\n  $postOfferings,\n  $getPostComments,\n  $commentReplyList\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Models/post-model/stores.js"],"names":["combine","createStore","fetchCommentReplyList","fetchCreateComment","fetchPost","fetchPostComments","fetchPostOfferings","storeListWithKey","storeWithKey","commentLikeMount","createCommentMount","deleteLikeMount","deletePostCommentMount","tapeLikeMount","tapeRemoveLikesMount","$postOfferings","loading","data","result","error","on","pending","state","fail","done","params","processed","response","key","post_id","clear","$getPost","forceLoading","is_liked","likes_count","$getPostComments","temp_data","idx","findIndex","item","id","slice","comment_id","oldData","splice","$commentReplyList","results","$postModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\r\nimport {fetchCommentReplyList, fetchCreateComment, fetchPost, fetchPostComments, fetchPostOfferings} from './effects'\r\nimport {storeListWithKey, storeWithKey} from '../../utils/store-utils'\r\nimport {commentLikeMount, createCommentMount, deleteLikeMount, deletePostCommentMount} from './events'\r\nimport {tapeLikeMount, tapeRemoveLikesMount} from '../tape-model'\r\n\r\nconst $postOfferings = createStore({loading: false, data: {}, result: {}, error: false})\r\n    .on(fetchPostOfferings.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchPostOfferings.fail, (state, {error}) => ({\r\n        ...state, error, data: {}\r\n    }))\r\n    .on(fetchPostOfferings.done, (state, {result, params}) => {\r\n        const processed = storeListWithKey({\r\n            response: result.data, key: params.post_id, state, clear: params.clear, ...params.params\r\n        })\r\n        return {\r\n            ...state, ...processed\r\n        }\r\n    })\r\n\r\nconst $getPost = createStore({loading: false, data: {}, result: {}, forceLoading: 0, error: false})\r\n    .on(fetchPost.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchPost.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchPost.done, (state, {params, result}) => {\r\n        const processed = storeWithKey({\r\n            response: result.data, key: params.post_id, state, ...params.params\r\n        })\r\n        return {...state, ...processed, forceLoading: 2, result: result}\r\n    })\r\n    .on(tapeRemoveLikesMount, (state, {post_id}) => {\r\n        const data = {...state.data}\r\n        if (data[post_id]) {\r\n            data[post_id] = {\r\n                ...data[post_id],\r\n                is_liked: false, likes_count: data[post_id].likes_count > 0 && data[post_id].likes_count - 1\r\n            }\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(tapeLikeMount, (state, {post_id}) => {\r\n        const data = {...state.data}\r\n        \r\n        if (data[post_id]) {\r\n            data[post_id] = {...data[post_id], is_liked: true, likes_count: data[post_id].likes_count + 1}\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n\r\n\r\nconst $getPostComments = createStore({loading: false, data: {}, forceLoading: 0, result: {}, error: false})\r\n    .on(fetchPostComments.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchPostComments.fail, (state, {error}) => ({\r\n        ...state, error, result: {}, data: [], forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchPostComments.done, (state, {result, params}) => {\r\n        const processed = storeListWithKey({\r\n            response: result.data, key: params.post_id, clear: params.clear, state, ...params.params\r\n        })\r\n        \r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n    .on(createCommentMount, (state, {temp_data, post_id}) => {\r\n        const data = {...state.data}\r\n        \r\n        if (data[post_id]) {\r\n            data[post_id] = [temp_data, ...data[post_id]]\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(fetchCreateComment.done, (state, {result, params}) => {\r\n        const data = {...state.data}\r\n        const {post_id, temp_data} = params\r\n        const idx = !!data[post_id] && data[post_id].findIndex(item => item.id === temp_data.id)\r\n        \r\n        if (idx !== false && idx !== -1) {\r\n            const item = result.data\r\n            data[post_id] = [...data[post_id].slice(0, idx), item, ...data[post_id].slice(idx + 1)]\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(commentLikeMount, (state, {post_id, comment_id}) => {\r\n        const data = {...state.data}\r\n        const idx = data[post_id].findIndex(item => item.id === comment_id)\r\n        \r\n        if (idx !== -1 && idx !== false) {\r\n            const oldData = {...data[post_id][idx]}\r\n            data[post_id] = [...data[post_id].slice(0, idx), {\r\n                ...oldData, is_liked: true, likes_count: oldData.likes_count + 1\r\n            }, ...data[post_id].slice(idx + 1)]\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(deleteLikeMount, (state, {post_id, comment_id}) => {\r\n        const data = {...state.data}\r\n        const idx = data[post_id].findIndex(item => item.id === comment_id)\r\n        \r\n        if (idx !== false && idx !== -1) {\r\n            const oldData = {...data[post_id][idx]}\r\n            data[post_id] = [...data[post_id].slice(0, idx), {\r\n                ...oldData, is_liked: false, likes_count: oldData.likes_count - 1\r\n            }, ...data[post_id].slice(idx + 1)]\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(deletePostCommentMount, (state, {post_id, comment_id}) => {\r\n        const data = {...state.data}\r\n        const idx = data[post_id].findIndex(item => item.id === comment_id)\r\n        \r\n        if (data[post_id]) {\r\n            if (idx !== -1 && idx !== false) {\r\n                data[post_id] = [...data[post_id].splice(0, idx), ...data[post_id].splice(idx + 1)]\r\n            }\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n\r\nconst $commentReplyList = createStore({loading: false, data: [], result: {}, error: false})\r\n    .on(fetchCommentReplyList.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchCommentReplyList.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, result: {}\r\n    }))\r\n    .on(fetchCommentReplyList.done, (state, {result}) => {\r\n        \r\n        return {...state, data: result.data.results, result: result.data}\r\n    })\r\n\r\n\r\nexport const $postModel = combine({\r\n    $getPost,\r\n    $postOfferings,\r\n    $getPostComments,\r\n    $commentReplyList\r\n})"]},"metadata":{},"sourceType":"module"}