{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchAllChatList, fetchChatAllGroup, fetchChatAllOrg, fetchChatAllUser, fetchGroupChats, fetchSentMessage, fetchUpdateMessage, fetchUserDetailChat } from './effects';\nimport { addedMessageFromSocket, addedMessageToListFromSocket, chatForceLoading, chatSocketActionsMount, removeMessageEvent, temporaryMessageMount, updateChatFromSocket, updateCounterFromSocket, userMessageUploadProgress, userSentMessageMount, userUpdateMessageMount } from './events';\nimport { URL_VALUES } from '../../Constants';\nimport { storeListWithKey } from '../../utils/store-utils';\nimport moment from 'moment';\nconst $allChatList = createStore({\n  loading: false,\n  userChats: {},\n  groupChats: {},\n  userChatResult: {},\n  groupChatResult: {},\n  error: false,\n  userChatForceLoading: 0,\n  groupChatForCeLoading: 0\n}).on(fetchAllChatList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAllChatList.done, (state, {\n  error\n}) => ({ ...state,\n  data: [],\n  error,\n  result: {},\n  forceLoading: 0\n})).on(fetchAllChatList.done, (state, {\n  result,\n  params\n}) => {\n  const userChats = { ...state.userChats\n  };\n  const groupChats = { ...state.groupChats\n  };\n  let userChatResult = {};\n  let groupChatResult = {};\n  let userChatForceLoading = 0;\n  let groupChatForCeLoading = 0;\n  const data = result.data.results;\n\n  if (params.params.rtype === 'user') {\n    for (let i = 0; i < data.length; i++) {\n      userChats[data[i].receiver.username] = data[i];\n    }\n\n    userChatForceLoading = 2;\n    userChatResult = {\n      nextOffset: params.params.offset + 10,\n      ...result.data\n    };\n  }\n\n  return { ...state,\n    result: result.data,\n    userChatResult,\n    userChats,\n    groupChatResult,\n    groupChats,\n    userChatForceLoading,\n    groupChatForCeLoading\n  };\n}).on(addedMessageToListFromSocket, (state, {\n  type,\n  key,\n  payload\n}) => {\n  const userChats = { ...state.userChats\n  };\n\n  if (type === 'user') {\n    if (state.userChatForceLoading === 2) {\n      userChats[key] = userChats[key] ? { ...userChats[key],\n        ...payload\n      } : payload;\n    }\n  }\n\n  return { ...state,\n    userChats\n  };\n}).on(updateCounterFromSocket, (state, {\n  type,\n  key,\n  payload\n}) => {\n  const userChats = { ...state.userChats\n  };\n\n  if (type === 'user') {\n    if (state.userChatForceLoading === 2) {\n      userChats[key] = userChats[key] ? { ...userChats[key],\n        ...payload\n      } : payload;\n    }\n  }\n\n  return { ...state,\n    userChats\n  };\n}).on(fetchSentMessage.done, (state, {\n  result,\n  params\n}) => {\n  const {\n    receiver\n  } = params;\n  const userChats = { ...state.userChats\n  };\n\n  if (state.userChatForceLoading === 2 && userChats[receiver]) {\n    userChats[receiver] = { ...userChats[receiver],\n      last_message: { ...userChats[receiver].last_message,\n        text: result.data.text\n      }\n    };\n  }\n\n  return { ...state,\n    userChats\n  };\n}).on(chatForceLoading, (state, {\n  type\n}) => {\n  let userChatForceLoading = 0;\n  let groupChatForCeLoading = 0;\n\n  if (type === URL_VALUES.ALL_CHATS) {\n    userChatForceLoading = 1;\n  }\n\n  if (type === URL_VALUES.GROUP_CHATS) {\n    groupChatForCeLoading = 1;\n  }\n\n  return { ...state,\n    userChatForceLoading,\n    groupChatForCeLoading\n  };\n});\nconst $groupChatList = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchGroupChats.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchGroupChats.done, (state, {\n  error\n}) => ({ ...state,\n  data: [],\n  error,\n  result: {},\n  forceLoading: 0\n})).on(fetchGroupChats.done, (state, {\n  result,\n  params\n}) => {\n  const data = params.clear ? result.data.results : [...state.data, ...result.data.results];\n  return { ...state,\n    result: result.data,\n    data,\n    forceLoading: 2\n  };\n}).on(chatForceLoading, (state, {\n  type\n}) => ({ ...state,\n  forceLoading: type === URL_VALUES.GROUP_CHATS ? 1 : 0\n}));\nconst $userMessages = createStore({\n  loading: true,\n  result: {},\n  partner: {},\n  error: false,\n  typing: {},\n  messages: {}\n}).on(fetchUserDetailChat.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchUserDetailChat.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  result: {}\n})).on(fetchUserDetailChat.done, (state, {\n  result: response,\n  params\n}) => {\n  const {\n    params: {\n      offset\n    },\n    clear,\n    partner: key\n  } = params;\n  const result = { ...state.result\n  };\n  const partner = { ...state.sender\n  };\n  const typing = { ...state.typing\n  };\n  const nextOffset = offset + 20;\n  result[key] = { ...response.data,\n    nextOffset\n  };\n  partner[key] = response.data.partner;\n  typing[key] = false;\n  const messages = { ...state.messages\n  };\n  const tmp = response.data.results.reduce((acc, cur) => {\n    const date = moment(cur.date).format('YYYY-MM-DD');\n    acc[date] = acc[date] ? [{ ...cur\n    }, ...acc[date]] : [{ ...cur\n    }];\n    return acc;\n  }, {});\n  const tmp2 = {};\n\n  if (messages[key]) {\n    for (let date in messages[key]) {\n      if (messages[key].hasOwnProperty(date)) {\n        if (tmp[date]) {\n          const concated = [...messages[key][date], ...tmp[date]].reduce((acc, cur) => {\n            const i = acc.findIndex(m => m.id === cur.id);\n\n            if (!~i || !acc[i].checked) {\n              acc.push(cur);\n\n              if (~i) {\n                acc.splice(i, 1);\n              }\n            }\n\n            return acc;\n          }, []);\n          tmp2[date] = concated.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime());\n        }\n      }\n    }\n  }\n\n  messages[key] = clear ? tmp : { ...state.messages[key],\n    ...tmp,\n    ...tmp2\n  };\n  return { ...state,\n    result,\n    partner,\n    typing,\n    messages\n  };\n}).on(addedMessageFromSocket, (state, {\n  key,\n  payload\n}) => {\n  const result = { ...state.result\n  };\n  const messages = { ...state.messages\n  };\n  const date = moment(payload.date).format('YYYY-MM-DD');\n  messages[key] = messages[key] ? { ...messages[key]\n  } : {};\n  messages[key][date] = messages[key][date] ? [...messages[key][date], { ...payload\n  }] : [{ ...payload\n  }];\n  return { ...state,\n    result,\n    messages\n  };\n}).on(userSentMessageMount, (state, {\n  payload,\n  partner,\n  uuid\n}) => {\n  const messages = { ...state.messages\n  };\n  const date = moment(payload.date).format('YYYY-MM-DD');\n  messages[partner][date] = messages[partner][date] ? [...messages[partner][date], { ...payload,\n    id: uuid,\n    sent: true,\n    uploadStatus: 0,\n    dataSrc: true\n  }] : [{ ...payload,\n    sent: true\n  }];\n  return { ...state,\n    messages\n  };\n}).on(userMessageUploadProgress, (state, {\n  partner,\n  payload,\n  status\n}) => {\n  const messages = { ...state.messages\n  };\n  const date = moment(payload.date).format('YYYY-MM-DD');\n  const idx = messages[partner][date].findIndex(item => item.id === payload.id);\n  const oldItem = { ...messages[partner][date][idx],\n    uploadStatus: status\n  };\n  messages[partner][date] = [...messages[partner][date].slice(0, idx), { ...oldItem\n  }, ...messages[partner][date].slice(idx + 1)];\n  return { ...state,\n    messages\n  };\n}).on(userUpdateMessageMount, (state, {\n  payload,\n  partner\n}) => {\n  const messages = { ...state.messages\n  };\n  const date = moment(payload.date).format('YYYY-MM-DD');\n  const idx = messages[partner][date].findIndex(item => item.id === payload.id);\n  const oldItem = { ...messages[partner][date][idx],\n    ...payload,\n    sent: true\n  };\n  messages[partner][date] = [...messages[partner][date].slice(0, idx), { ...oldItem\n  }, ...messages[partner][date].slice(idx + 1)];\n  return { ...state,\n    messages\n  };\n}).on(removeMessageEvent, (state, {\n  id,\n  key,\n  date\n}) => {\n  const messages = { ...state.messages\n  };\n  messages[key][date] = messages[key][date].filter(item => item.id !== id);\n  return { ...state,\n    messages\n  };\n}).on(fetchSentMessage.done, (state, {\n  result: response,\n  params\n}) => {\n  const {\n    partner,\n    uuid\n  } = params;\n  const date = moment(response.data.date).format('YYYY-MM-DD');\n  const result = { ...state.result\n  };\n  result[partner] = { ...result,\n    count: result.count + 1\n  };\n  const messages = { ...state.messages\n  };\n  const data = messages[partner][date];\n  const idx = data.findIndex(item => item.id === uuid);\n  messages[partner][date] = [...data.slice(0, idx), { ...response.data,\n    file: messages[partner][date][idx].file,\n    dataSrc: response.data.file\n  }, ...data.slice(idx + 1)];\n  return { ...state,\n    result,\n    messages\n  };\n}).on(fetchUpdateMessage.done, (state, {\n  result: response,\n  params\n}) => {\n  const {\n    partner,\n    id\n  } = params;\n  const date = moment(response.data.date).format('YYYY-MM-DD');\n  const result = { ...state.result\n  };\n  result[partner] = { ...result,\n    count: result.count + 1\n  };\n  const messages = { ...state.messages\n  };\n  const data = messages[partner][date];\n  const idx = data.findIndex(item => item.id === id);\n  messages[partner][date] = [...data.slice(0, idx), { ...messages[partner][date][idx],\n    updated: response.data.updated,\n    sent: false\n  }, ...data.slice(idx + 1)];\n  return { ...state\n  };\n}).on(updateChatFromSocket, (state, {\n  id,\n  username,\n  action,\n  typing: typingStatus\n}) => {\n  const data = { ...state.data\n  };\n  const typing = { ...state.typing\n  };\n  const arr = data[username];\n\n  if (arr && arr.length > 0 && action === 'read') {\n    const idx = arr.findIndex(item => item.id === id);\n    const item = arr.find(item => item.id === id);\n    data[username] = [...data[username].slice(0, idx), { ...item,\n      is_read: true\n    }, ...data[username].slice(idx + 1)];\n  }\n\n  if (action === 'typing') {\n    typing[username] = typingStatus;\n  }\n\n  return { ...state,\n    typing,\n    data\n  };\n});\nconst $chatSocketActions = createStore({\n  chatActionSendMessage: () => null\n}).on(chatSocketActionsMount, (state, payload) => ({ ...state,\n  ...payload\n}));\n\nconst getStatus = status => {\n  return status && status === 2 ? status : 1;\n};\n\nconst $searchContact = createStore({\n  data: {},\n  result: {},\n  forceLoading: {},\n  error: {}\n}).on(fetchChatAllUser.pending, (state, loading) => {\n  return { ...state,\n    loading,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.PEOPLE]: getStatus(state.forceLoading[URL_VALUES.PEOPLE])\n    }\n  };\n}).on(fetchChatAllUser.fail, (state, {\n  error\n}) => ({ ...state,\n  error: { ...state.error,\n    [URL_VALUES.PEOPLE]: error\n  },\n  result: { ...state.result,\n    [URL_VALUES.PEOPLE]: false\n  }\n})).on(fetchChatAllUser.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeListWithKey({\n    state,\n    response: result.data,\n    key: URL_VALUES.PEOPLE,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.PEOPLE]: 2\n    },\n    error: { ...state.error,\n      [URL_VALUES.PEOPLE]: false\n    }\n  };\n}).on(fetchChatAllOrg.pending, (state, loading) => {\n  return { ...state,\n    loading,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.ORGANIZATION]: getStatus(state.forceLoading[URL_VALUES.ORGANIZATION])\n    }\n  };\n}).on(fetchChatAllOrg.fail, (state, {\n  error\n}) => ({ ...state,\n  error: { ...state.error,\n    [URL_VALUES.ORGANIZATION]: error\n  },\n  result: { ...state.result,\n    [URL_VALUES.ORGANIZATION]: false\n  }\n})).on(fetchChatAllOrg.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeListWithKey({\n    state,\n    response: result.data,\n    key: URL_VALUES.ORGANIZATION,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.ORGANIZATION]: 2\n    },\n    error: { ...state.error,\n      [URL_VALUES.ORGANIZATION]: false\n    }\n  };\n}).on(fetchChatAllGroup.pending, (state, loading) => {\n  return { ...state,\n    loading,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.GROUP]: getStatus(state.forceLoading[URL_VALUES.GROUP])\n    }\n  };\n}).on(fetchChatAllGroup.fail, (state, {\n  error\n}) => ({ ...state,\n  error: { ...state.error,\n    [URL_VALUES.GROUP]: error\n  },\n  result: { ...state.result,\n    [URL_VALUES.GROUP]: false\n  }\n})).on(fetchChatAllGroup.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeListWithKey({\n    state,\n    response: result.data,\n    key: URL_VALUES.GROUP,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: { ...state.forceLoading,\n      [URL_VALUES.GROUP]: 2\n    },\n    error: { ...state.error,\n      [URL_VALUES.GROUP]: false\n    }\n  };\n});\nconst $temporaryMessage = createStore(null).on(temporaryMessageMount, (state, payload) => {\n  return payload;\n}); // $userMessages.watch(console.log)\n\nexport const $chatModel = combine({\n  $allChatList,\n  $temporaryMessage,\n  $userMessages,\n  $groupChatList,\n  $searchContact,\n  $chatSocketActions\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Models/chat-model/stores.js"],"names":["combine","createStore","fetchAllChatList","fetchChatAllGroup","fetchChatAllOrg","fetchChatAllUser","fetchGroupChats","fetchSentMessage","fetchUpdateMessage","fetchUserDetailChat","addedMessageFromSocket","addedMessageToListFromSocket","chatForceLoading","chatSocketActionsMount","removeMessageEvent","temporaryMessageMount","updateChatFromSocket","updateCounterFromSocket","userMessageUploadProgress","userSentMessageMount","userUpdateMessageMount","URL_VALUES","storeListWithKey","moment","$allChatList","loading","userChats","groupChats","userChatResult","groupChatResult","error","userChatForceLoading","groupChatForCeLoading","on","pending","state","done","data","result","forceLoading","params","results","rtype","i","length","receiver","username","nextOffset","offset","type","key","payload","last_message","text","ALL_CHATS","GROUP_CHATS","$groupChatList","clear","$userMessages","partner","typing","messages","fail","response","sender","tmp","reduce","acc","cur","date","format","tmp2","hasOwnProperty","concated","findIndex","m","id","checked","push","splice","sort","a","b","Date","getTime","uuid","sent","uploadStatus","dataSrc","status","idx","item","oldItem","slice","filter","count","file","updated","action","typingStatus","arr","find","is_read","$chatSocketActions","chatActionSendMessage","getStatus","$searchContact","PEOPLE","processed","ORGANIZATION","GROUP","$temporaryMessage","$chatModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\nimport {\n    fetchAllChatList,\n    fetchChatAllGroup,\n    fetchChatAllOrg,\n    fetchChatAllUser,\n    fetchGroupChats,\n    fetchSentMessage,\n    fetchUpdateMessage,\n    fetchUserDetailChat\n} from './effects'\nimport {\n    addedMessageFromSocket,\n    addedMessageToListFromSocket,\n    chatForceLoading,\n    chatSocketActionsMount,\n    removeMessageEvent,\n    temporaryMessageMount,\n    updateChatFromSocket,\n    updateCounterFromSocket,\n    userMessageUploadProgress,\n    userSentMessageMount,\n    userUpdateMessageMount\n} from './events'\nimport {URL_VALUES} from '../../Constants'\nimport {storeListWithKey} from '../../utils/store-utils'\nimport moment from 'moment'\n\nconst $allChatList = createStore({\n    loading: false,\n    userChats: {},\n    groupChats: {},\n    userChatResult: {},\n    groupChatResult: {},\n    error: false,\n    userChatForceLoading: 0,\n    groupChatForCeLoading: 0\n})\n    .on(fetchAllChatList.pending, (state, loading) => ({...state, loading}))\n    .on(fetchAllChatList.done, (state, {error}) => ({\n        ...state, data: [], error, result: {}, forceLoading: 0\n    }))\n    .on(fetchAllChatList.done, (state, {result, params}) => {\n        const userChats = {...state.userChats}\n        const groupChats = {...state.groupChats}\n        let userChatResult = {}\n        let groupChatResult = {}\n        let userChatForceLoading = 0\n        let groupChatForCeLoading = 0\n\n        const data = result.data.results\n        if (params.params.rtype === 'user') {\n            for (let i = 0; i < data.length; i++) {\n                userChats[data[i].receiver.username] = data[i]\n            }\n            userChatForceLoading = 2\n            userChatResult = {\n                nextOffset: params.params.offset + 10,\n                ...result.data\n            }\n        }\n\n        return {\n            ...state,\n            result: result.data,\n            userChatResult,\n            userChats,\n            groupChatResult,\n            groupChats,\n            userChatForceLoading,\n            groupChatForCeLoading\n        }\n    })\n    .on(addedMessageToListFromSocket, (state, {type, key, payload}) => {\n        const userChats = {...state.userChats}\n\n        if (type === 'user') {\n            if (state.userChatForceLoading === 2) {\n                userChats[key] = userChats[key] ? {...userChats[key], ...payload} : payload\n            }\n        }\n\n        return {\n            ...state,\n            userChats\n        }\n    })\n    .on(updateCounterFromSocket, (state, {type, key, payload}) => {\n        const userChats = {...state.userChats}\n\n        if (type === 'user') {\n            if (state.userChatForceLoading === 2) {\n                userChats[key] = userChats[key] ? {...userChats[key], ...payload} : payload\n            }\n        }\n\n        return {\n            ...state,\n            userChats\n        }\n    })\n    .on(fetchSentMessage.done, (state, {result, params}) => {\n        const {receiver} = params\n        const userChats = {...state.userChats}\n\n        if (state.userChatForceLoading === 2 && userChats[receiver]) {\n            userChats[receiver] = {\n                ...userChats[receiver],\n                last_message: {...userChats[receiver].last_message, text: result.data.text}\n            }\n        }\n\n        return {\n            ...state,\n            userChats\n        }\n    })\n    .on(chatForceLoading, (state, {type}) => {\n        let userChatForceLoading = 0\n        let groupChatForCeLoading = 0\n\n        if (type === URL_VALUES.ALL_CHATS) {\n            userChatForceLoading = 1\n        }\n\n        if (type === URL_VALUES.GROUP_CHATS) {\n            groupChatForCeLoading = 1\n        }\n\n        return {\n            ...state,\n            userChatForceLoading,\n            groupChatForCeLoading\n        }\n    })\n\nconst $groupChatList = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\n    .on(fetchGroupChats.pending, (state, loading) => ({...state, loading}))\n    .on(fetchGroupChats.done, (state, {error}) => ({\n        ...state, data: [], error, result: {}, forceLoading: 0\n    }))\n    .on(fetchGroupChats.done, (state, {result, params}) => {\n        const data = params.clear ? result.data.results : [...state.data, ...result.data.results]\n        return {\n            ...state, result: result.data, data, forceLoading: 2\n        }\n    })\n    .on(chatForceLoading, (state, {type}) => ({\n        ...state, forceLoading: type === URL_VALUES.GROUP_CHATS ? 1 : 0\n    }))\n\nconst $userMessages = createStore({\n    loading: true,\n    result: {},\n    partner: {},\n    error: false,\n    typing: {},\n    messages: {}\n})\n    .on(fetchUserDetailChat.pending, (state, loading) => ({...state, loading}))\n    .on(fetchUserDetailChat.fail, (state, {error}) => ({\n        ...state, error, data: {}, result: {}\n    }))\n    .on(fetchUserDetailChat.done, (state, {result: response, params}) => {\n        const {params: {offset}, clear, partner: key} = params\n        const result = {...state.result}\n        const partner = {...state.sender}\n        const typing = {...state.typing}\n        const nextOffset = offset + 20\n        result[key] = {...response.data, nextOffset}\n        partner[key] = response.data.partner\n        typing[key] = false\n        const messages = {...state.messages}\n\n        const tmp = response.data.results.reduce((acc, cur) => {\n            const date = moment(cur.date).format('YYYY-MM-DD')\n            acc[date] = acc[date] ? [{...cur}, ...acc[date]] : [{...cur}]\n            return acc\n        }, {})\n\n        const tmp2 = {}\n\n        if (messages[key]) {\n            for (let date in messages[key]) {\n                if (messages[key].hasOwnProperty(date)) {\n                    if (tmp[date]) {\n                        const concated = [...messages[key][date], ...tmp[date]].reduce((acc, cur) => {\n                            const i = acc.findIndex(m => m.id === cur.id)\n                            if (!~i || !acc[i].checked) {\n                                acc.push(cur)\n                                if (~i) {\n                                    acc.splice(i, 1)\n                                }\n                            }\n                            return acc\n                        }, [])\n                        tmp2[date] = concated.sort((a, b) => new Date(a.date).getTime() - new Date(b.date).getTime())\n                    }\n                }\n            }\n        }\n\n        messages[key] = clear\n            ? tmp\n            : {...state.messages[key], ...tmp, ...tmp2}\n\n        return {\n            ...state,\n            result,\n            partner,\n            typing,\n            messages\n        }\n    })\n    .on(addedMessageFromSocket, (state, {key, payload}) => {\n        const result = {...state.result}\n        const messages = {...state.messages}\n        const date = moment(payload.date).format('YYYY-MM-DD')\n\n        messages[key] = messages[key] ? {...messages[key]} : {}\n        messages[key][date] = messages[key][date] ? [...messages[key][date], {...payload}] : [{...payload}]\n\n        return {\n            ...state,\n            result,\n            messages\n        }\n    })\n    .on(userSentMessageMount, (state, {payload, partner, uuid}) => {\n        const messages = {...state.messages}\n        const date = moment(payload.date).format('YYYY-MM-DD')\n        messages[partner][date] = messages[partner][date]\n            ? [...messages[partner][date], {...payload, id: uuid, sent: true, uploadStatus: 0, dataSrc: true}]\n            : [{...payload, sent: true}]\n\n        return {\n            ...state,\n            messages\n        }\n    })\n    .on(userMessageUploadProgress, (state, {partner, payload, status}) => {\n        const messages = {...state.messages}\n        const date = moment(payload.date).format('YYYY-MM-DD')\n        const idx = messages[partner][date].findIndex(item => item.id === payload.id)\n        const oldItem = {...messages[partner][date][idx], uploadStatus: status}\n        messages[partner][date] = [\n            ...messages[partner][date].slice(0, idx),\n            {...oldItem},\n            ...messages[partner][date].slice(idx + 1)\n        ]\n        return {\n            ...state,\n            messages,\n        }\n    })\n    .on(userUpdateMessageMount, (state, {payload, partner}) => {\n        const messages = {...state.messages}\n        const date = moment(payload.date).format('YYYY-MM-DD')\n        const idx = messages[partner][date].findIndex(item => item.id === payload.id)\n        const oldItem = {...messages[partner][date][idx], ...payload, sent: true}\n        messages[partner][date] = [\n            ...messages[partner][date].slice(0, idx),\n            {...oldItem},\n            ...messages[partner][date].slice(idx + 1)\n        ]\n\n        return {\n            ...state,\n            messages\n        }\n    })\n    .on(removeMessageEvent, (state, {id, key, date}) => {\n        const messages = {...state.messages}\n        messages[key][date] = messages[key][date].filter(item => item.id !== id)\n        return {\n            ...state,\n            messages\n        }\n    })\n    .on(fetchSentMessage.done, (state, {result: response, params}) => {\n        const {partner, uuid} = params\n        const date = moment(response.data.date).format('YYYY-MM-DD')\n        const result = {...state.result}\n        result[partner] = {...result, count: result.count + 1}\n        const messages = {...state.messages}\n        const data = messages[partner][date]\n        const idx = data.findIndex(item => item.id === uuid)\n        messages[partner][date] = [\n            ...data.slice(0, idx),\n            {...response.data, file: messages[partner][date][idx].file, dataSrc: response.data.file},\n            ...data.slice(idx + 1)\n        ]\n        return {\n            ...state,\n            result,\n            messages\n        }\n    })\n    .on(fetchUpdateMessage.done, (state, {result: response, params}) => {\n        const {partner, id} = params\n        const date = moment(response.data.date).format('YYYY-MM-DD')\n        const result = {...state.result}\n        result[partner] = {...result, count: result.count + 1}\n        const messages = {...state.messages}\n        const data = messages[partner][date]\n        const idx = data.findIndex(item => item.id === id)\n        messages[partner][date] = [\n            ...data.slice(0, idx),\n            {...messages[partner][date][idx], updated: response.data.updated, sent: false},\n            ...data.slice(idx + 1)\n        ]\n        return {\n            ...state\n        }\n    })\n    .on(updateChatFromSocket, (state, {id, username, action, typing: typingStatus}) => {\n        const data = {...state.data}\n        const typing = {...state.typing}\n        const arr = data[username]\n\n        if (arr && arr.length > 0 && action === 'read') {\n            const idx = arr.findIndex(item => item.id === id)\n            const item = arr.find(item => item.id === id)\n            data[username] = [...data[username].slice(0, idx), {\n                ...item,\n                is_read: true\n            }, ...data[username].slice(idx + 1)]\n        }\n\n        if (action === 'typing') {\n            typing[username] = typingStatus\n        }\n\n        return {\n            ...state,\n            typing,\n            data\n        }\n    })\n\n\nconst $chatSocketActions = createStore({chatActionSendMessage: () => null})\n    .on(chatSocketActionsMount, (state, payload) => ({\n        ...state, ...payload\n    }))\n\nconst getStatus = (status) => {\n    return status && status === 2 ? status : 1\n}\n\nconst $searchContact = createStore({\n    data: {},\n    result: {},\n    forceLoading: {},\n    error: {}\n})\n    .on(fetchChatAllUser.pending, (state, loading) => {\n        return {\n            ...state,\n            loading,\n            forceLoading: {...state.forceLoading, [URL_VALUES.PEOPLE]: getStatus(state.forceLoading[URL_VALUES.PEOPLE])}\n\n        }\n    })\n    .on(fetchChatAllUser.fail, (state, {error}) => ({\n        ...state,\n        error: {...state.error, [URL_VALUES.PEOPLE]: error},\n        result: {...state.result, [URL_VALUES.PEOPLE]: false},\n    }))\n    .on(fetchChatAllUser.done, (state, {result, params}) => {\n        const processed = storeListWithKey({\n            state,\n            response: result.data,\n            key: URL_VALUES.PEOPLE,\n            clear: params.clear,\n            ...params.params\n        })\n\n        return {\n            ...state,\n            ...processed,\n            forceLoading: {...state.forceLoading, [URL_VALUES.PEOPLE]: 2},\n            error: {...state.error, [URL_VALUES.PEOPLE]: false}\n        }\n    })\n    .on(fetchChatAllOrg.pending, (state, loading) => {\n        return {\n            ...state,\n            loading,\n            forceLoading: {\n                ...state.forceLoading,\n                [URL_VALUES.ORGANIZATION]: getStatus(state.forceLoading[URL_VALUES.ORGANIZATION])\n            }\n        }\n    })\n    .on(fetchChatAllOrg.fail, (state, {error}) => ({\n        ...state,\n        error: {...state.error, [URL_VALUES.ORGANIZATION]: error},\n        result: {...state.result, [URL_VALUES.ORGANIZATION]: false},\n    }))\n    .on(fetchChatAllOrg.done, (state, {result, params}) => {\n        const processed = storeListWithKey({\n            state,\n            response: result.data,\n            key: URL_VALUES.ORGANIZATION,\n            clear: params.clear,\n            ...params.params\n        })\n\n        return {\n            ...state,\n            ...processed,\n            forceLoading: {...state.forceLoading, [URL_VALUES.ORGANIZATION]: 2},\n            error: {...state.error, [URL_VALUES.ORGANIZATION]: false}\n        }\n    })\n    .on(fetchChatAllGroup.pending, (state, loading) => {\n        return {\n            ...state,\n            loading,\n            forceLoading: {\n                ...state.forceLoading,\n                [URL_VALUES.GROUP]: getStatus(state.forceLoading[URL_VALUES.GROUP])\n            }\n        }\n    })\n    .on(fetchChatAllGroup.fail, (state, {error}) => ({\n        ...state,\n        error: {...state.error, [URL_VALUES.GROUP]: error},\n        result: {...state.result, [URL_VALUES.GROUP]: false},\n    }))\n    .on(fetchChatAllGroup.done, (state, {result, params}) => {\n        const processed = storeListWithKey({\n            state,\n            response: result.data,\n            key: URL_VALUES.GROUP,\n            clear: params.clear,\n            ...params.params\n        })\n\n        return {\n            ...state,\n            ...processed,\n            forceLoading: {...state.forceLoading, [URL_VALUES.GROUP]: 2},\n            error: {...state.error, [URL_VALUES.GROUP]: false}\n        }\n    })\n\nconst $temporaryMessage = createStore(null)\n    .on(temporaryMessageMount, (state, payload) => {\n        return payload\n    })\n\n// $userMessages.watch(console.log)\n\nexport const $chatModel = combine({\n    $allChatList,\n    $temporaryMessage,\n    $userMessages,\n    $groupChatList,\n    $searchContact,\n    $chatSocketActions,\n})"]},"metadata":{},"sourceType":"module"}