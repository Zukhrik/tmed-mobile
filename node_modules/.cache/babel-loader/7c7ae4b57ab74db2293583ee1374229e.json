{"ast":null,"code":"import { useEffect } from 'react';\nimport { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport { URL_KEYS } from '../../Constants';\nimport order from '../../Service/order';\nimport { $appModel } from '../../Models/app';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { $orderModel, getOrderCartListMount, getOrgOrderCartsMount } from '../../Models/order-model';\nconst initialParams = {\n  limit: 10,\n  offset: 0\n};\nexport function useOrgOrderDelete() {\n  var _orderCartsData$find, _orderCartsData$find$;\n\n  const {\n    push\n  } = useHistory();\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    organization\n  } = useParams();\n  const specId = urlData[URL_KEYS.SPECIALIST_ID];\n  const {\n    $app: {\n      saveURL\n    }\n  } = useStore($appModel);\n  const {\n    $orgOrderCartList: {\n      data\n    }\n  } = useStore($orderModel);\n  const {\n    $orderCartList: {\n      data: orderCartsData\n    }\n  } = useStore($orderModel);\n  const specList = (_orderCartsData$find = orderCartsData.find(item => item.seller.slug_name === organization)) === null || _orderCartsData$find === void 0 ? void 0 : (_orderCartsData$find$ = _orderCartsData$find.seller) === null || _orderCartsData$find$ === void 0 ? void 0 : _orderCartsData$find$.specialists;\n  useEffect(() => {\n    if (data[organization] && data[organization].length <= 0) {\n      if (specList && specList.length > 0) {\n        push({\n          pathname: `/records/unregistered/${organization}`,\n          search: `${URL_KEYS.SPECIALIST_ID}=${specList[0].id}`\n        });\n      }\n    }\n  }, [data, organization, push, specList]);\n\n  const handleDelete = id => {\n    const pushToOrg = () => {\n      push(saveURL ? saveURL : `/${organization}/offerings`);\n    };\n\n    if (data && data[organization]) {\n      const params = {\n        offering_id: id,\n        organization,\n        action: () => {\n          const params = {\n            action: () => pushToOrg(),\n            isRedirect: true,\n            organization\n          };\n          getOrderCartListMount(params);\n        }\n      };\n      order.deleteOrderCart(params).then(res => {\n        if (res) {\n          const data = {\n            clear: true,\n            org_slug_name: organization,\n            params: { ...initialParams,\n              responsible: specId\n            },\n            action: () => {\n              const params = {\n                action: () => pushToOrg(),\n                isRedirect: true,\n                organization\n              };\n              getOrderCartListMount(params);\n            }\n          };\n          getOrgOrderCartsMount(data);\n        }\n      }); // deleteOrderCartMount(params)\n    }\n  };\n\n  return {\n    organization,\n    handleDelete\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order-delete.js"],"names":["useEffect","useUrlParams","useStore","URL_KEYS","order","$appModel","useHistory","useParams","$orderModel","getOrderCartListMount","getOrgOrderCartsMount","initialParams","limit","offset","useOrgOrderDelete","push","urlData","organization","specId","SPECIALIST_ID","$app","saveURL","$orgOrderCartList","data","$orderCartList","orderCartsData","specList","find","item","seller","slug_name","specialists","length","pathname","search","id","handleDelete","pushToOrg","params","offering_id","action","isRedirect","deleteOrderCart","then","res","clear","org_slug_name","responsible"],"mappings":"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","sourcesContent":["import {useEffect} from 'react'\nimport {useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport {URL_KEYS} from '../../Constants'\nimport order from '../../Service/order'\nimport {$appModel} from '../../Models/app'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {$orderModel, getOrderCartListMount, getOrgOrderCartsMount} from '../../Models/order-model'\n\nconst initialParams = {\n    limit: 10,\n    offset: 0\n}\n\nexport function useOrgOrderDelete() {\n    const {push} = useHistory()\n    const {urlData} = useUrlParams()\n    const {organization} = useParams()\n    const specId = urlData[URL_KEYS.SPECIALIST_ID]\n    const {$app: {saveURL}} = useStore($appModel)\n    const {$orgOrderCartList: {data}} = useStore($orderModel)\n    const {$orderCartList: {data: orderCartsData}} = useStore($orderModel)\n    const specList = orderCartsData.find(item => item.seller.slug_name === organization)?.seller?.specialists\n    \n    useEffect(() => {\n        if (data[organization] && data[organization].length <= 0) {\n            if (specList && specList.length > 0) {\n                push({\n                    pathname: `/records/unregistered/${organization}`,\n                    search: `${URL_KEYS.SPECIALIST_ID}=${specList[0].id}`\n                })\n            }\n        }\n        \n    }, [data, organization, push, specList])\n    \n    const handleDelete = (id) => {\n        const pushToOrg = () => {\n            push(saveURL ? saveURL : `/${organization}/offerings`)\n        }\n        \n        if (data && data[organization]) {\n            const params = {\n                offering_id: id,\n                organization,\n                action: () => {\n                    const params = {\n                        action: () => pushToOrg(),\n                        isRedirect: true,\n                        organization\n                    }\n                    getOrderCartListMount(params)\n                }\n            }\n            order.deleteOrderCart(params)\n                .then(res => {\n                    if (res) {\n                        const data = {\n                            clear: true,\n                            org_slug_name: organization,\n                            params: {\n                                ...initialParams,\n                                responsible: specId\n                            },\n                            action: () => {\n                                const params = {\n                                    action: () => pushToOrg(),\n                                    isRedirect: true,\n                                    organization\n                                }\n                                getOrderCartListMount(params)\n                            }\n                        }\n                        \n                        getOrgOrderCartsMount(data)\n                    }\n                })\n            \n            // deleteOrderCartMount(params)\n        }\n    }\n    \n    return {organization, handleDelete}\n}"]},"metadata":{},"sourceType":"module"}