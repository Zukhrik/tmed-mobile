{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport { useCallback, useEffect } from 'react';\nimport { URL_KEYS, URL_VALUES } from '../../Constants';\nimport { $orgModel, allOrgMount } from '../../Models/org-model';\nimport { $userModel, allUserMount } from '../../Models/user-model';\nimport { $streamModel, allStreamMountList } from '../../Models/stream-model';\nimport { $offeringsModel, offeringsListMount } from '../../Models/offerings-model';\nconst initialParams = {\n  limit: 10,\n  offset: 0\n};\nexport function useHomeList() {\n  const {\n    urlData\n  } = useUrlParams();\n  const searchType = urlData[URL_KEYS.SEARCH_TYPE];\n  const _category = urlData[URL_KEYS.CATEGORY];\n  const {\n    $appLang: lang\n  } = useStore($appModel);\n  const {\n    $allOrgList: {\n      result: allOrgResult\n    }\n  } = useStore($orgModel);\n  const {\n    $allUserList: {\n      result: allUserResult\n    }\n  } = useStore($userModel);\n  const {\n    $allStreamList: {\n      result: allStreamResult\n    }\n  } = useStore($streamModel);\n  const {\n    $offeringsList: {\n      result: offeringsResult\n    }\n  } = useStore($offeringsModel);\n  const getList = useCallback(params => {\n    if (!searchType) {\n      if (_category) {\n        params.params.category = _category;\n      }\n\n      allOrgMount(params);\n    }\n\n    if (searchType && searchType === URL_VALUES.OFFERINGS) {\n      if (_category) {\n        params.params.offer_cat = _category;\n      }\n\n      offeringsListMount(params);\n    }\n\n    if (searchType && searchType === URL_VALUES.PEOPLE) {\n      allUserMount(params);\n    }\n\n    if (searchType && searchType === URL_VALUES.STREAM) {\n      allStreamMountList(params);\n    }\n  }, [searchType, _category]);\n  const loadMore = useCallback(() => {\n    const params = { ...initialParams\n    };\n\n    if (searchType === URL_VALUES.PEOPLE) {\n      if (allUserResult.nextOffset) {\n        params['offset'] = allUserResult.nextOffset;\n      }\n    }\n\n    if (!searchType) {\n      if (allOrgResult.nextOffset) {\n        params['offset'] = allOrgResult.nextOffset;\n      }\n    }\n\n    if (searchType === URL_VALUES.STREAM) {\n      if (allStreamResult.nextOffset) {\n        params['offset'] = allStreamResult.nextOffset;\n      }\n    }\n\n    if (searchType === URL_VALUES.OFFERINGS) {\n      if (offeringsResult.nextOffset) {\n        params['offset'] = offeringsResult.nextOffset;\n      }\n    }\n\n    getList({\n      params\n    });\n  }, [getList, allUserResult, searchType, allStreamResult, allOrgResult, offeringsResult]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (lang) {\n        getList(data);\n      }\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getList, searchType, lang]);\n  return {\n    loadMore\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/home/use-home-list.js"],"names":["useUrlParams","useStore","$appModel","useCallback","useEffect","URL_KEYS","URL_VALUES","$orgModel","allOrgMount","$userModel","allUserMount","$streamModel","allStreamMountList","$offeringsModel","offeringsListMount","initialParams","limit","offset","useHomeList","urlData","searchType","SEARCH_TYPE","_category","CATEGORY","$appLang","lang","$allOrgList","result","allOrgResult","$allUserList","allUserResult","$allStreamList","allStreamResult","$offeringsList","offeringsResult","getList","params","category","OFFERINGS","offer_cat","PEOPLE","STREAM","loadMore","nextOffset","timeout","setTimeout","data","clear","clearTimeout"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,WAAR,EAAqBC,SAArB,QAAqC,OAArC;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,iBAAnC;AACA,SAAQC,SAAR,EAAmBC,WAAnB,QAAqC,wBAArC;AACA,SAAQC,UAAR,EAAoBC,YAApB,QAAuC,yBAAvC;AACA,SAAQC,YAAR,EAAsBC,kBAAtB,QAA+C,2BAA/C;AACA,SAAQC,eAAR,EAAyBC,kBAAzB,QAAkD,8BAAlD;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,OAAO,SAASC,WAAT,GAAuB;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAYnB,YAAY,EAA9B;AACA,QAAMoB,UAAU,GAAGD,OAAO,CAACd,QAAQ,CAACgB,WAAV,CAA1B;AACA,QAAMC,SAAS,GAAGH,OAAO,CAACd,QAAQ,CAACkB,QAAV,CAAzB;AACA,QAAM;AAACC,IAAAA,QAAQ,EAAEC;AAAX,MAAmBxB,QAAQ,CAACC,SAAD,CAAjC;AACA,QAAM;AAACwB,IAAAA,WAAW,EAAE;AAACC,MAAAA,MAAM,EAAEC;AAAT;AAAd,MAAwC3B,QAAQ,CAACM,SAAD,CAAtD;AACA,QAAM;AAACsB,IAAAA,YAAY,EAAE;AAACF,MAAAA,MAAM,EAAEG;AAAT;AAAf,MAA0C7B,QAAQ,CAACQ,UAAD,CAAxD;AACA,QAAM;AAACsB,IAAAA,cAAc,EAAE;AAACJ,MAAAA,MAAM,EAAEK;AAAT;AAAjB,MAA8C/B,QAAQ,CAACU,YAAD,CAA5D;AACA,QAAM;AAACsB,IAAAA,cAAc,EAAE;AAACN,MAAAA,MAAM,EAAEO;AAAT;AAAjB,MAA8CjC,QAAQ,CAACY,eAAD,CAA5D;AAGA,QAAMsB,OAAO,GAAGhC,WAAW,CAAEiC,MAAD,IAAY;AACpC,QAAI,CAAChB,UAAL,EAAiB;AACb,UAAIE,SAAJ,EAAe;AACXc,QAAAA,MAAM,CAACA,MAAP,CAAcC,QAAd,GAAyBf,SAAzB;AACH;;AACDd,MAAAA,WAAW,CAAC4B,MAAD,CAAX;AACH;;AAED,QAAIhB,UAAU,IAAIA,UAAU,KAAKd,UAAU,CAACgC,SAA5C,EAAuD;AACnD,UAAIhB,SAAJ,EAAe;AACXc,QAAAA,MAAM,CAACA,MAAP,CAAcG,SAAd,GAA0BjB,SAA1B;AACH;;AACDR,MAAAA,kBAAkB,CAACsB,MAAD,CAAlB;AACH;;AAED,QAAIhB,UAAU,IAAIA,UAAU,KAAKd,UAAU,CAACkC,MAA5C,EAAoD;AAChD9B,MAAAA,YAAY,CAAC0B,MAAD,CAAZ;AACH;;AAED,QAAIhB,UAAU,IAAIA,UAAU,KAAKd,UAAU,CAACmC,MAA5C,EAAoD;AAChD7B,MAAAA,kBAAkB,CAACwB,MAAD,CAAlB;AACH;AACJ,GAtB0B,EAsBxB,CAAChB,UAAD,EAAaE,SAAb,CAtBwB,CAA3B;AAwBA,QAAMoB,QAAQ,GAAGvC,WAAW,CAAC,MAAM;AAC/B,UAAMiC,MAAM,GAAG,EAAC,GAAGrB;AAAJ,KAAf;;AAEA,QAAIK,UAAU,KAAKd,UAAU,CAACkC,MAA9B,EAAsC;AAClC,UAAIV,aAAa,CAACa,UAAlB,EAA8B;AAC1BP,QAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBN,aAAa,CAACa,UAAjC;AACH;AACJ;;AAED,QAAI,CAACvB,UAAL,EAAiB;AACb,UAAIQ,YAAY,CAACe,UAAjB,EAA6B;AACzBP,QAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBR,YAAY,CAACe,UAAhC;AACH;AACJ;;AAED,QAAIvB,UAAU,KAAKd,UAAU,CAACmC,MAA9B,EAAsC;AAClC,UAAIT,eAAe,CAACW,UAApB,EAAgC;AAC5BP,QAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBJ,eAAe,CAACW,UAAnC;AACH;AACJ;;AAED,QAAIvB,UAAU,KAAKd,UAAU,CAACgC,SAA9B,EAAyC;AACrC,UAAIJ,eAAe,CAACS,UAApB,EAAgC;AAC5BP,QAAAA,MAAM,CAAC,QAAD,CAAN,GAAmBF,eAAe,CAACS,UAAnC;AACH;AACJ;;AAEDR,IAAAA,OAAO,CAAC;AAACC,MAAAA;AAAD,KAAD,CAAP;AACH,GA5B2B,EA4BzB,CAACD,OAAD,EAAUL,aAAV,EAAyBV,UAAzB,EAAqCY,eAArC,EAAsDJ,YAAtD,EAAoEM,eAApE,CA5ByB,CAA5B;AA+BA9B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIwC,OAAO,GAAG,IAAd;AAEAA,IAAAA,OAAO,GAAGC,UAAU,CAAC,MAAM;AACvB,YAAMC,IAAI,GAAG;AACTC,QAAAA,KAAK,EAAE,IADE;AAETX,QAAAA,MAAM,EAAE,EACJ,GAAGrB;AADC;AAFC,OAAb;;AAMA,UAAIU,IAAJ,EAAU;AACNU,QAAAA,OAAO,CAACW,IAAD,CAAP;AACH;AAEJ,KAXmB,EAWjB,GAXiB,CAApB;AAaA,WAAO,MAAM;AACTE,MAAAA,YAAY,CAACJ,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH,KAHD;AAIH,GApBQ,EAoBN,CAACT,OAAD,EAAUf,UAAV,EAAsBK,IAAtB,CApBM,CAAT;AAsBA,SAAO;AACHiB,IAAAA;AADG,GAAP;AAGH","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\nimport {useCallback, useEffect} from 'react'\r\nimport {URL_KEYS, URL_VALUES} from '../../Constants'\r\nimport {$orgModel, allOrgMount} from '../../Models/org-model'\r\nimport {$userModel, allUserMount} from '../../Models/user-model'\r\nimport {$streamModel, allStreamMountList} from '../../Models/stream-model'\r\nimport {$offeringsModel, offeringsListMount} from '../../Models/offerings-model'\r\n\r\nconst initialParams = {\r\n    limit: 10,\r\n    offset: 0\r\n}\r\n\r\nexport function useHomeList() {\r\n    const {urlData} = useUrlParams()\r\n    const searchType = urlData[URL_KEYS.SEARCH_TYPE]\r\n    const _category = urlData[URL_KEYS.CATEGORY]\r\n    const {$appLang: lang} = useStore($appModel)\r\n    const {$allOrgList: {result: allOrgResult}} = useStore($orgModel)\r\n    const {$allUserList: {result: allUserResult}} = useStore($userModel)\r\n    const {$allStreamList: {result: allStreamResult}} = useStore($streamModel)\r\n    const {$offeringsList: {result: offeringsResult}} = useStore($offeringsModel)\r\n    \r\n    \r\n    const getList = useCallback((params) => {\r\n        if (!searchType) {\r\n            if (_category) {\r\n                params.params.category = _category\r\n            }\r\n            allOrgMount(params)\r\n        }\r\n        \r\n        if (searchType && searchType === URL_VALUES.OFFERINGS) {\r\n            if (_category) {\r\n                params.params.offer_cat = _category\r\n            }\r\n            offeringsListMount(params)\r\n        }\r\n        \r\n        if (searchType && searchType === URL_VALUES.PEOPLE) {\r\n            allUserMount(params)\r\n        }\r\n        \r\n        if (searchType && searchType === URL_VALUES.STREAM) {\r\n            allStreamMountList(params)\r\n        }\r\n    }, [searchType, _category])\r\n    \r\n    const loadMore = useCallback(() => {\r\n        const params = {...initialParams}\r\n        \r\n        if (searchType === URL_VALUES.PEOPLE) {\r\n            if (allUserResult.nextOffset) {\r\n                params['offset'] = allUserResult.nextOffset\r\n            }\r\n        }\r\n        \r\n        if (!searchType) {\r\n            if (allOrgResult.nextOffset) {\r\n                params['offset'] = allOrgResult.nextOffset\r\n            }\r\n        }\r\n        \r\n        if (searchType === URL_VALUES.STREAM) {\r\n            if (allStreamResult.nextOffset) {\r\n                params['offset'] = allStreamResult.nextOffset\r\n            }\r\n        }\r\n        \r\n        if (searchType === URL_VALUES.OFFERINGS) {\r\n            if (offeringsResult.nextOffset) {\r\n                params['offset'] = offeringsResult.nextOffset\r\n            }\r\n        }\r\n        \r\n        getList({params})\r\n    }, [getList, allUserResult, searchType, allStreamResult, allOrgResult, offeringsResult])\r\n    \r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            if (lang) {\r\n                getList(data)\r\n            }\r\n            \r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [getList, searchType, lang])\r\n    \r\n    return {\r\n        loadMore\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}