{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useState}from'react';import{useStore}from'effector-react';import{$appModel,saveURLMount}from'../../Models/app';import{POST_ACTIONS}from'../../Constants';import{useHistory,useParams}from'react-router-dom';import{$accountModel}from'../../Models/account-model';import{tapeLikeMount,tapeRemoveLikesMount}from'../../Models/tape-model';import{useTranslation}from'react-i18next';export function usePostActions(data){var _useTranslation=useTranslation(),t=_useTranslation.t;var _useParams=useParams(),username=_useParams.username;var _useStore=useStore($appModel),token=_useStore.$app.token;var _useHistory=useHistory(),push=_useHistory.push,pathname=_useHistory.location.pathname;var _useStore2=useStore($accountModel),currentProfile=_useStore2.$profiles.currentProfile;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),openOverlay=_useState2[0],setOpenOverlay=_useState2[1];var addMethod=useCallback(function(type){if(currentProfile&&!!token){var author=data.author.slug_name;if(data.author.type==='user'){author=\"@\".concat(data.author.slug_name);}var params={post_id:data.id,author:author};if(type===POST_ACTIONS.LIKES_COUNT){tapeLikeMount(params);}}else{setOpenOverlay(true);}},[currentProfile,token,data]);var deleteMethod=useCallback(function(type){if(currentProfile&&!!token){var author=data.author.slug_name;if(data.author.type==='user'){author=\"@\".concat(data.author.slug_name);}var params={post_id:data.id,author:author};if(type===POST_ACTIONS.LIKES_COUNT){tapeRemoveLikesMount(params);}}},[currentProfile,token,data]);var postCommentMethod=useCallback(function(type){if(currentProfile&&!!token){var params={post_id:data.id};if(type===POST_ACTIONS.COMMENTS_COUNT){push(\"/tape/\".concat(params.post_id));}saveURLMount(pathname);}else{setOpenOverlay(true);}},[currentProfile,token,data,push,pathname]);var handleClick=useCallback(function(type){var _data$author;if(type===POST_ACTIONS.LIKES_COUNT){if(data.is_liked){deleteMethod(type);}else{addMethod(type);}}if(type===POST_ACTIONS.COMMENTS_COUNT){postCommentMethod(type);}if(type===POST_ACTIONS.REPOST_COUNT&&(data===null||data===void 0?void 0:(_data$author=data.author)===null||_data$author===void 0?void 0:_data$author.slug_name)!==(currentProfile===null||currentProfile===void 0?void 0:currentProfile.slug_name)&&!!token){push(\"/repost/\".concat(data.id))&&saveURLMount(pathname);}else{setOpenOverlay(true);}},[addMethod,data,deleteMethod,postCommentMethod,push,currentProfile,token,pathname]);var getStyle=function getStyle(item){currentProfile&&(currentProfile.slug_name=username&&item.title==='reply'&&{display:'none'});};var generatePostIndicators=function generatePostIndicators(item){switch(item.title){case'like':return\"\".concat(data.likes_count>0?data.likes_count:'',\" \").concat(t('likes'));case'comment':return\"\".concat(data.comments_count>0?data.comments_count:'',\" \").concat(t('comments'));case'share':return\"\".concat(data.repost_count>0?data.repost_count:'',\" \").concat(t('shares'));default:return'';}};return{handleClick:handleClick,getStyle:getStyle,generatePostIndicators:generatePostIndicators,setOpenOverlay:setOpenOverlay,openOverlay:openOverlay};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/post/use-post-actions.js"],"names":["useCallback","useState","useStore","$appModel","saveURLMount","POST_ACTIONS","useHistory","useParams","$accountModel","tapeLikeMount","tapeRemoveLikesMount","useTranslation","usePostActions","data","t","username","token","$app","push","pathname","location","currentProfile","$profiles","openOverlay","setOpenOverlay","addMethod","type","author","slug_name","params","post_id","id","LIKES_COUNT","deleteMethod","postCommentMethod","COMMENTS_COUNT","handleClick","is_liked","REPOST_COUNT","getStyle","item","title","display","generatePostIndicators","likes_count","comments_count","repost_count"],"mappings":"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","sourcesContent":["import {useCallback, useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {POST_ACTIONS} from '../../Constants'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {$accountModel} from '../../Models/account-model'\nimport {tapeLikeMount, tapeRemoveLikesMount} from '../../Models/tape-model'\nimport {useTranslation} from 'react-i18next'\n\n\nexport function usePostActions(data) {\n    const {t} = useTranslation()\n    const {username} = useParams()\n    const {$app: {token}} = useStore($appModel)\n    const {push, location: {pathname}} = useHistory()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const [openOverlay, setOpenOverlay] = useState(false)\n    \n    const addMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            let author = data.author.slug_name\n            if (data.author.type === 'user') {\n                author = `@${data.author.slug_name}`\n            }\n            const params = {\n                post_id: data.id,\n                author\n            }\n            if (type === POST_ACTIONS.LIKES_COUNT) {\n                tapeLikeMount(params)\n            }\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [currentProfile, token, data])\n    \n    const deleteMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            let author = data.author.slug_name\n            if (data.author.type === 'user') {\n                author = `@${data.author.slug_name}`\n            }\n            const params = {\n                post_id: data.id,\n                author\n            }\n            if (type === POST_ACTIONS.LIKES_COUNT) {\n                tapeRemoveLikesMount(params)\n            }\n        }\n    }, [currentProfile, token, data])\n    \n    const postCommentMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            const params = {\n                post_id: data.id\n            }\n            if (type === POST_ACTIONS.COMMENTS_COUNT) {\n                push(`/tape/${params.post_id}`)\n            }\n            saveURLMount(pathname)\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [currentProfile, token, data, push, pathname])\n    \n    const handleClick = useCallback((type) => {\n        if (type === POST_ACTIONS.LIKES_COUNT) {\n            if (data.is_liked) {\n                deleteMethod(type)\n            } else {\n                addMethod(type)\n            }\n        }\n        \n        if (type === POST_ACTIONS.COMMENTS_COUNT) {\n            postCommentMethod(type)\n        }\n        \n        if (type === POST_ACTIONS.REPOST_COUNT && data?.author?.slug_name !== currentProfile?.slug_name && !!token) {\n            push(`/repost/${data.id}`) && saveURLMount(pathname)\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [addMethod, data, deleteMethod, postCommentMethod, push, currentProfile, token, pathname])\n    \n    const getStyle = (item) => {\n        currentProfile && (\n            currentProfile.slug_name = username\n                && item.title === 'reply' && {display: 'none'}\n        )\n    }\n    \n    const generatePostIndicators = (item) => {\n        switch (item.title) {\n            case 'like':\n                return `${data.likes_count > 0 ? data.likes_count : ''} ${t('likes')}`\n            case 'comment':\n                return `${data.comments_count > 0 ? data.comments_count : ''} ${t('comments')}`\n            case 'share':\n                return `${data.repost_count > 0 ? data.repost_count : ''} ${t('shares')}`\n            default:\n                return ''\n        }\n    }\n    \n    return {handleClick, getStyle, generatePostIndicators, setOpenOverlay, openOverlay}\n}"]},"metadata":{},"sourceType":"module"}