{"ast":null,"code":"import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport { useStore } from 'effector-react';\nimport { useEffect, useState } from 'react';\nimport { $accountModel, accountAvatarsMount } from '../../Models/account-model';\nconst defaultValue = {\n  business_ava: undefined,\n  passport_series: '',\n  passport_number: '',\n  passport_scan: ''\n};\nexport function useVerificationLegalData() {\n  const validationSchema = Yup.object().shape();\n  const [mounted, setMounted] = useState(false);\n  const [initialValues, setInitialValues] = useState(defaultValue);\n  const {\n    $accountAvatars,\n    $accountPDataMount\n  } = useStore($accountModel);\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true\n  });\n\n  const getData = value => {\n    return value || '';\n  };\n\n  useEffect(() => {\n    const avatarsData = $accountAvatars.data;\n    const accountPDataMount = $accountPDataMount.data;\n\n    if (!!$accountPDataMount && !!avatarsData && !mounted) {\n      const business_ava = avatarsData.length > 0 && avatarsData.find(item => item.business_ava);\n      setInitialValues({ ...defaultValue,\n        business_ava: business_ava ? {\n          stringUrl: business_ava.image,\n          file: null\n        } : false,\n        passport_number: getData(accountPDataMount && accountPDataMount.passport_number),\n        passport_series: getData(accountPDataMount && accountPDataMount.passport_series)\n      });\n      setMounted(true);\n    }\n  }, [$accountAvatars, $accountPDataMount, mounted]);\n  useEffect(() => {\n    accountAvatarsMount();\n  }, []);\n  return {\n    formik\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/account/use-verification-legal-data.js"],"names":["Yup","useFormik","useStore","useEffect","useState","$accountModel","accountAvatarsMount","defaultValue","business_ava","undefined","passport_series","passport_number","passport_scan","useVerificationLegalData","validationSchema","object","shape","mounted","setMounted","initialValues","setInitialValues","$accountAvatars","$accountPDataMount","formik","enableReinitialize","getData","value","avatarsData","data","accountPDataMount","length","find","item","stringUrl","image","file"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AACA,SAAQC,SAAR,QAAwB,QAAxB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AACA,SAAQC,aAAR,EAAuBC,mBAAvB,QAAiD,4BAAjD;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,YAAY,EAAEC,SADG;AAEjBC,EAAAA,eAAe,EAAE,EAFA;AAGjBC,EAAAA,eAAe,EAAE,EAHA;AAIjBC,EAAAA,aAAa,EAAE;AAJE,CAArB;AAOA,OAAO,SAASC,wBAAT,GAAoC;AACvC,QAAMC,gBAAgB,GAAGd,GAAG,CAACe,MAAJ,GAAaC,KAAb,EAAzB;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoChB,QAAQ,CAACG,YAAD,CAAlD;AACA,QAAM;AAACc,IAAAA,eAAD;AAAkBC,IAAAA;AAAlB,MAAwCpB,QAAQ,CAACG,aAAD,CAAtD;AAEA,QAAMkB,MAAM,GAAGtB,SAAS,CAAC;AACrBkB,IAAAA,aADqB;AAErBL,IAAAA,gBAFqB;AAGrBU,IAAAA,kBAAkB,EAAE;AAHC,GAAD,CAAxB;;AAMA,QAAMC,OAAO,GAAIC,KAAD,IAAW;AACvB,WAAOA,KAAK,IAAI,EAAhB;AACH,GAFD;;AAIAvB,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMwB,WAAW,GAAGN,eAAe,CAACO,IAApC;AACA,UAAMC,iBAAiB,GAAGP,kBAAkB,CAACM,IAA7C;;AAEA,QAAI,CAAC,CAACN,kBAAF,IAAwB,CAAC,CAACK,WAA1B,IAAyC,CAACV,OAA9C,EAAuD;AACnD,YAAMT,YAAY,GAAGmB,WAAW,CAACG,MAAZ,GAAqB,CAArB,IAA0BH,WAAW,CAACI,IAAZ,CAAiBC,IAAI,IAAIA,IAAI,CAACxB,YAA9B,CAA/C;AAEAY,MAAAA,gBAAgB,CAAC,EACb,GAAGb,YADU;AAEbC,QAAAA,YAAY,EAAEA,YAAY,GAAG;AAACyB,UAAAA,SAAS,EAAEzB,YAAY,CAAC0B,KAAzB;AAAgCC,UAAAA,IAAI,EAAE;AAAtC,SAAH,GAAiD,KAF9D;AAGbxB,QAAAA,eAAe,EAAEc,OAAO,CAACI,iBAAiB,IAAIA,iBAAiB,CAAClB,eAAxC,CAHX;AAIbD,QAAAA,eAAe,EAAEe,OAAO,CAACI,iBAAiB,IAAIA,iBAAiB,CAACnB,eAAxC;AAJX,OAAD,CAAhB;AAMAQ,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GAfQ,EAeN,CAACG,eAAD,EAAkBC,kBAAlB,EAAsCL,OAAtC,CAfM,CAAT;AAiBAd,EAAAA,SAAS,CAAC,MAAM;AACZG,IAAAA,mBAAmB;AACtB,GAFQ,EAEN,EAFM,CAAT;AAIA,SAAO;AACHiB,IAAAA;AADG,GAAP;AAGH","sourcesContent":["import * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {useStore} from 'effector-react'\r\nimport {useEffect, useState} from 'react'\r\nimport {$accountModel, accountAvatarsMount} from '../../Models/account-model'\r\n\r\nconst defaultValue = {\r\n    business_ava: undefined,\r\n    passport_series: '',\r\n    passport_number: '',\r\n    passport_scan: ''\r\n}\r\n\r\nexport function useVerificationLegalData() {\r\n    const validationSchema = Yup.object().shape()\r\n    const [mounted, setMounted] = useState(false)\r\n    const [initialValues, setInitialValues] = useState(defaultValue)\r\n    const {$accountAvatars, $accountPDataMount} = useStore($accountModel)\r\n    \r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema,\r\n        enableReinitialize: true\r\n    })\r\n    \r\n    const getData = (value) => {\r\n        return value || ''\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const avatarsData = $accountAvatars.data\r\n        const accountPDataMount = $accountPDataMount.data\r\n        \r\n        if (!!$accountPDataMount && !!avatarsData && !mounted) {\r\n            const business_ava = avatarsData.length > 0 && avatarsData.find(item => item.business_ava)\r\n            \r\n            setInitialValues({\r\n                ...defaultValue,\r\n                business_ava: business_ava ? {stringUrl: business_ava.image, file: null} : false,\r\n                passport_number: getData(accountPDataMount && accountPDataMount.passport_number),\r\n                passport_series: getData(accountPDataMount && accountPDataMount.passport_series)\r\n            })\r\n            setMounted(true)\r\n        }\r\n    }, [$accountAvatars, $accountPDataMount, mounted])\r\n    \r\n    useEffect(() => {\r\n        accountAvatarsMount()\r\n    }, [])\r\n    \r\n    return {\r\n        formik\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}