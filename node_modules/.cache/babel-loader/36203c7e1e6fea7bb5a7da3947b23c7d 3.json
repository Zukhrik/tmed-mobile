{"ast":null,"code":"export function numberFormat(number,decimals){var dec_point=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'.';var thousands_sep=arguments.length>3&&arguments[3]!==undefined?arguments[3]:' ';// Format a number with grouped thousands\nvar i,j,kw,kd,km,nl,lkd;if(isNaN(decimals=Math.abs(decimals))){decimals=2;}if(dec_point===undefined){dec_point='.';}if(thousands_sep===undefined){thousands_sep=' ';}i=parseInt(number=(+number||0).toFixed(decimals))+'';if((j=i.length)>3){j=j%3;}else{j=0;}km=j?i.substr(0,j)+thousands_sep:'';kw=i.substr(j).replace(/(\\d{3})(?=\\d)/g,'$1'+thousands_sep);kd='0'+(decimals?dec_point+Math.abs(number-i).toFixed(decimals).replace(/-/,0).slice(2):'');nl=parseFloat(kd).valueOf();if(nl>0){lkd=nl.toString().substr(1);}else{lkd='';}return km+kw+lkd;}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/utils/number-utils.js"],"names":["numberFormat","number","decimals","dec_point","thousands_sep","i","j","kw","kd","km","nl","lkd","isNaN","Math","abs","undefined","parseInt","toFixed","length","substr","replace","slice","parseFloat","valueOf","toString"],"mappings":"AAAA,MAAO,SAASA,CAAAA,YAAT,CAAsBC,MAAtB,CAA8BC,QAA9B,CAA8E,IAAtCC,CAAAA,SAAsC,2DAA1B,GAA0B,IAArBC,CAAAA,aAAqB,2DAAL,GAAK,CAAG;AACpF,GAAIC,CAAAA,CAAJ,CAAOC,CAAP,CAAUC,EAAV,CAAcC,EAAd,CAAkBC,EAAlB,CAAsBC,EAAtB,CAA0BC,GAA1B,CACA,GAAIC,KAAK,CAACV,QAAQ,CAAGW,IAAI,CAACC,GAAL,CAASZ,QAAT,CAAZ,CAAT,CAA0C,CACtCA,QAAQ,CAAG,CAAX,CACH,CACD,GAAIC,SAAS,GAAKY,SAAlB,CAA6B,CACzBZ,SAAS,CAAG,GAAZ,CACH,CACD,GAAIC,aAAa,GAAKW,SAAtB,CAAiC,CAC7BX,aAAa,CAAG,GAAhB,CACH,CACDC,CAAC,CAAGW,QAAQ,CAACf,MAAM,CAAG,CAAC,CAACA,MAAD,EAAW,CAAZ,EAAegB,OAAf,CAAuBf,QAAvB,CAAV,CAAR,CAAsD,EAA1D,CACA,GAAI,CAACI,CAAC,CAAGD,CAAC,CAACa,MAAP,EAAiB,CAArB,CAAwB,CACpBZ,CAAC,CAAGA,CAAC,CAAG,CAAR,CACH,CAFD,IAEO,CACHA,CAAC,CAAG,CAAJ,CACH,CACDG,EAAE,CAAIH,CAAC,CAAGD,CAAC,CAACc,MAAF,CAAS,CAAT,CAAYb,CAAZ,EAAiBF,aAApB,CAAoC,EAA3C,CACAG,EAAE,CAAGF,CAAC,CAACc,MAAF,CAASb,CAAT,EAAYc,OAAZ,CAAoB,gBAApB,CAAsC,KAAOhB,aAA7C,CAAL,CACAI,EAAE,CAAG,KAAON,QAAQ,CAAGC,SAAS,CAAGU,IAAI,CAACC,GAAL,CAASb,MAAM,CAAGI,CAAlB,EAAqBY,OAArB,CAA6Bf,QAA7B,EAAuCkB,OAAvC,CAA+C,GAA/C,CAAoD,CAApD,EAAuDC,KAAvD,CAA6D,CAA7D,CAAf,CAAiF,EAAhG,CAAL,CACAX,EAAE,CAAGY,UAAU,CAACd,EAAD,CAAV,CAAee,OAAf,EAAL,CACA,GAAIb,EAAE,CAAG,CAAT,CAAY,CACRC,GAAG,CAAGD,EAAE,CAACc,QAAH,GAAcL,MAAd,CAAqB,CAArB,CAAN,CACH,CAFD,IAEO,CACHR,GAAG,CAAG,EAAN,CACH,CACD,MAAOF,CAAAA,EAAE,CAAGF,EAAL,CAAUI,GAAjB,CACH","sourcesContent":["export function numberFormat(number, decimals, dec_point = '.', thousands_sep = ' ') {  // Format a number with grouped thousands\r\n    let i, j, kw, kd, km, nl, lkd\r\n    if (isNaN(decimals = Math.abs(decimals))) {\r\n        decimals = 2\r\n    }\r\n    if (dec_point === undefined) {\r\n        dec_point = '.'\r\n    }\r\n    if (thousands_sep === undefined) {\r\n        thousands_sep = ' '\r\n    }\r\n    i = parseInt(number = (+number || 0).toFixed(decimals)) + ''\r\n    if ((j = i.length) > 3) {\r\n        j = j % 3\r\n    } else {\r\n        j = 0\r\n    }\r\n    km = (j ? i.substr(0, j) + thousands_sep : '')\r\n    kw = i.substr(j).replace(/(\\d{3})(?=\\d)/g, '$1' + thousands_sep)\r\n    kd = '0' + (decimals ? dec_point + Math.abs(number - i).toFixed(decimals).replace(/-/, 0).slice(2) : '')\r\n    nl = parseFloat(kd).valueOf()\r\n    if (nl > 0) {\r\n        lkd = nl.toString().substr(1)\r\n    } else {\r\n        lkd = ''\r\n    }\r\n    return km + kw + lkd\r\n}"]},"metadata":{},"sourceType":"module"}