{"ast":null,"code":"import React,{useEffect}from'react';import{generateSkeleton}from'../../../utils/skeleton-utils';import{useAllOrdersList}from'../../../Hooks/order';import{useStore}from'effector-react';import{$appModel,saveURLMount}from'../../../Models/app';import{useHistory}from'react-router-dom';import{$orderModel}from'../../../Models/order-model';import{Col,Row}from'antd';import{OrderCardSkeleton,OrderCartCard}from'../../../Components/Cards';var skeleton=generateSkeleton(10);export var Unregistered=function Unregistered(){useAllOrdersList();var _useStore=useStore($appModel),saveURL=_useStore.$app.saveURL;var _useHistory=useHistory(),push=_useHistory.push,pathname=_useHistory.location.pathname;var _useStore2=useStore($orderModel),_useStore2$$orderCart=_useStore2.$orderCartList,data=_useStore2$$orderCart.data,forceLoading=_useStore2$$orderCart.forceLoading;var handlePushToItem=function handlePushToItem(item){if(item.seller_type==='user'){saveURLMount(pathname)&&push(\"/records/unregistered/@\".concat(item.seller.slug_name));}else{saveURLMount(pathname)&&push(\"/records/unregistered/\".concat(item.seller.slug_name));}};useEffect(function(){if(saveURL==='/records/unregistered'){saveURLMount('');}},[pathname,saveURL]);return/*#__PURE__*/React.createElement(Row,{gutter:[0,12],style:{paddingBottom:65}},forceLoading===2?data&&data.length>0&&data.map(function(item,idx){return/*#__PURE__*/React.createElement(Col,{span:24,key:\"\".concat(idx+1),onClick:function onClick(){return handlePushToItem(item);}},/*#__PURE__*/React.createElement(OrderCartCard,{cost:item.total.cost,name:item.seller.name,count:item.total.count,imgUrl:item.seller.logo,category:item.seller.category.name}));}):/*#__PURE__*/React.createElement(React.Fragment,null,skeleton.map(function(item,idx){return/*#__PURE__*/React.createElement(Col,{span:24,key:\"\".concat(idx+1)},/*#__PURE__*/React.createElement(OrderCardSkeleton,null));})));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Records/organisms/unregistered.jsx"],"names":["React","useEffect","generateSkeleton","useAllOrdersList","useStore","$appModel","saveURLMount","useHistory","$orderModel","Col","Row","OrderCardSkeleton","OrderCartCard","skeleton","Unregistered","saveURL","$app","push","pathname","location","$orderCartList","data","forceLoading","handlePushToItem","item","seller_type","seller","slug_name","paddingBottom","length","map","idx","total","cost","name","count","logo","category"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAAQC,gBAAR,KAA+B,+BAA/B,CACA,OAAQC,gBAAR,KAA+B,sBAA/B,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,CAAmBC,YAAnB,KAAsC,qBAAtC,CACA,OAAQC,UAAR,KAAyB,kBAAzB,CACA,OAAQC,WAAR,KAA0B,6BAA1B,CACA,OAAQC,GAAR,CAAaC,GAAb,KAAuB,MAAvB,CACA,OAAQC,iBAAR,CAA2BC,aAA3B,KAA+C,2BAA/C,CAGA,GAAMC,CAAAA,QAAQ,CAAGX,gBAAgB,CAAC,EAAD,CAAjC,CACA,MAAO,IAAMY,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAC9BX,gBAAgB,GAChB,cAA0BC,QAAQ,CAACC,SAAD,CAAlC,CAAcU,OAAd,WAAOC,IAAP,CAAcD,OAAd,CACA,gBAAqCR,UAAU,EAA/C,CAAOU,IAAP,aAAOA,IAAP,CAAwBC,QAAxB,aAAaC,QAAb,CAAwBD,QAAxB,CACA,eAA+Cd,QAAQ,CAACI,WAAD,CAAvD,kCAAOY,cAAP,CAAwBC,IAAxB,uBAAwBA,IAAxB,CAA8BC,YAA9B,uBAA8BA,YAA9B,CAEA,GAAMC,CAAAA,gBAAgB,CAAG,QAAnBA,CAAAA,gBAAmB,CAACC,IAAD,CAAU,CAC/B,GAAIA,IAAI,CAACC,WAAL,GAAqB,MAAzB,CAAiC,CAC7BnB,YAAY,CAACY,QAAD,CAAZ,EAA0BD,IAAI,kCAA2BO,IAAI,CAACE,MAAL,CAAYC,SAAvC,EAA9B,CACH,CAFD,IAEO,CACHrB,YAAY,CAACY,QAAD,CAAZ,EAA0BD,IAAI,iCAA0BO,IAAI,CAACE,MAAL,CAAYC,SAAtC,EAA9B,CACH,CACJ,CAND,CAQA1B,SAAS,CAAC,UAAM,CACZ,GAAIc,OAAO,GAAK,uBAAhB,CAAyC,CACrCT,YAAY,CAAC,EAAD,CAAZ,CACH,CACJ,CAJQ,CAIN,CAACY,QAAD,CAAWH,OAAX,CAJM,CAAT,CAMA,mBACI,oBAAC,GAAD,EAAK,MAAM,CAAE,CAAC,CAAD,CAAI,EAAJ,CAAb,CAAsB,KAAK,CAAE,CAACa,aAAa,CAAE,EAAhB,CAA7B,EAEQN,YAAY,GAAK,CAAjB,CAEQD,IAAI,EAAIA,IAAI,CAACQ,MAAL,CAAc,CAAtB,EAA2BR,IAAI,CAACS,GAAL,CAAS,SAACN,IAAD,CAAOO,GAAP,qBAC5B,oBAAC,GAAD,EACI,IAAI,CAAE,EADV,CAEI,GAAG,WAAKA,GAAG,CAAG,CAAX,CAFP,CAGI,OAAO,CAAE,yBAAMR,CAAAA,gBAAgB,CAACC,IAAD,CAAtB,EAHb,eAMI,oBAAC,aAAD,EACI,IAAI,CAAEA,IAAI,CAACQ,KAAL,CAAWC,IADrB,CAEI,IAAI,CAAET,IAAI,CAACE,MAAL,CAAYQ,IAFtB,CAGI,KAAK,CAAEV,IAAI,CAACQ,KAAL,CAAWG,KAHtB,CAII,MAAM,CAAEX,IAAI,CAACE,MAAL,CAAYU,IAJxB,CAKI,QAAQ,CAAEZ,IAAI,CAACE,MAAL,CAAYW,QAAZ,CAAqBH,IALnC,EANJ,CAD4B,EAAT,CAFnC,cAmBM,wCAEMrB,QAAQ,CAACiB,GAAT,CAAa,SAACN,IAAD,CAAOO,GAAP,qBACT,oBAAC,GAAD,EACI,IAAI,CAAE,EADV,CAEI,GAAG,WAAKA,GAAG,CAAG,CAAX,CAFP,eAII,oBAAC,iBAAD,MAJJ,CADS,EAAb,CAFN,CArBd,CADJ,CAsCH,CA1DM","sourcesContent":["import React, {useEffect} from 'react'\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\nimport {useAllOrdersList} from '../../../Hooks/order'\nimport {useStore} from 'effector-react'\nimport {$appModel, saveURLMount} from '../../../Models/app'\nimport {useHistory} from 'react-router-dom'\nimport {$orderModel} from '../../../Models/order-model'\nimport {Col, Row} from 'antd'\nimport {OrderCardSkeleton, OrderCartCard} from '../../../Components/Cards'\n\n\nconst skeleton = generateSkeleton(10)\nexport const Unregistered = () => {\n    useAllOrdersList()\n    const {$app: {saveURL}} = useStore($appModel)\n    const {push, location: {pathname}} = useHistory()\n    const {$orderCartList: {data, forceLoading}} = useStore($orderModel)\n    \n    const handlePushToItem = (item) => {\n        if (item.seller_type === 'user') {\n            saveURLMount(pathname) && push(`/records/unregistered/@${item.seller.slug_name}`)\n        } else {\n            saveURLMount(pathname) && push(`/records/unregistered/${item.seller.slug_name}`)\n        }\n    }\n    \n    useEffect(() => {\n        if (saveURL === '/records/unregistered') {\n            saveURLMount('')\n        }\n    }, [pathname, saveURL])\n    \n    return (\n        <Row gutter={[0, 12]} style={{paddingBottom: 65}}>\n            {\n                forceLoading === 2\n                    ? (\n                        data && data.length > 0 && data.map((item, idx) => (\n                                <Col\n                                    span={24}\n                                    key={`${idx + 1}`}\n                                    onClick={() => handlePushToItem(item)}\n                                >\n                                    \n                                    <OrderCartCard\n                                        cost={item.total.cost}\n                                        name={item.seller.name}\n                                        count={item.total.count}\n                                        imgUrl={item.seller.logo}\n                                        category={item.seller.category.name}\n                                    />\n                                </Col>\n                            )\n                        ))\n                    : <>\n                        {\n                            skeleton.map((item, idx) => (\n                                <Col\n                                    span={24}\n                                    key={`${idx + 1}`}\n                                >\n                                    <OrderCardSkeleton/>\n                                </Col>\n                            ))\n                        }\n                    </>\n                \n            }\n        </Row>\n    )\n}"]},"metadata":{},"sourceType":"module"}