{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchAllUsers, fetchRecommendUsers, fetchSubscribeToUser, fetchUnsubscribeFromUser, fetchUser, fetchUserSubsMe, fetchUserSubsMy } from './effects';\nimport { idbSet } from '../../Config/db';\nimport { onlineUserMount, onlineUserMountFromIDB, subscribeToRecommendUserMount, unsubscribeFromFallsMount } from './events';\nimport { changeSingleItemInArray, commonStoreList, storeWithKey } from '../../utils/store-utils';\nconst $allUserList = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  forceLoading: 0,\n  error: false\n}).on(fetchAllUsers.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAllUsers.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchAllUsers.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(fetchSubscribeToUser.done, (state, {\n  params\n}) => {\n  const getOldData = oldData => ({\n    subs: {\n      me: oldData.subs.me + 1,\n      subscribed: true\n    }\n  });\n\n  const newData = changeSingleItemInArray({\n    arr: state.data,\n    key: 'username',\n    value: params.username,\n    getOldData\n  });\n\n  if (params.option) {\n    params.option();\n  }\n\n  return { ...state,\n    data: newData\n  };\n}).on(fetchUnsubscribeFromUser.done, (state, {\n  params\n}) => {\n  const getOldData = oldData => ({\n    subs: {\n      me: oldData.subs.me - 1,\n      subscribed: false\n    }\n  });\n\n  const newData = changeSingleItemInArray({\n    arr: state.data,\n    key: 'username',\n    value: params.username,\n    getOldData\n  });\n\n  if (params.option) {\n    params.option();\n  }\n\n  return { ...state,\n    data: newData\n  };\n});\nconst $user = createStore({\n  loading: false,\n  data: {},\n  error: {},\n  forceLoading: 0\n}).on(fetchUser.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchUser.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchUser.done, (state, {\n  result,\n  params: key,\n  clear\n}) => {\n  const processed = storeWithKey({\n    response: result.data,\n    state,\n    key,\n    clear: clear\n  });\n  return { ...processed,\n    forceLoading: 2\n  };\n}).on(fetchSubscribeToUser.done, (state, {\n  params: {\n    username,\n    action\n  }\n}) => {\n  const data = { ...state.data\n  };\n\n  if (username && data[username]) {\n    data[username] = { ...data[username],\n      subs: { ...data[username].subs,\n        subscribed: true\n      }\n    };\n\n    if (action) {\n      action();\n    }\n  }\n\n  return { ...state,\n    data\n  };\n}).on(fetchUnsubscribeFromUser.done, (state, {\n  params: {\n    username,\n    action\n  }\n}) => {\n  const data = { ...state.data\n  };\n\n  if (username && data[username]) {\n    data[username] = { ...data[username],\n      subs: { ...data[username].subs,\n        subscribed: false\n      }\n    };\n\n    if (action) {\n      action();\n    }\n  }\n\n  return { ...state,\n    data\n  };\n});\nconst $userSubsMe = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchUserSubsMe.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchUserSubsMe.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  result: {},\n  data: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchUserSubsMe.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nconst $userSubsMy = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchUserSubsMy.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchUserSubsMy.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  result: {},\n  data: [],\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchUserSubsMy.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(unsubscribeFromFallsMount, (state, {\n  username\n}) => {\n  let data = [...state.data];\n  const idx = data.findIndex(item => !item.to_org ? item.to_user.username === username : item.to_org.slug_name === username);\n\n  if (idx !== -1) {\n    data = [...data.slice(0, idx), ...data.slice(idx + 1)];\n  }\n\n  return { ...state,\n    data: data\n  };\n});\nconst $recommendUsers = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchRecommendUsers.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchRecommendUsers.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchRecommendUsers.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    key: params.username,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(subscribeToRecommendUserMount, (state, {\n  username\n}) => {\n  const idx = state.data.findIndex(item => item.username === username);\n\n  if (idx !== -1) {// data = [...data.slice(0, idx), {\n    //     ...data[idx].subs, subscribed: true\n    // }, ...data.slice(idx + 1)]\n  }\n\n  return { ...state\n  };\n}).on(fetchSubscribeToUser.done, (state, {\n  params\n}) => {\n  const getOldData = oldData => ({\n    subs: {\n      me: oldData.subs.me + 1,\n      subscribed: true\n    }\n  });\n\n  const newData = changeSingleItemInArray({\n    arr: state.data,\n    key: 'username',\n    value: params.username,\n    getOldData\n  });\n\n  if (params.option) {\n    params.option();\n  }\n\n  return { ...state,\n    data: newData\n  };\n});\nconst $onlineUser = createStore({\n  data: {}\n}).on(onlineUserMount, (state, payload) => ({ ...state,\n  data: { ...state.data,\n    ...payload\n  }\n})).on(onlineUserMountFromIDB, (state, payload) => ({ ...state,\n  data: { ...state.data,\n    ...payload\n  }\n}));\n$onlineUser.watch(state => {\n  if (Object.values(state.data).length > 0) {\n    idbSet('online_accounts', 'online_accounts', JSON.stringify(state.data)).then(() => {});\n  }\n});\nexport const $userModel = combine({\n  $user,\n  $userSubsMe,\n  $userSubsMy,\n  $allUserList,\n  $onlineUser,\n  $recommendUsers\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/user-model/stores.js"],"names":["combine","createStore","fetchAllUsers","fetchRecommendUsers","fetchSubscribeToUser","fetchUnsubscribeFromUser","fetchUser","fetchUserSubsMe","fetchUserSubsMy","idbSet","onlineUserMount","onlineUserMountFromIDB","subscribeToRecommendUserMount","unsubscribeFromFallsMount","changeSingleItemInArray","commonStoreList","storeWithKey","$allUserList","loading","data","result","forceLoading","error","on","pending","state","fail","done","params","processed","response","clear","getOldData","oldData","subs","me","subscribed","newData","arr","key","value","username","option","$user","action","$userSubsMe","$userSubsMy","idx","findIndex","item","to_org","to_user","slug_name","slice","$recommendUsers","$onlineUser","payload","watch","Object","values","length","JSON","stringify","then","$userModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\r\nimport {\r\n    fetchAllUsers,\r\n    fetchRecommendUsers,\r\n    fetchSubscribeToUser,\r\n    fetchUnsubscribeFromUser,\r\n    fetchUser,\r\n    fetchUserSubsMe,\r\n    fetchUserSubsMy\r\n} from './effects'\r\nimport {idbSet} from '../../Config/db'\r\nimport {\r\n    onlineUserMount,\r\n    onlineUserMountFromIDB,\r\n    subscribeToRecommendUserMount,\r\n    unsubscribeFromFallsMount\r\n} from './events'\r\nimport {changeSingleItemInArray, commonStoreList, storeWithKey} from '../../utils/store-utils'\r\n\r\nconst $allUserList = createStore({loading: false, data: [], result: {}, forceLoading: 0, error: false})\r\n    .on(fetchAllUsers.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAllUsers.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchAllUsers.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {\r\n            ...state, ...processed, forceLoading: 2\r\n        }\r\n    })\r\n    .on(fetchSubscribeToUser.done, (state, {params}) => {\r\n        const getOldData = (oldData) => ({subs: {me: oldData.subs.me + 1, subscribed: true}})\r\n        \r\n        const newData = changeSingleItemInArray({\r\n            arr: state.data,\r\n            key: 'username',\r\n            value: params.username,\r\n            getOldData\r\n        })\r\n        \r\n        if (params.option) {\r\n            params.option()\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            data: newData\r\n        }\r\n    })\r\n    .on(fetchUnsubscribeFromUser.done, (state, {params}) => {\r\n        const getOldData = (oldData) => ({subs: {me: oldData.subs.me - 1, subscribed: false}})\r\n        \r\n        const newData = changeSingleItemInArray({\r\n            arr: state.data,\r\n            key: 'username',\r\n            value: params.username,\r\n            getOldData\r\n        })\r\n        \r\n        if (params.option) {\r\n            params.option()\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            data: newData\r\n        }\r\n    })\r\n\r\nconst $user = createStore({loading: false, data: {}, error: {}, forceLoading: 0})\r\n    .on(fetchUser.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchUser.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchUser.done, (state, {result, params: key, clear}) => {\r\n        const processed = storeWithKey({\r\n            response: result.data, state, key, clear: clear\r\n        })\r\n        \r\n        return {...processed, forceLoading: 2}\r\n    })\r\n    .on(fetchSubscribeToUser.done, (state, {params: {username, action}}) => {\r\n        const data = {...state.data}\r\n        if (username && data[username]) {\r\n            data[username] = {...data[username], subs: {...data[username].subs, subscribed: true}}\r\n            if (action) {\r\n                action()\r\n            }\r\n        }\r\n        return {...state, data}\r\n    })\r\n    .on(fetchUnsubscribeFromUser.done, (state, {params: {username, action}}) => {\r\n        const data = {...state.data}\r\n        if (username && data[username]) {\r\n            data[username] = {...data[username], subs: {...data[username].subs, subscribed: false}}\r\n            if (action) {\r\n                action()\r\n            }\r\n        }\r\n        return {...state, data}\r\n    })\r\n\r\nconst $userSubsMe = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\r\n    .on(fetchUserSubsMe.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchUserSubsMe.fail, (state, {error}) => ({\r\n        ...state, error, result: {}, data: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchUserSubsMe.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {\r\n            ...state, ...processed, forceLoading: 2\r\n        }\r\n    })\r\n\r\nconst $userSubsMy = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\r\n    .on(fetchUserSubsMy.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchUserSubsMy.fail, (state, {error}) => ({\r\n        ...state, error, result: {}, data: [], forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchUserSubsMy.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        \r\n        return {\r\n            ...state,\r\n            ...processed,\r\n            forceLoading: 2\r\n        }\r\n    })\r\n    .on(unsubscribeFromFallsMount, (state, {username}) => {\r\n        let data = [...state.data]\r\n        const idx = data.findIndex(\r\n            item =>\r\n                !item.to_org\r\n                    ? item.to_user.username === username\r\n                    : item.to_org.slug_name === username\r\n        )\r\n        \r\n        if (idx !== -1) {\r\n            data = [...data.slice(0, idx), ...data.slice(idx + 1)]\r\n        }\r\n        \r\n        return {...state, data: data}\r\n    })\r\n\r\nconst $recommendUsers = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\r\n    .on(fetchRecommendUsers.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchRecommendUsers.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchRecommendUsers.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, key: params.username, ...params.params\r\n        })\r\n        \r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n    .on(subscribeToRecommendUserMount, (state, {username}) => {\r\n        const idx = state.data.findIndex(item => item.username === username)\r\n        \r\n        if (idx !== -1) {\r\n            // data = [...data.slice(0, idx), {\r\n            //     ...data[idx].subs, subscribed: true\r\n            // }, ...data.slice(idx + 1)]\r\n        }\r\n        \r\n        return {...state}\r\n    })\r\n    .on(fetchSubscribeToUser.done, (state, {params}) => {\r\n        const getOldData = (oldData) => ({subs: {me: oldData.subs.me + 1, subscribed: true}})\r\n        \r\n        const newData = changeSingleItemInArray({\r\n            arr: state.data,\r\n            key: 'username',\r\n            value: params.username,\r\n            getOldData\r\n        })\r\n        \r\n        if (params.option) {\r\n            params.option()\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            data: newData\r\n        }\r\n    })\r\n\r\nconst $onlineUser = createStore({data: {}})\r\n    .on(onlineUserMount, (state, payload) => ({...state, data: {...state.data, ...payload}}))\r\n    .on(onlineUserMountFromIDB, (state, payload) => ({...state, data: {...state.data, ...payload}}))\r\n\r\n$onlineUser.watch((state) => {\r\n    if (Object.values(state.data).length > 0) {\r\n        idbSet('online_accounts', 'online_accounts', JSON.stringify(state.data))\r\n            .then(() => {\r\n            \r\n            })\r\n    }\r\n})\r\n\r\nexport const $userModel = combine({\r\n    $user,\r\n    $userSubsMe,\r\n    $userSubsMy,\r\n    $allUserList,\r\n    $onlineUser,\r\n    $recommendUsers\r\n})"]},"metadata":{},"sourceType":"module"}