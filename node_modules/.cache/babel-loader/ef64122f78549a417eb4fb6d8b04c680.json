{"ast":null,"code":"import * as Yup from 'yup';\nimport Cookies from 'js-cookie';\nimport { useFormik } from 'formik';\nimport { useCallback } from 'react';\nimport auth from '../../Service/auth';\nimport { useHistory } from 'react-router-dom';\nimport { tokenMount } from '../../Models/app';\nimport { useTranslation } from 'react-i18next';\nimport { getCurrentAccount } from '../../Models/account-model';\nexport function useSignIn() {\n  const {\n    t\n  } = useTranslation();\n  const {\n    push\n  } = useHistory();\n  const validationSchema = Yup.object().shape({\n    username: Yup.string().required(t('required_field')),\n    password: Yup.string().required(t('required_field'))\n  });\n  const formik = useFormik({\n    initialValues: {\n      username: '',\n      password: ''\n    },\n    validationSchema,\n\n    onSubmit({\n      username,\n      password\n    }, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      let timeout = null;\n      auth.getToken({\n        password,\n        username\n      }).then(res => {\n        let users = Cookies.get('users') ? JSON.parse(Cookies.get('users')) : {};\n        users[username] = res.data;\n        Cookies.set('users', JSON.stringify(users));\n        Cookies.set('token', res.data.access);\n        Cookies.set('refresh-token', res.data.refresh);\n        tokenMount(res.data.access);\n        getCurrentAccount();\n        timeout = setTimeout(() => {\n          push('/');\n        }, 100);\n      }).finally(() => setSubmitting(false)).catch(() => {\n        setSubmitting(false);\n      });\n      clearTimeout(timeout);\n      timeout = null;\n    }\n\n  });\n  const disabled = useCallback(() => {\n    return formik.isSubmitting || formik.touched.password && !!formik.errors.password || formik.touched.name && !!formik.errors.name;\n  }, [formik]);\n  return {\n    formik,\n    disabled\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/auth/use-sign-in.js"],"names":["Yup","Cookies","useFormik","useCallback","auth","useHistory","tokenMount","useTranslation","getCurrentAccount","useSignIn","t","push","validationSchema","object","shape","username","string","required","password","formik","initialValues","onSubmit","setSubmitting","timeout","getToken","then","res","users","get","JSON","parse","data","set","stringify","access","refresh","setTimeout","finally","catch","clearTimeout","disabled","isSubmitting","touched","errors","name"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\r\nimport Cookies from 'js-cookie'\r\nimport {useFormik} from 'formik'\r\nimport {useCallback} from 'react'\r\nimport auth from '../../Service/auth'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {tokenMount} from '../../Models/app'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {getCurrentAccount} from '../../Models/account-model'\r\n\r\nexport function useSignIn() {\r\n    const {t} = useTranslation()\r\n    const {push} = useHistory()\r\n    const validationSchema = Yup.object().shape({\r\n        username: Yup.string().required(t('required_field')),\r\n        password: Yup.string().required(t('required_field'))\r\n    })\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            username: '',\r\n            password: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit({username, password}, {setSubmitting}) {\r\n            setSubmitting(true)\r\n            let timeout = null\r\n            auth.getToken({password, username})\r\n                .then((res) => {\r\n                    let users = Cookies.get('users') ? JSON.parse(Cookies.get('users')) : {}\r\n                    users[username] = res.data\r\n                    Cookies.set('users', JSON.stringify(users))\r\n                    Cookies.set('token', res.data.access)\r\n                    Cookies.set('refresh-token', res.data.refresh)\r\n                    tokenMount(res.data.access)\r\n                    getCurrentAccount()\r\n                    timeout = setTimeout(() => {\r\n                        push('/')\r\n                    }, 100)\r\n                })\r\n                .finally(() => setSubmitting(false))\r\n                .catch(() => {\r\n                    setSubmitting(false)\r\n                })\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    })\r\n    \r\n    const disabled = useCallback(() => {\r\n        return (\r\n            formik.isSubmitting\r\n            || (formik.touched.password && !!formik.errors.password)\r\n            || (formik.touched.name && !!formik.errors.name)\r\n        )\r\n        \r\n    }, [formik])\r\n    \r\n    return {formik, disabled}\r\n}"]},"metadata":{},"sourceType":"module"}