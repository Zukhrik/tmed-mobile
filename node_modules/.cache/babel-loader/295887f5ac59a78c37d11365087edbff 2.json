{"ast":null,"code":"import{httpGet,httpPatch,httpPost,httpPut}from'./index';export default{getAccount:function getAccount(){return httpGet({url:'/account/'});},getAccountPData:function getAccountPData(){return httpGet({url:'/account/pdata/'});},accountCoupons:function accountCoupons(){return httpGet({url:'/account/mycoupons/'});},updateAccount:function updateAccount(_ref){var data=_ref.data;return httpPatch({url:'/account/',data:data});},getAvatars:function getAvatars(params){return httpGet({url:'/account/avatars/',params:params});},createAccount:function createAccount(data){return httpPost({url:'/account/create/',data:data,headers:{notAuth:true}});},validateUsername:function validateUsername(data){return httpPost({url:'/account/validate/',data:data,headers:{notAuth:true}});},createAvatar:function createAvatar(data){return httpPost({url:'/account/avatars/',data:data,headers:{'Content-Type':'multipart/form-data'}});},updateAvatar:function updateAvatar(_ref2){var data=_ref2.data,id=_ref2.id;return httpPatch({url:\"/account/avatars/\".concat(id,\"/\"),data:data,headers:{'Content-Type':'multipart/form-data'}});},updatePData:function updatePData(data){return httpPut({data:data,url:'/account/pdata/',headers:{'Content-Type':'multipart/form-data'}});},getVideoVerify:function getVideoVerify(){return httpGet({url:'/account/video_verify/'});},createVideoVerify:function createVideoVerify(data){return httpPost({url:'/account/video_verify/',data:data,headers:{'Content-Type':'multipart/form-data'}});},refreshToken:function refreshToken(data){return httpPost({url:'/account/token-refresh/',data:data,headers:{notAuth:true}});}};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Service/account.js"],"names":["httpGet","httpPatch","httpPost","httpPut","getAccount","url","getAccountPData","accountCoupons","updateAccount","data","getAvatars","params","createAccount","headers","notAuth","validateUsername","createAvatar","updateAvatar","id","updatePData","getVideoVerify","createVideoVerify","refreshToken"],"mappings":"AAAA,OAAQA,OAAR,CAAiBC,SAAjB,CAA4BC,QAA5B,CAAsCC,OAAtC,KAAoD,SAApD,CAEA,cAAe,CACXC,UAAU,CAAE,4BAAMJ,CAAAA,OAAO,CAAC,CAACK,GAAG,CAAE,WAAN,CAAD,CAAb,EADD,CAEXC,eAAe,CAAE,iCAAMN,CAAAA,OAAO,CAAC,CAACK,GAAG,CAAE,iBAAN,CAAD,CAAb,EAFN,CAGXE,cAAc,CAAE,gCAAMP,CAAAA,OAAO,CAAC,CAACK,GAAG,CAAE,qBAAN,CAAD,CAAb,EAHL,CAIXG,aAAa,CAAE,gCAAEC,CAAAA,IAAF,MAAEA,IAAF,OAAYR,CAAAA,SAAS,CAAC,CAACI,GAAG,CAAE,WAAN,CAAmBI,IAAI,CAAJA,IAAnB,CAAD,CAArB,EAJJ,CAKXC,UAAU,CAAE,oBAACC,MAAD,QAAYX,CAAAA,OAAO,CAAC,CAACK,GAAG,CAAE,mBAAN,CAA2BM,MAAM,CAANA,MAA3B,CAAD,CAAnB,EALD,CAMXC,aAAa,CAAE,uBAACH,IAAD,QAAUP,CAAAA,QAAQ,CAAC,CAACG,GAAG,CAAE,kBAAN,CAA0BI,IAAI,CAAJA,IAA1B,CAAgCI,OAAO,CAAE,CAACC,OAAO,CAAE,IAAV,CAAzC,CAAD,CAAlB,EANJ,CAOXC,gBAAgB,CAAE,0BAACN,IAAD,QAAUP,CAAAA,QAAQ,CAAC,CAACG,GAAG,CAAE,oBAAN,CAA4BI,IAAI,CAAJA,IAA5B,CAAkCI,OAAO,CAAE,CAACC,OAAO,CAAE,IAAV,CAA3C,CAAD,CAAlB,EAPP,CAQXE,YAAY,CAAE,sBAACP,IAAD,QAAUP,CAAAA,QAAQ,CAAC,CAC7BG,GAAG,CAAE,mBADwB,CACHI,IAAI,CAAJA,IADG,CAE7BI,OAAO,CAAE,CACL,eAAgB,qBADX,CAFoB,CAAD,CAAlB,EARH,CAcXI,YAAY,CAAE,gCAAER,CAAAA,IAAF,OAAEA,IAAF,CAAQS,EAAR,OAAQA,EAAR,OAAgBjB,CAAAA,SAAS,CAAC,CACpCI,GAAG,4BAAsBa,EAAtB,KADiC,CACJT,IAAI,CAAJA,IADI,CAEpCI,OAAO,CAAE,CACL,eAAgB,qBADX,CAF2B,CAAD,CAAzB,EAdH,CAoBXM,WAAW,CAAE,qBAACV,IAAD,QAAUN,CAAAA,OAAO,CAAC,CAC3BM,IAAI,CAAJA,IAD2B,CAE3BJ,GAAG,CAAE,iBAFsB,CAG3BQ,OAAO,CAAE,CAAC,eAAgB,qBAAjB,CAHkB,CAAD,CAAjB,EApBF,CAyBXO,cAAc,CAAE,gCAAMpB,CAAAA,OAAO,CAAC,CAACK,GAAG,CAAE,wBAAN,CAAD,CAAb,EAzBL,CA0BXgB,iBAAiB,CAAE,2BAACZ,IAAD,QAAUP,CAAAA,QAAQ,CAAC,CAClCG,GAAG,CAAE,wBAD6B,CAElCI,IAAI,CAAJA,IAFkC,CAGlCI,OAAO,CAAE,CAAC,eAAgB,qBAAjB,CAHyB,CAAD,CAAlB,EA1BR,CA+BXS,YAAY,CAAE,sBAACb,IAAD,QAAUP,CAAAA,QAAQ,CAAC,CAC7BG,GAAG,CAAE,yBADwB,CACGI,IAAI,CAAJA,IADH,CACSI,OAAO,CAAE,CAC3CC,OAAO,CAAE,IADkC,CADlB,CAAD,CAAlB,EA/BH,CAAf","sourcesContent":["import {httpGet, httpPatch, httpPost, httpPut} from './index'\r\n\r\nexport default {\r\n    getAccount: () => httpGet({url: '/account/'}),\r\n    getAccountPData: () => httpGet({url: '/account/pdata/'}),\r\n    accountCoupons: () => httpGet({url: '/account/mycoupons/'}),\r\n    updateAccount: ({data}) => httpPatch({url: '/account/', data}),\r\n    getAvatars: (params) => httpGet({url: '/account/avatars/', params}),\r\n    createAccount: (data) => httpPost({url: '/account/create/', data, headers: {notAuth: true}}),\r\n    validateUsername: (data) => httpPost({url: '/account/validate/', data, headers: {notAuth: true}}),\r\n    createAvatar: (data) => httpPost({\r\n        url: '/account/avatars/', data,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }),\r\n    updateAvatar: ({data, id}) => httpPatch({\r\n        url: `/account/avatars/${id}/`, data,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }),\r\n    updatePData: (data) => httpPut({\r\n        data,\r\n        url: '/account/pdata/',\r\n        headers: {'Content-Type': 'multipart/form-data'}\r\n    }),\r\n    getVideoVerify: () => httpGet({url: '/account/video_verify/'}),\r\n    createVideoVerify: (data) => httpPost({\r\n        url: '/account/video_verify/',\r\n        data,\r\n        headers: {'Content-Type': 'multipart/form-data'}\r\n    }),\r\n    refreshToken: (data) => httpPost({\r\n        url: '/account/token-refresh/', data, headers: {\r\n            notAuth: true\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}