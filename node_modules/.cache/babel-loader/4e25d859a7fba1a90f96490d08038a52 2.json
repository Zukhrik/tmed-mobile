{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { orgListForceLoading } from './events';\nimport { fetchAllOrg, fetchOrgInfo, fetchOrgPaymentMethods, fetchOrgSpecialistCat, fetchOrgSpecialists, fetchSearchOrg, fetchSubscribeToOrg, fetchUnsubscribeFromOrg } from './effects';\nimport { commonStoreList, storeWithKey } from '../../utils/store-utils';\nconst $allOrgList = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  forceLoading: 0,\n  error: false\n}).on(fetchAllOrg.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAllOrg.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchAllOrg.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(orgListForceLoading, state => ({ ...state,\n  forceLoading: true\n})).on(fetchSubscribeToOrg.done, (state, {\n  params\n}) => {\n  const slug_name = params.org_slug_name;\n  const idx = state.data.findIndex(el => el.slug_name === slug_name);\n  let newData = state.data;\n\n  if (idx !== -1) {\n    const oldData = state.data[idx];\n    newData = [...state.data.slice(0, idx), { ...oldData,\n      subs: { ...oldData.subs,\n        subscribed: true,\n        me: oldData.subs.me + 1\n      }\n    }, ...state.data.slice(idx + 1)];\n  }\n\n  return { ...state,\n    data: newData\n  };\n});\nconst $searchOrg = createStore({\n  loading: false,\n  data: [],\n  error: false,\n  result: {}\n}).on(fetchSearchOrg.pending, (state, loading) => ({ ...this.state,\n  loading\n})).on(fetchSearchOrg.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {}\n})).on(fetchSearchOrg.done, (state, res) => {\n  return { ...state,\n    data: res.result.results\n  };\n});\nconst $orgSpecialistCat = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  forceLoading: false,\n  error: false\n}).on(fetchOrgSpecialistCat.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgSpecialistCat.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {}\n})).on(fetchOrgSpecialistCat.done, (state, {\n  params,\n  result\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nconst $organizationInfo = createStore({\n  loading: false,\n  data: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchOrgInfo.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgInfo.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrgInfo.done, (state, {\n  result,\n  params: key\n}) => {\n  const processed = storeWithKey({\n    response: result.data,\n    state,\n    key\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(fetchSubscribeToOrg.done, (state, {\n  params: {\n    org_slug_name,\n    action\n  }\n}) => {\n  const data = { ...state.data\n  };\n\n  if (org_slug_name && data[org_slug_name]) {\n    data[org_slug_name] = { ...data[org_slug_name],\n      subs: { ...data[org_slug_name].subs,\n        subscribed: true\n      }\n    };\n\n    if (action) {\n      action();\n    }\n  }\n\n  return { ...state,\n    data\n  };\n}).on(fetchUnsubscribeFromOrg.done, (state, {\n  params: {\n    org_slug_name,\n    action\n  }\n}) => {\n  const data = { ...state.data\n  };\n\n  if (org_slug_name && data[org_slug_name]) {\n    data[org_slug_name] = { ...data[org_slug_name],\n      subs: { ...data[org_slug_name].subs,\n        subscribed: false\n      }\n    };\n\n    if (action) {\n      action();\n    }\n  }\n\n  return { ...state,\n    data\n  };\n});\nconst $orgSpecialistsList = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  forceLoading: 0,\n  error: false\n}).on(fetchOrgSpecialists.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgSpecialists.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrgSpecialists.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nconst $orgPaymentMethods = createStore({\n  loading: false,\n  data: [],\n  error: false\n}).on(fetchOrgPaymentMethods.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgPaymentMethods.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: []\n})).on(fetchOrgPaymentMethods.done, (state, {\n  result,\n  params\n}) => {\n  return { ...state,\n    data: result.data\n  };\n});\nexport const $orgModel = combine({\n  $searchOrg,\n  $allOrgList,\n  $organizationInfo,\n  $orgSpecialistCat,\n  $orgPaymentMethods,\n  $orgSpecialistsList\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/org-model/stores.js"],"names":["combine","createStore","orgListForceLoading","fetchAllOrg","fetchOrgInfo","fetchOrgPaymentMethods","fetchOrgSpecialistCat","fetchOrgSpecialists","fetchSearchOrg","fetchSubscribeToOrg","fetchUnsubscribeFromOrg","commonStoreList","storeWithKey","$allOrgList","loading","data","result","forceLoading","error","on","pending","state","fail","done","params","processed","response","clear","slug_name","org_slug_name","idx","findIndex","el","newData","oldData","slice","subs","subscribed","me","$searchOrg","res","results","$orgSpecialistCat","$organizationInfo","key","action","$orgSpecialistsList","$orgPaymentMethods","$orgModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\r\nimport {orgListForceLoading} from './events'\r\nimport {\r\n    fetchAllOrg,\r\n    fetchOrgInfo,\r\n    fetchOrgPaymentMethods,\r\n    fetchOrgSpecialistCat,\r\n    fetchOrgSpecialists,\r\n    fetchSearchOrg,\r\n    fetchSubscribeToOrg,\r\n    fetchUnsubscribeFromOrg\r\n} from './effects'\r\nimport {commonStoreList, storeWithKey} from '../../utils/store-utils'\r\n\r\nconst $allOrgList = createStore({loading: false, data: [], result: {}, forceLoading: 0, error: false})\r\n    .on(fetchAllOrg.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAllOrg.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchAllOrg.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {\r\n            ...state, ...processed, forceLoading: 2\r\n        }\r\n    })\r\n    .on(orgListForceLoading, (state) => ({...state, forceLoading: true}))\r\n    .on(fetchSubscribeToOrg.done, (state, {params}) => {\r\n        const slug_name = params.org_slug_name\r\n        const idx = state.data.findIndex((el) => el.slug_name === slug_name)\r\n        let newData = state.data\r\n        if (idx !== -1) {\r\n            const oldData = state.data[idx]\r\n            newData = [...state.data.slice(0, idx), {\r\n                ...oldData, subs: {...oldData.subs, subscribed: true, me: oldData.subs.me + 1}\r\n            }, ...state.data.slice(idx + 1)]\r\n        }\r\n        return {...state, data: newData}\r\n    })\r\n\r\nconst $searchOrg = createStore({loading: false, data: [], error: false, result: {}})\r\n    .on(fetchSearchOrg.pending, (state, loading) => ({...this.state, loading}))\r\n    .on(fetchSearchOrg.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}\r\n    }))\r\n    .on(fetchSearchOrg.done, (state, res) => {\r\n        return {\r\n            ...state, data: res.result.results\r\n        }\r\n    })\r\n\r\n\r\nconst $orgSpecialistCat = createStore({\r\n    loading: false, data: [], result: {}, forceLoading: false, error: false\r\n})\r\n    .on(fetchOrgSpecialistCat.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchOrgSpecialistCat.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}\r\n    }))\r\n    .on(fetchOrgSpecialistCat.done, (state, {params, result}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n\r\nconst $organizationInfo = createStore({loading: false, data: {}, error: false, forceLoading: 0})\r\n    .on(fetchOrgInfo.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchOrgInfo.fail, (state, {error}) => ({\r\n        ...state, error, data: [], forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchOrgInfo.done, (state, {result, params: key}) => {\r\n        const processed = storeWithKey({\r\n            response: result.data, state, key\r\n        })\r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n    .on(fetchSubscribeToOrg.done, (state, {params: {org_slug_name, action}}) => {\r\n        const data = {...state.data}\r\n        \r\n        if (org_slug_name && data[org_slug_name]) {\r\n            data[org_slug_name] = {...data[org_slug_name], subs: {...data[org_slug_name].subs, subscribed: true}}\r\n            if (action) {\r\n                action()\r\n            }\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n    .on(fetchUnsubscribeFromOrg.done, (state, {params: {org_slug_name, action}}) => {\r\n        const data = {...state.data}\r\n        \r\n        if (org_slug_name && data[org_slug_name]) {\r\n            data[org_slug_name] = {...data[org_slug_name], subs: {...data[org_slug_name].subs, subscribed: false}}\r\n            if (action) {\r\n                action()\r\n            }\r\n        }\r\n        \r\n        return {...state, data}\r\n    })\r\n\r\n\r\nconst $orgSpecialistsList = createStore({loading: false, data: [], result: {}, forceLoading: 0, error: false})\r\n    .on(fetchOrgSpecialists.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchOrgSpecialists.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchOrgSpecialists.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n\r\nconst $orgPaymentMethods = createStore({loading: false, data: [], error: false})\r\n    .on(fetchOrgPaymentMethods.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchOrgPaymentMethods.fail, (state, {error}) => ({\r\n        ...state, error, data: []\r\n    }))\r\n    .on(fetchOrgPaymentMethods.done, (state, {result, params}) => {\r\n        \r\n        return {...state, data: result.data}\r\n    })\r\n\r\n\r\nexport const $orgModel = combine({\r\n    $searchOrg,\r\n    $allOrgList,\r\n    $organizationInfo,\r\n    $orgSpecialistCat,\r\n    $orgPaymentMethods,\r\n    $orgSpecialistsList\r\n})"]},"metadata":{},"sourceType":"module"}