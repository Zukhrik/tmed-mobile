{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/TapeTypes/TapePost/index.jsx\";\nimport React, { useCallback } from 'react';\nimport { PostCard } from '../../Post';\nimport { useChangeDateLang } from '../../../Hooks/app';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { saveURLMount } from '../../../Models/app';\nexport const TapePost = ({\n  data\n}) => {\n  const {\n    push\n  } = useHistory();\n  const {\n    changeDateLang\n  } = useChangeDateLang();\n  const {\n    pathname\n  } = useLocation();\n  const getPostHeader = useCallback(() => {\n    let tmp = {};\n\n    if (data.stream_schedule) {\n      tmp = {\n        isOfficial: undefined,\n        anons: data.stream_schedule.date,\n        imgUrl: data.stream_schedule.stream.logo,\n        name: data.stream_schedule.stream.channel_name\n      };\n    } else {\n      tmp = {\n        name: data.author.name,\n        imgUrl: data.author.avatar,\n        isOfficial: data.author.is_official\n      };\n    }\n\n    return tmp;\n  }, [data]);\n\n  const handlePush = item => {\n    if (item.author.type === 'user') {\n      push(`/@${data.author.slug_name}/tape`) && saveURLMount(pathname);\n    } else {\n      push(`/${data.author.slug_name}/offerings`) && saveURLMount(pathname);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, data && Object.values(data).length > 0 && /*#__PURE__*/React.createElement(PostCard, {\n    data: data,\n    author: data.author,\n    date: changeDateLang(data.date),\n    postHeaderInfo: getPostHeader(),\n    handlePush: () => handlePush(data),\n    postOwner: data.repost || false,\n    newAvatar: data.action && data.action.key === 'new_avatar',\n    newDuty: data.action && data.action.key === 'new_duty' && data.action.data.new_specialism,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/TapeTypes/TapePost/index.jsx"],"names":["React","useCallback","PostCard","useChangeDateLang","useHistory","useLocation","saveURLMount","TapePost","data","push","changeDateLang","pathname","getPostHeader","tmp","stream_schedule","isOfficial","undefined","anons","date","imgUrl","stream","logo","name","channel_name","author","avatar","is_official","handlePush","item","type","slug_name","Object","values","length","repost","action","key","new_specialism"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,WAAf,QAAiC,OAAjC;AACA,SAAQC,QAAR,QAAuB,YAAvB;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AACA,SAAQC,UAAR,EAAoBC,WAApB,QAAsC,kBAAtC;AACA,SAAQC,YAAR,QAA2B,qBAA3B;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAChC,QAAM;AAACC,IAAAA;AAAD,MAASL,UAAU,EAAzB;AACA,QAAM;AAACM,IAAAA;AAAD,MAAmBP,iBAAiB,EAA1C;AACA,QAAM;AAACQ,IAAAA;AAAD,MAAaN,WAAW,EAA9B;AAEA,QAAMO,aAAa,GAAGX,WAAW,CAAC,MAAM;AACpC,QAAIY,GAAG,GAAG,EAAV;;AACA,QAAIL,IAAI,CAACM,eAAT,EAA0B;AACtBD,MAAAA,GAAG,GAAG;AACFE,QAAAA,UAAU,EAAEC,SADV;AAEFC,QAAAA,KAAK,EAAET,IAAI,CAACM,eAAL,CAAqBI,IAF1B;AAGFC,QAAAA,MAAM,EAAEX,IAAI,CAACM,eAAL,CAAqBM,MAArB,CAA4BC,IAHlC;AAIFC,QAAAA,IAAI,EAAEd,IAAI,CAACM,eAAL,CAAqBM,MAArB,CAA4BG;AAJhC,OAAN;AAMH,KAPD,MAOO;AACHV,MAAAA,GAAG,GAAG;AACFS,QAAAA,IAAI,EAAEd,IAAI,CAACgB,MAAL,CAAYF,IADhB;AAEFH,QAAAA,MAAM,EAAEX,IAAI,CAACgB,MAAL,CAAYC,MAFlB;AAGFV,QAAAA,UAAU,EAAEP,IAAI,CAACgB,MAAL,CAAYE;AAHtB,OAAN;AAKH;;AAED,WAAOb,GAAP;AACH,GAlBgC,EAkB9B,CAACL,IAAD,CAlB8B,CAAjC;;AAoBA,QAAMmB,UAAU,GAAIC,IAAD,IAAU;AACzB,QAAIA,IAAI,CAACJ,MAAL,CAAYK,IAAZ,KAAqB,MAAzB,EAAiC;AAC7BpB,MAAAA,IAAI,CAAE,KAAID,IAAI,CAACgB,MAAL,CAAYM,SAAU,OAA5B,CAAJ,IAA2CxB,YAAY,CAACK,QAAD,CAAvD;AACH,KAFD,MAEO;AACHF,MAAAA,IAAI,CAAE,IAAGD,IAAI,CAACgB,MAAL,CAAYM,SAAU,YAA3B,CAAJ,IAA+CxB,YAAY,CAACK,QAAD,CAA3D;AACH;AACJ,GAND;;AAQA,sBACI,0CAEQH,IAAI,IAAIuB,MAAM,CAACC,MAAP,CAAcxB,IAAd,EAAoByB,MAApB,GAA6B,CAArC,iBACI,oBAAC,QAAD;AACI,IAAA,IAAI,EAAEzB,IADV;AAEI,IAAA,MAAM,EAAEA,IAAI,CAACgB,MAFjB;AAGI,IAAA,IAAI,EAAEd,cAAc,CAACF,IAAI,CAACU,IAAN,CAHxB;AAII,IAAA,cAAc,EAAEN,aAAa,EAJjC;AAKI,IAAA,UAAU,EAAE,MAAMe,UAAU,CAACnB,IAAD,CALhC;AAMI,IAAA,SAAS,EAAEA,IAAI,CAAC0B,MAAL,IAAe,KAN9B;AAOI,IAAA,SAAS,EAAE1B,IAAI,CAAC2B,MAAL,IAAe3B,IAAI,CAAC2B,MAAL,CAAYC,GAAZ,KAAoB,YAPlD;AAQI,IAAA,OAAO,EAAE5B,IAAI,CAAC2B,MAAL,IAAe3B,IAAI,CAAC2B,MAAL,CAAYC,GAAZ,KAAoB,UAAnC,IAAiD5B,IAAI,CAAC2B,MAAL,CAAY3B,IAAZ,CAAiB6B,cAR/E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHZ,CADJ;AAkBH,CAnDM","sourcesContent":["import React, {useCallback} from 'react'\r\nimport {PostCard} from '../../Post'\r\nimport {useChangeDateLang} from '../../../Hooks/app'\r\nimport {useHistory, useLocation} from 'react-router-dom'\r\nimport {saveURLMount} from '../../../Models/app'\r\n\r\nexport const TapePost = ({data}) => {\r\n    const {push} = useHistory()\r\n    const {changeDateLang} = useChangeDateLang()\r\n    const {pathname} = useLocation()\r\n    \r\n    const getPostHeader = useCallback(() => {\r\n        let tmp = {}\r\n        if (data.stream_schedule) {\r\n            tmp = {\r\n                isOfficial: undefined,\r\n                anons: data.stream_schedule.date,\r\n                imgUrl: data.stream_schedule.stream.logo,\r\n                name: data.stream_schedule.stream.channel_name\r\n            }\r\n        } else {\r\n            tmp = {\r\n                name: data.author.name,\r\n                imgUrl: data.author.avatar,\r\n                isOfficial: data.author.is_official\r\n            }\r\n        }\r\n        \r\n        return tmp\r\n    }, [data])\r\n    \r\n    const handlePush = (item) => {\r\n        if (item.author.type === 'user') {\r\n            push(`/@${data.author.slug_name}/tape`) && saveURLMount(pathname)\r\n        } else {\r\n            push(`/${data.author.slug_name}/offerings`) && saveURLMount(pathname)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            {\r\n                data && Object.values(data).length > 0 && (\r\n                    <PostCard\r\n                        data={data}\r\n                        author={data.author}\r\n                        date={changeDateLang(data.date)}\r\n                        postHeaderInfo={getPostHeader()}\r\n                        handlePush={() => handlePush(data)}\r\n                        postOwner={data.repost || false}\r\n                        newAvatar={data.action && data.action.key === 'new_avatar'}\r\n                        newDuty={data.action && data.action.key === 'new_duty' && data.action.data.new_specialism}\r\n                    />\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}