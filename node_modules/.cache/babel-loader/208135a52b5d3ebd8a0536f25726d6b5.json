{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { URL_KEYS } from '../../Constants';\nimport { useParams } from 'react-router-dom';\nimport { useCallback, useEffect } from 'react';\nimport { $orgModel, orgSpecialistCatMount, orgSpecialistsMount } from '../../Models/org-model';\nimport { useStore } from 'effector-react';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useOrgSpecialistLists() {\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    organization\n  } = useParams();\n  const {\n    $orgSpecialistsList: {\n      result\n    }\n  } = useStore($orgModel);\n  const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID];\n  console.log(result === null || result === void 0 ? void 0 : result.nextOffset);\n  const getOrgSpecialists = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgSpecialistsMount(data);\n    }\n  }, [organization]);\n  const getOrgSpecCatList = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgSpecialistCatMount(data);\n    }\n  }, [organization]);\n  const loadMore = useCallback(() => {\n    if (result === null || result === void 0 ? void 0 : result.nextOffset) {\n      const data = {\n        organization,\n        params: { ...initialParams,\n          offset: result.nextOffset\n        }\n      };\n      orgSpecialistsMount(data);\n    }\n  }, [result, organization]);\n  useEffect(() => {\n    const data = {\n      clear: true,\n      params: { ...initialParams\n      }\n    };\n    getOrgSpecCatList(data);\n  }, [getOrgSpecCatList]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (spec_cat_id) {\n        data['params']['spec_cat'] = spec_cat_id;\n      } else {\n        delete data['params']['spec_cat'];\n      }\n\n      getOrgSpecialists(data);\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getOrgSpecialists, spec_cat_id]);\n  return {\n    loadMore\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/org/use-org-specialists.js"],"names":["useUrlParams","URL_KEYS","useParams","useCallback","useEffect","$orgModel","orgSpecialistCatMount","orgSpecialistsMount","useStore","initialParams","limit","offset","useOrgSpecialistLists","urlData","organization","$orgSpecialistsList","result","spec_cat_id","SPECIALIST_CATEGORY_ID","console","log","nextOffset","getOrgSpecialists","params","data","getOrgSpecCatList","loadMore","clear","timeout","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {URL_KEYS} from '../../Constants'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useCallback, useEffect} from 'react'\r\nimport {$orgModel, orgSpecialistCatMount, orgSpecialistsMount} from '../../Models/org-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useOrgSpecialistLists() {\r\n    const {urlData} = useUrlParams()\r\n    const {organization} = useParams()\r\n    const {$orgSpecialistsList: {result}} = useStore($orgModel)\r\n    const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]\r\n    console.log(result?.nextOffset)\r\n    \r\n    const getOrgSpecialists = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgSpecialistsMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    const getOrgSpecCatList = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgSpecialistCatMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    const loadMore = useCallback(() => {\r\n        if (result?.nextOffset) {\r\n            const data = {\r\n                organization,\r\n                params: {\r\n                    ...initialParams,\r\n                    offset: result.nextOffset\r\n                }\r\n            }\r\n            orgSpecialistsMount(data)\r\n        }\r\n    }, [result, organization])\r\n    \r\n    useEffect(() => {\r\n        const data = {\r\n            clear: true,\r\n            params: {...initialParams}\r\n        }\r\n        getOrgSpecCatList(data)\r\n    }, [getOrgSpecCatList])\r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            \r\n            if (spec_cat_id) {\r\n                data['params']['spec_cat'] = spec_cat_id\r\n            } else {\r\n                delete data['params']['spec_cat']\r\n            }\r\n            \r\n            getOrgSpecialists(data)\r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n        \r\n    }, [getOrgSpecialists, spec_cat_id])\r\n    \r\n    return {loadMore}\r\n}"]},"metadata":{},"sourceType":"module"}