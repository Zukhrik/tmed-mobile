{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { postWantingScheduleIdMount, streamChannelWSChatMount, streamLiveWatchersMount } from './events';\nimport { commonStoreList, storeListWithKey, storeWithKey } from '../../utils/store-utils';\nimport { fetchAllStreamList, fetchChannelStreamSchedule, fetchStream, fetchStreamChannelChat, fetchStreamScheduleId } from './effects';\nconst $allStreamList = createStore({\n  loading: false,\n  data: [],\n  forceLoading: 0,\n  result: {},\n  error: false\n}).on(fetchAllStreamList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAllStreamList.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchAllStreamList.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nconst $stream = createStore({\n  loading: false,\n  data: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchStream.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchStream.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchStream.done, (state, {\n  result,\n  params\n}) => {\n  return { ...state,\n    data: result.data,\n    forceLoading: 2\n  };\n}).on(streamLiveWatchersMount, (state, payload) => {\n  var _state$data;\n\n  let watchers = state === null || state === void 0 ? void 0 : (_state$data = state.data) === null || _state$data === void 0 ? void 0 : _state$data.live_watchers;\n\n  if (payload.count) {\n    watchers = Number(payload.count);\n\n    if (state.data) {\n      state.data.live_watchers = watchers;\n    }\n  }\n\n  return { ...state,\n    data: state.data\n  };\n});\nconst $channelStreamScheduleList = createStore({\n  loading: false,\n  data: {},\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchChannelStreamSchedule.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchChannelStreamSchedule.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchChannelStreamSchedule.done, (state, {\n  params,\n  result\n}) => {\n  const processed = storeListWithKey({\n    response: result.data,\n    state,\n    key: params.slug_name,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(postWantingScheduleIdMount, (state, params) => {\n  const slug_name = params.slug_name;\n  const schedule_id = params.schedule_id;\n  const data = { ...state.data\n  };\n\n  if (data[schedule_id]) {\n    const oldData = data[slug_name];\n    data[slug_name] = { ...oldData,\n      is_wanting: true\n    };\n  }\n\n  return { ...state,\n    data\n  };\n}); // $channelStreamScheduleList.watch(console.log)\n\nconst $streamScheduleId = createStore({\n  loading: false,\n  data: {},\n  result: {},\n  error: false\n}).on(fetchStreamScheduleId.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchStreamScheduleId.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {},\n  result: {}\n})).on(fetchStreamScheduleId.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeWithKey({\n    response: result.data,\n    state,\n    key: params.schedule_id,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed\n  };\n}).on(postWantingScheduleIdMount, (state, params) => {\n  const schedule_id = params.schedule_id;\n  const slug_name = params.slug_name;\n  const data = { ...state.data\n  };\n\n  if (data[schedule_id]) {\n    const idx = data[slug_name].findIndex(item => !Array.isArray(item.id) === schedule_id);\n    const oldData = data[schedule_id][idx];\n    data[slug_name] = [...data[slug_name].slice(0, idx), { ...oldData,\n      is_wanting: true\n    }, ...data[slug_name].slice(idx + 1)];\n  }\n\n  return { ...state,\n    data\n  };\n});\nconst $streamChannelChat = createStore({\n  loading: false,\n  error: false,\n  data: []\n}).on(fetchStreamChannelChat.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchStreamChannelChat.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: []\n})).on(fetchStreamChannelChat.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed\n  };\n}).on(streamChannelWSChatMount, (state, payload) => {\n  return { ...state,\n    data: [payload, ...state.data]\n  };\n});\nexport const $streamModel = combine({\n  $stream,\n  $allStreamList,\n  $streamScheduleId,\n  $streamChannelChat,\n  $channelStreamScheduleList\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/stream-model/stores.js"],"names":["combine","createStore","postWantingScheduleIdMount","streamChannelWSChatMount","streamLiveWatchersMount","commonStoreList","storeListWithKey","storeWithKey","fetchAllStreamList","fetchChannelStreamSchedule","fetchStream","fetchStreamChannelChat","fetchStreamScheduleId","$allStreamList","loading","data","forceLoading","result","error","on","pending","state","fail","done","params","processed","response","clear","$stream","payload","watchers","live_watchers","count","Number","$channelStreamScheduleList","key","slug_name","schedule_id","oldData","is_wanting","$streamScheduleId","idx","findIndex","item","Array","isArray","id","slice","$streamChannelChat","$streamModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\r\nimport {postWantingScheduleIdMount, streamChannelWSChatMount, streamLiveWatchersMount} from './events'\r\nimport {commonStoreList, storeListWithKey, storeWithKey} from '../../utils/store-utils'\r\nimport {\r\n    fetchAllStreamList,\r\n    fetchChannelStreamSchedule,\r\n    fetchStream,\r\n    fetchStreamChannelChat,\r\n    fetchStreamScheduleId\r\n} from './effects'\r\n\r\nconst $allStreamList = createStore({loading: false, data: [], forceLoading: 0, result: {}, error: false})\r\n    .on(fetchAllStreamList.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAllStreamList.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchAllStreamList.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n\r\nconst $stream = createStore({loading: false, data: {}, error: false, forceLoading: 0})\r\n    .on(fetchStream.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchStream.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchStream.done, (state, {result, params}) => {\r\n        return {...state, data: result.data, forceLoading: 2}\r\n    })\r\n    .on(streamLiveWatchersMount, (state, payload) => {\r\n        let watchers = state?.data?.live_watchers\r\n        if (payload.count) {\r\n            watchers = Number(payload.count)\r\n            if(state.data){\r\n                state.data.live_watchers = watchers\r\n            }\r\n        }\r\n\r\n        return {\r\n            ...state,\r\n            data: state.data\r\n        }\r\n    })\r\n\r\nconst $channelStreamScheduleList = createStore({loading: false, data: {}, result: {}, error: false, forceLoading: 0})\r\n    .on(fetchChannelStreamSchedule.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchChannelStreamSchedule.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\r\n    }))\r\n    .on(fetchChannelStreamSchedule.done, (state, {params, result}) => {\r\n        const processed = storeListWithKey({\r\n            response: result.data, state, key: params.slug_name, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed, forceLoading: 2}\r\n    })\r\n    .on(postWantingScheduleIdMount, (state, params) => {\r\n        const slug_name = params.slug_name\r\n        const schedule_id = params.schedule_id\r\n        const data = {...state.data}\r\n        \r\n        if (data[schedule_id]) {\r\n            const oldData = data[slug_name]\r\n            data[slug_name] = {...oldData, is_wanting: true}\r\n        }\r\n        return {...state, data}\r\n    })\r\n\r\n// $channelStreamScheduleList.watch(console.log)\r\n\r\nconst $streamScheduleId = createStore({loading: false, data: {}, result: {}, error: false})\r\n    .on(fetchStreamScheduleId.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchStreamScheduleId.fail, (state, {error}) => ({\r\n        ...state, error, data: {}, result: {}\r\n    }))\r\n    .on(fetchStreamScheduleId.done, (state, {result, params}) => {\r\n        const processed = storeWithKey({\r\n            response: result.data, state, key: params.schedule_id, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed}\r\n    })\r\n    .on(postWantingScheduleIdMount, (state, params) => {\r\n        const schedule_id = params.schedule_id\r\n        const slug_name = params.slug_name\r\n        const data = {...state.data}\r\n        \r\n        if (data[schedule_id]) {\r\n            const idx = data[slug_name].findIndex(item => !Array.isArray(item.id) === schedule_id)\r\n            const oldData = data[schedule_id][idx]\r\n            data[slug_name] = [...data[slug_name].slice(0, idx), {\r\n                ...oldData, is_wanting: true\r\n            }, ...data[slug_name].slice(idx + 1)]\r\n        }\r\n        return {...state, data}\r\n    })\r\n\r\nconst $streamChannelChat = createStore({loading: false, error: false, data: []})\r\n    .on(fetchStreamChannelChat.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchStreamChannelChat.fail, (state, {error}) => ({\r\n        ...state, error, data: []\r\n    }))\r\n    .on(fetchStreamChannelChat.done, (state, {result, params}) => {\r\n        const processed = commonStoreList({\r\n            response: result.data, state, clear: params.clear, ...params.params\r\n        })\r\n        return {...state, ...processed}\r\n    })\r\n    .on(streamChannelWSChatMount, (state, payload) => {\r\n        \r\n        return {\r\n            ...state,\r\n            data: [payload, ...state.data]\r\n        }\r\n    })\r\n\r\n\r\nexport const $streamModel = combine({\r\n    $stream,\r\n    $allStreamList,\r\n    $streamScheduleId,\r\n    $streamChannelChat,\r\n    $channelStreamScheduleList\r\n})"]},"metadata":{},"sourceType":"module"}