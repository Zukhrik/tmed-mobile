{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { useCallback } from 'react';\nimport { useStore } from 'effector-react';\nimport { tokenMount } from '../../Models/app';\nimport { useHistory } from 'react-router-dom';\nimport { $accountModel, getCurrentAccount } from '../../Models/account-model';\nimport { resetOrderCartList, resetOrgOrderCart } from '../../Models/order-model';\nimport account from '../../Service/account';\nexport function useAccountActions(setProfiles) {\n  const {\n    push\n  } = useHistory();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const handleClickItem = useCallback(e => {\n    if (e.name === 'change_account') {\n      setProfiles(true);\n    }\n\n    if (e.name === 'settings') {\n      push('/settings');\n    }\n\n    if (e.name === 'order_records') {\n      push('/records/order_records');\n    }\n\n    if (e.name === 'logout') {\n      Cookies.remove('token');\n      Cookies.remove('users');\n      Cookies.remove('refresh-token');\n      getCurrentAccount();\n      localStorage.removeItem('currentProfile');\n      tokenMount(null);\n      push('/');\n      resetOrgOrderCart();\n      resetOrderCartList();\n    }\n  }, [push, setProfiles]);\n  const handleClickLinkedUsers = useCallback(item => {\n    if (currentProfile.slug_name !== item.slug_name) {\n      if (Cookies.get('users')) {\n        let users = JSON.parse(Cookies.get('users'));\n        let result = null;\n\n        for (let i in users) {\n          if (users.hasOwnProperty(i)) {\n            if (i === item.slug_name) {\n              result = users[i];\n              break;\n            } else {\n              push('/sign-in');\n            }\n          }\n        }\n\n        const data = {\n          refresh: result.refresh\n        };\n        account.refreshToken(data).then(res => {\n          if (res) {\n            let users = {};\n\n            if (Cookies.get('users')) {\n              const oldUsers = JSON.parse(Cookies.get('users'));\n              users = oldUsers ? { ...oldUsers\n              } : {};\n            }\n\n            users[item.slug_name] = res.data;\n            Cookies.set('users', JSON.stringify(users));\n            Cookies.set('token', res.data.access);\n            Cookies.set('refresh-token', res.data.refresh);\n            tokenMount(res.data.access);\n            getCurrentAccount();\n          }\n        }).catch(error => {\n          console.log(error);\n        });\n      } else {\n        push('/sign-in');\n      }\n    }\n  }, [currentProfile, push]);\n  return {\n    handleClickItem,\n    handleClickLinkedUsers\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/account/use-account-actions.js"],"names":["Cookies","useCallback","useStore","tokenMount","useHistory","$accountModel","getCurrentAccount","resetOrderCartList","resetOrgOrderCart","account","useAccountActions","setProfiles","push","$profiles","currentProfile","handleClickItem","e","name","remove","localStorage","removeItem","handleClickLinkedUsers","item","slug_name","get","users","JSON","parse","result","i","hasOwnProperty","data","refresh","refreshToken","then","res","oldUsers","set","stringify","access","catch","error","console","log"],"mappings":"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","sourcesContent":["import Cookies from 'js-cookie'\nimport {useCallback} from 'react'\nimport {useStore} from 'effector-react'\nimport {tokenMount} from '../../Models/app'\nimport {useHistory} from 'react-router-dom'\nimport {$accountModel, getCurrentAccount} from '../../Models/account-model'\nimport {resetOrderCartList, resetOrgOrderCart} from '../../Models/order-model'\nimport account from '../../Service/account'\n\nexport function useAccountActions(setProfiles) {\n    const {push} = useHistory()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    \n    const handleClickItem = useCallback((e) => {\n        if (e.name === 'change_account') {\n            setProfiles(true)\n        }\n        \n        if (e.name === 'settings') {\n            push('/settings')\n        }\n        \n        if (e.name === 'order_records') {\n            push('/records/order_records')\n        }\n        \n        if (e.name === 'logout') {\n            Cookies.remove('token')\n            Cookies.remove('users')\n            Cookies.remove('refresh-token')\n            getCurrentAccount()\n            localStorage.removeItem('currentProfile')\n            tokenMount(null)\n            push('/')\n            resetOrgOrderCart()\n            resetOrderCartList()\n        }\n    }, [push, setProfiles])\n    \n    \n    const handleClickLinkedUsers = useCallback((item) => {\n        if (currentProfile.slug_name !== item.slug_name) {\n            if (Cookies.get('users')) {\n                let users = JSON.parse(Cookies.get('users'))\n                let result = null\n                \n                for (let i in users) {\n                    if (users.hasOwnProperty(i)) {\n                        if (i === item.slug_name) {\n                            result = users[i]\n                            break\n                        } else {\n                            push('/sign-in')\n                        }\n                    }\n                }\n                \n                const data = {\n                    refresh: result.refresh\n                }\n                \n                account.refreshToken(data)\n                    .then(res => {\n                        if (res) {\n                            let users = {}\n                            if (Cookies.get('users')) {\n                                const oldUsers = JSON.parse(Cookies.get('users'))\n                                users = oldUsers ? {...oldUsers} : {}\n                            }\n                            users[item.slug_name] = res.data\n                            Cookies.set('users', JSON.stringify(users))\n                            Cookies.set('token', res.data.access)\n                            Cookies.set('refresh-token', res.data.refresh)\n                            tokenMount(res.data.access)\n                            getCurrentAccount()\n                        }\n                    })\n                    .catch((error) => {\n                        console.log(error)\n                    })\n            } else {\n                push('/sign-in')\n            }\n        }\n    }, [currentProfile, push])\n    \n    return {handleClickItem, handleClickLinkedUsers}\n}"]},"metadata":{},"sourceType":"module"}