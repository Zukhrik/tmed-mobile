{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx\";\nimport React, { useMemo, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { OfferingListWrapper } from '../style';\nimport { $appModel, changeSpecPanel, switchOrgGroupPanel } from '../../../Models/app';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { useOfferingList } from '../../../Hooks/offerings';\nimport { AuthModal } from '../../../UIComponents/AuthModal';\nimport { OverlaySettings } from '../../../Components/Overlay';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { OverlayAuth } from '../../../UIComponents/OverlayAuth';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { useOrgOrder, useOrgOrderList } from '../../../Hooks/order';\nimport { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { OverlayOfferingGroup, OverlaySpecialists } from '../../../Components/Offering/OrgOfferings';\nimport { useBodyOverflowHidden } from '../../../Hooks/app';\nimport { useInfiniteQuery } from 'react-query';\nimport orgApi from '../../../Service-v2/organization';\nconst skeleton = generateSkeleton(10, 100, 220);\nexport const OfferingsList = () => {\n  useOrgOrderList();\n  const {\n    organization\n  } = useParams();\n  const {\n    $app: {\n      token,\n      changeOrgGroupPanel,\n      showSpecPanel\n    },\n    $device\n  } = useStore($appModel);\n  useBodyOverflowHidden(changeOrgGroupPanel || showSpecPanel);\n  const {\n    loadMoreOfferings,\n    loadMoreOfferingGroup\n  } = useOfferingList();\n  const [auth, setAuth] = useState(false);\n  const {\n    currency,\n    checkoutOffering\n  } = useOrgOrder();\n  const [offeringItem, setOfferingItem] = useState(false); // const {$offeringsList: {data, result, loading, forceLoading}} = useStore($offeringsModel)\n\n  const {\n    isLoading,\n    hasNextPage,\n    fetchNextPage,\n    data\n  } = useInfiniteQuery(['/org/offerings', organization], async ({\n    pageParam = 0\n  }) => {\n    const params = {\n      limit: 10,\n      offset: pageParam\n    };\n    const res = await orgApi.getOrgOffering({\n      slug: organization,\n      params\n    });\n    return { ...res.data,\n      nextOffset: pageParam + 10\n    };\n  }, {\n    enabled: !!organization,\n    getNextPageParam: data => {\n      if (data.count - data.nextOffset > 10) {\n        return data === null || data === void 0 ? void 0 : data.nextOffset;\n      } else {\n        return undefined;\n      }\n    }\n  });\n\n  const handleClose = () => {\n    if (auth) {\n      setAuth(false);\n    }\n\n    setOfferingItem(false);\n  };\n\n  const list = useMemo(() => {\n    console.log(data === null || data === void 0 ? void 0 : data.pages);\n\n    if ((data === null || data === void 0 ? void 0 : data.pages) && (data === null || data === void 0 ? void 0 : data.pages.length) > 0) {\n      const arr = data === null || data === void 0 ? void 0 : data.pages;\n      let tmp = [];\n\n      for (let g of arr) {\n        tmp = [...tmp, ...g.result];\n      }\n\n      return tmp;\n    }\n\n    return [];\n  }, [data === null || data === void 0 ? void 0 : data.pages]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: changeOrgGroupPanel,\n    content: /*#__PURE__*/React.createElement(OverlayOfferingGroup, {\n      loadMore: loadMoreOfferingGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 26\n      }\n    }),\n    onClose: () => switchOrgGroupPanel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: showSpecPanel,\n    onClose: () => changeSpecPanel(false),\n    content: /*#__PURE__*/React.createElement(OverlaySpecialists, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }), $device && $device === INFO_MAT ? /*#__PURE__*/React.createElement(AuthModal, {\n    modalIsOpen: !!offeringItem,\n    action: () => checkoutOffering(offeringItem),\n    onCancel: () => setOfferingItem(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: offeringItem,\n    onClose: handleClose,\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      action: () => checkoutOffering(offeringItem),\n      auth: auth,\n      setAuth: setAuth,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: () => fetchNextPage(),\n    dataLength: 10,\n    hasMore: !isLoading && !!hasNextPage,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(OfferingListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    style: {\n      padding: '0 12px'\n    },\n    columnsCountBreakPoints: {\n      350: 2,\n      768: 2,\n      900: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 21\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx"],"names":["React","useMemo","useState","useStore","useParams","OfferingListWrapper","$appModel","changeSpecPanel","switchOrgGroupPanel","INFO_MAT","useOfferingList","AuthModal","OverlaySettings","InfiniteScroll","OverlayAuth","generateSkeleton","useOrgOrder","useOrgOrderList","ResponsiveMasonry","OverlayOfferingGroup","OverlaySpecialists","useBodyOverflowHidden","useInfiniteQuery","orgApi","skeleton","OfferingsList","organization","$app","token","changeOrgGroupPanel","showSpecPanel","$device","loadMoreOfferings","loadMoreOfferingGroup","auth","setAuth","currency","checkoutOffering","offeringItem","setOfferingItem","isLoading","hasNextPage","fetchNextPage","data","pageParam","params","limit","offset","res","getOrgOffering","slug","nextOffset","enabled","getNextPageParam","count","undefined","handleClose","list","console","log","pages","length","arr","tmp","g","result","padding"],"mappings":"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","sourcesContent":["import React, {useMemo, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {OfferingListWrapper} from '../style'\r\nimport {$appModel, changeSpecPanel, switchOrgGroupPanel} from '../../../Models/app'\r\nimport {INFO_MAT} from '../../../Constants/app'\r\nimport {useOfferingList} from '../../../Hooks/offerings'\r\nimport {AuthModal} from '../../../UIComponents/AuthModal'\r\nimport {OverlaySettings} from '../../../Components/Overlay'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {useOrgOrder, useOrgOrderList} from '../../../Hooks/order'\r\nimport {ResponsiveMasonry} from 'react-responsive-masonry'\r\nimport {OverlayOfferingGroup, OverlaySpecialists} from '../../../Components/Offering/OrgOfferings'\r\nimport {useBodyOverflowHidden} from '../../../Hooks/app'\r\nimport {useInfiniteQuery} from 'react-query'\r\nimport orgApi from '../../../Service-v2/organization'\r\n\r\nconst skeleton = generateSkeleton(10, 100, 220)\r\nexport const OfferingsList = () => {\r\n    useOrgOrderList()\r\n    const {organization} = useParams()\r\n    const {$app: {token, changeOrgGroupPanel, showSpecPanel}, $device} = useStore($appModel)\r\n    useBodyOverflowHidden(changeOrgGroupPanel || showSpecPanel)\r\n    const {loadMoreOfferings, loadMoreOfferingGroup} = useOfferingList()\r\n    const [auth, setAuth] = useState(false)\r\n    const {currency, checkoutOffering} = useOrgOrder()\r\n    const [offeringItem, setOfferingItem] = useState(false)\r\n    // const {$offeringsList: {data, result, loading, forceLoading}} = useStore($offeringsModel)\r\n    const {isLoading, hasNextPage, fetchNextPage, data} = useInfiniteQuery(\r\n        ['/org/offerings', organization],\r\n        async ({pageParam = 0}) => {\r\n            const params = {\r\n                limit: 10,\r\n                offset: pageParam\r\n            }\r\n            const res = await orgApi.getOrgOffering({slug: organization, params})\r\n            return {...res.data, nextOffset: pageParam + 10}\r\n        },\r\n        {\r\n            enabled: !!organization,\r\n            getNextPageParam: (data) => {\r\n                if (data.count - data.nextOffset > 10) {\r\n                    return data?.nextOffset\r\n                } else {\r\n                    return undefined\r\n                }\r\n            }\r\n        }\r\n    )\r\n    \r\n    const handleClose = () => {\r\n        if (auth) {\r\n            setAuth(false)\r\n        }\r\n        setOfferingItem(false)\r\n    }\r\n    \r\n    const list = useMemo(() => {\r\n        console.log(data?.pages)\r\n        if (data?.pages && data?.pages.length > 0) {\r\n            const arr = data?.pages\r\n            let tmp = []\r\n            for (let g of arr) {\r\n                tmp = [...tmp, ...g.result]\r\n            }\r\n            return tmp\r\n        }\r\n        return []\r\n    }, [data?.pages])\r\n    \r\n    return (\r\n        <>\r\n            <OverlaySettings\r\n                openSettings={changeOrgGroupPanel}\r\n                content={<OverlayOfferingGroup loadMore={loadMoreOfferingGroup}/>}\r\n                onClose={() => switchOrgGroupPanel(false)}\r\n            />\r\n            <OverlaySettings\r\n                openSettings={showSpecPanel}\r\n                onClose={() => changeSpecPanel(false)}\r\n                content={<OverlaySpecialists/>}\r\n            />\r\n            {\r\n                $device && $device === INFO_MAT\r\n                    ? <AuthModal\r\n                        modalIsOpen={!!offeringItem}\r\n                        action={() => checkoutOffering(offeringItem)}\r\n                        onCancel={() => setOfferingItem(null)}\r\n                    />\r\n                    : <OverlaySettings\r\n                        openSettings={offeringItem}\r\n                        onClose={handleClose}\r\n                        content={<OverlayAuth\r\n                            action={() => checkoutOffering(offeringItem)}\r\n                            auth={auth}\r\n                            setAuth={setAuth}\r\n                            onClose={handleClose}\r\n                        />}\r\n                    />\r\n            }\r\n            <InfiniteScroll\r\n                next={() => fetchNextPage()}\r\n                dataLength={10}\r\n                hasMore={!isLoading && !!hasNextPage}\r\n                loader={<>...loading</>}\r\n            >\r\n                <OfferingListWrapper>\r\n                    <ResponsiveMasonry\r\n                        style={{padding: '0 12px'}}\r\n                        columnsCountBreakPoints={{350: 2, 768: 2, 900: 3}}\r\n                    >\r\n                        {/*{*/}\r\n                        {/*    list && list.length > 0 && (*/}\r\n                        {/*        <Masorny gutter='8px'>*/}\r\n                        {/*            {*/}\r\n                        {/*                list.map((item) => {*/}\r\n                        {/*                    const offeringData = {*/}\r\n                        {/*                        id: item.id,*/}\r\n                        {/*                        qty: item.qty,*/}\r\n                        {/*                        name: item.name,*/}\r\n                        {/*                        image: item.image,*/}\r\n                        {/*                        currency: currency,*/}\r\n                        {/*                        loading: item.loading,*/}\r\n                        {/*                        inCart: item.is_in_cart,*/}\r\n                        {/*                        organization: organization,*/}\r\n                        {/*                        cost: numberFormat(item.cost),*/}\r\n                        {/*                        responsible: item.responsible,*/}\r\n                        {/*                        path: `/${organization}/offerings/${item.id}`*/}\r\n                        {/*                    }*/}\r\n                        {/*                    return (*/}\r\n                        {/*                        <ProductCard*/}\r\n                        {/*                            showBag*/}\r\n                        {/*                            key={item.id}*/}\r\n                        {/*                            item={offeringData}*/}\r\n                        {/*                            handleClick={(item) => {*/}\r\n                        {/*                                token ? checkoutOffering(item) : setOfferingItem(item)*/}\r\n                        {/*                            }}*/}\r\n                        {/*                        />*/}\r\n                        {/*                    )*/}\r\n                        {/*                })*/}\r\n                        {/*            }*/}\r\n                        {/*        </Masorny>*/}\r\n                        {/*    )*/}\r\n                        {/*}*/}\r\n                    </ResponsiveMasonry>\r\n                </OfferingListWrapper>\r\n            </InfiniteScroll>\r\n            {/*<Masorny gutter='12px'>*/}\r\n            {/*    {*/}\r\n            {/*        skeleton.map((item, idx) => (*/}\r\n            {/*            <ProductCardSkeleton*/}\r\n            {/*                key={`${idx + 1}`}*/}\r\n            {/*                imgSkeletonHeight={item}*/}\r\n            {/*            />*/}\r\n            {/*        ))*/}\r\n            {/*    }*/}\r\n            {/*</Masorny>*/}\r\n            {/*{*/}\r\n            {/*    result && result.count === 0 && (*/}\r\n            {/*        <EmptyContainerWrapper>*/}\r\n            {/*            <NoOfferingSvg/>*/}\r\n            {/*        </EmptyContainerWrapper>*/}\r\n            {/*    )*/}\r\n            {/*}*/}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}