{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Chat/NewChat/ChatTab/index.jsx\";\nimport React, { useCallback } from 'react';\nimport { useUrlParams } from '../../../../Hooks/app';\nimport { URL_KEYS, URL_VALUES } from '../../../../Constants';\nimport { Title } from '../../../../UIComponents/Typography/Title';\nimport { ChatSeparateTitle } from '../../style';\nimport { useTranslation } from 'react-i18next';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { $chatModel, chatAllGroupMount, chatAllUserMount } from '../../../../Models/chat-model';\nimport { useStore } from 'effector-react';\nexport const ChatNewTab = () => {\n  const {\n    urlData\n  } = useUrlParams();\n  const search = urlData[URL_KEYS.SEARCH];\n  const {\n    $searchContact: {\n      result\n    }\n  } = useStore($chatModel);\n  const {\n    pathname\n  } = useLocation();\n  const tab = urlData[URL_KEYS.TAB];\n  const {\n    t\n  } = useTranslation();\n  const handleClick = useCallback((id, requestFunc) => {\n    const params = {\n      clear: true,\n      params: {\n        limit: 20,\n        offset: 0,\n        search\n      }\n    };\n\n    if (!result[id] || result[id] && result[id].search !== search) {\n      requestFunc(params);\n    }\n  }, [result, search]);\n  const tabs = [{\n    id: URL_VALUES.PEOPLE,\n    title: 'users',\n    requestFunc: chatAllUserMount\n  }, // {\n  //     id: URL_VALUES.ORGANIZATION,\n  //     title: 'organizations',\n  //     requestFunc: chatAllOrgMount\n  // },\n  {\n    id: URL_VALUES.GROUP,\n    title: 'groups',\n    requestFunc: chatAllGroupMount\n  }];\n  const generatePath = useCallback(id => {\n    const query = [];\n    query.push(`${URL_KEYS.TAB}=${id}`);\n\n    if (search) {\n      query.push(`${URL_KEYS.SEARCH}=${search}`);\n    }\n\n    return {\n      pathname,\n      search: query.join('&')\n    };\n  }, [pathname, search]);\n  return /*#__PURE__*/React.createElement(ChatSeparateTitle, {\n    style: {\n      paddingLeft: search && 0,\n      paddingRight: search && 0,\n      marginBottom: search && 16\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }\n  }, search ? tabs.map(item => /*#__PURE__*/React.createElement(NavLink, {\n    key: item.id,\n    to: generatePath(item.id),\n    isActive: () => tab && tab === item.id,\n    onClick: () => handleClick(item.id, item.requestFunc),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 25\n    }\n  }, t(item.title))) : /*#__PURE__*/React.createElement(Title, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 25\n    }\n  }, t('contacts')));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Chat/NewChat/ChatTab/index.jsx"],"names":["React","useCallback","useUrlParams","URL_KEYS","URL_VALUES","Title","ChatSeparateTitle","useTranslation","NavLink","useLocation","$chatModel","chatAllGroupMount","chatAllUserMount","useStore","ChatNewTab","urlData","search","SEARCH","$searchContact","result","pathname","tab","TAB","t","handleClick","id","requestFunc","params","clear","limit","offset","tabs","PEOPLE","title","GROUP","generatePath","query","push","join","paddingLeft","paddingRight","marginBottom","map","item"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react'\r\nimport {useUrlParams} from '../../../../Hooks/app'\r\nimport {URL_KEYS, URL_VALUES} from '../../../../Constants'\r\nimport {Title} from '../../../../UIComponents/Typography/Title'\r\nimport {ChatSeparateTitle} from '../../style'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {NavLink, useLocation} from 'react-router-dom'\r\nimport {$chatModel, chatAllGroupMount, chatAllUserMount} from '../../../../Models/chat-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nexport const ChatNewTab = () => {\r\n    const {urlData} = useUrlParams()\r\n    const search = urlData[URL_KEYS.SEARCH]\r\n    const {$searchContact: {result}} = useStore($chatModel)\r\n    const {pathname} = useLocation()\r\n    const tab = urlData[URL_KEYS.TAB]\r\n    const {t} = useTranslation()\r\n\r\n\r\n    const handleClick = useCallback((id, requestFunc) => {\r\n        const params = {\r\n            clear: true,\r\n            params: {\r\n                limit: 20,\r\n                offset: 0,\r\n                search\r\n            }\r\n        }\r\n        if (!result[id] || (result[id] && result[id].search !== search)) {\r\n            requestFunc(params)\r\n        }\r\n    }, [result, search])\r\n\r\n    const tabs = [\r\n        {\r\n            id: URL_VALUES.PEOPLE,\r\n            title: 'users',\r\n            requestFunc: chatAllUserMount,\r\n        },\r\n        // {\r\n        //     id: URL_VALUES.ORGANIZATION,\r\n        //     title: 'organizations',\r\n        //     requestFunc: chatAllOrgMount\r\n        // },\r\n        {\r\n            id: URL_VALUES.GROUP,\r\n            title: 'groups',\r\n            requestFunc: chatAllGroupMount\r\n        }\r\n    ]\r\n\r\n    const generatePath = useCallback((id) => {\r\n        const query = []\r\n\r\n        query.push(`${URL_KEYS.TAB}=${id}`)\r\n\r\n        if (search) {\r\n            query.push(`${URL_KEYS.SEARCH}=${search}`)\r\n        }\r\n\r\n        return {\r\n            pathname,\r\n            search: query.join('&')\r\n        }\r\n    }, [pathname, search])\r\n\r\n\r\n    return (\r\n        <ChatSeparateTitle style={{paddingLeft: search && 0, paddingRight: search && 0, marginBottom: search && 16}}>\r\n            {\r\n                search\r\n                    ? tabs.map((item) => (\r\n                        <NavLink\r\n                            key={item.id}\r\n                            to={generatePath(item.id)}\r\n                            isActive={() => tab && tab === item.id}\r\n                            onClick={() => handleClick(item.id, item.requestFunc)}\r\n                        >\r\n                            {t(item.title)}\r\n                        </NavLink>\r\n                    ))\r\n                    : (\r\n                        <Title level={4}>\r\n                            {t('contacts')}\r\n                        </Title>\r\n                    )\r\n            }\r\n        </ChatSeparateTitle>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}