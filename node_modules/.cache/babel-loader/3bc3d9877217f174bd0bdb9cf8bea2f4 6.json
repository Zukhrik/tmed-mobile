{"ast":null,"code":"import _objectSpread from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from'react';import{useUrlParams}from'../app';import{URL_KEYS,URL_VALUES}from'../../Constants';import{$chatModel,allChatsMount,chatForceLoading}from'../../Models/chat-model';import{useHistory}from'react-router-dom';import{useStore}from'effector-react';var initialParams={limit:10,offset:0};export function useChatList(){var _useUrlParams=useUrlParams(),urlData=_useUrlParams.urlData;var chatTab=urlData[URL_KEYS.CHAT_TAB];var _useStore=useStore($chatModel),_useStore$$allChatLis=_useStore.$allChatList,userChatForceLoading=_useStore$$allChatLis.userChatForceLoading,groupChatForCeLoading=_useStore$$allChatLis.groupChatForCeLoading;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),mounted=_useState2[0],setMounted=_useState2[1];var _useHistory=useHistory(),push=_useHistory.push;var getList=useCallback(function(type,params){if(type===URL_VALUES.ALL_CHATS){allChatsMount(params);}if(type===URL_VALUES.GROUP_CHATS){}},[]);useEffect(function(){if(!chatTab){push({pathname:'/chat',search:\"\".concat(URL_KEYS.CHAT_TAB,\"=\").concat(URL_VALUES.ALL_CHATS)});}},[chatTab,push]);useEffect(function(){var timeout=null;timeout=setTimeout(function(){if(chatTab&&!mounted){var data={clear:true,params:_objectSpread(_objectSpread({},initialParams),{},{rtype:'user'})};chatForceLoading({type:chatTab});if(chatTab===URL_VALUES.ALL_CHATS&&userChatForceLoading===0){allChatsMount(data);}if(chatTab===URL_VALUES.GROUP_CHATS&&groupChatForCeLoading===0){}setMounted(true);}},300);return function(){clearTimeout(timeout);timeout=null;};},[getList,chatTab,mounted,userChatForceLoading,groupChatForCeLoading]);}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/chat/use-chat-list.js"],"names":["useCallback","useEffect","useState","useUrlParams","URL_KEYS","URL_VALUES","$chatModel","allChatsMount","chatForceLoading","useHistory","useStore","initialParams","limit","offset","useChatList","urlData","chatTab","CHAT_TAB","$allChatList","userChatForceLoading","groupChatForCeLoading","mounted","setMounted","push","getList","type","params","ALL_CHATS","GROUP_CHATS","pathname","search","timeout","setTimeout","data","clear","rtype","clearTimeout"],"mappings":"yUAAA,OAAQA,WAAR,CAAqBC,SAArB,CAAgCC,QAAhC,KAA+C,OAA/C,CACA,OAAQC,YAAR,KAA2B,QAA3B,CACA,OAAQC,QAAR,CAAkBC,UAAlB,KAAmC,iBAAnC,CACA,OAAQC,UAAR,CAAoBC,aAApB,CAAmCC,gBAAnC,KAA0D,yBAA1D,CACA,OAAQC,UAAR,KAAyB,kBAAzB,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CAEA,GAAMC,CAAAA,aAAa,CAAG,CAClBC,KAAK,CAAE,EADW,CAElBC,MAAM,CAAE,CAFU,CAAtB,CAKA,MAAO,SAASC,CAAAA,WAAT,EAAuB,CAC1B,kBAAkBX,YAAY,EAA9B,CAAOY,OAAP,eAAOA,OAAP,CACA,GAAMC,CAAAA,OAAO,CAAGD,OAAO,CAACX,QAAQ,CAACa,QAAV,CAAvB,CACA,cAEIP,QAAQ,CAACJ,UAAD,CAFZ,iCACIY,YADJ,CACmBC,oBADnB,uBACmBA,oBADnB,CACyCC,qBADzC,uBACyCA,qBADzC,CAGA,cAA8BlB,QAAQ,CAAC,KAAD,CAAtC,wCAAOmB,OAAP,eAAgBC,UAAhB,eACA,gBAAeb,UAAU,EAAzB,CAAOc,IAAP,aAAOA,IAAP,CAEA,GAAMC,CAAAA,OAAO,CAAGxB,WAAW,CAAC,SAACyB,IAAD,CAAOC,MAAP,CAAkB,CAE1C,GAAID,IAAI,GAAKpB,UAAU,CAACsB,SAAxB,CAAmC,CAC/BpB,aAAa,CAACmB,MAAD,CAAb,CACH,CAED,GAAID,IAAI,GAAKpB,UAAU,CAACuB,WAAxB,CAAqC,CACpC,CACJ,CAR0B,CAQxB,EARwB,CAA3B,CAUA3B,SAAS,CAAC,UAAM,CACZ,GAAI,CAACe,OAAL,CAAc,CACVO,IAAI,CAAC,CACDM,QAAQ,CAAE,OADT,CAEDC,MAAM,WAAK1B,QAAQ,CAACa,QAAd,aAA0BZ,UAAU,CAACsB,SAArC,CAFL,CAAD,CAAJ,CAIH,CACJ,CAPQ,CAON,CAACX,OAAD,CAAUO,IAAV,CAPM,CAAT,CASAtB,SAAS,CAAC,UAAM,CACZ,GAAI8B,CAAAA,OAAO,CAAG,IAAd,CAEAA,OAAO,CAAGC,UAAU,CAAC,UAAM,CACvB,GAAIhB,OAAO,EAAI,CAACK,OAAhB,CAAyB,CACrB,GAAMY,CAAAA,IAAI,CAAG,CACTC,KAAK,CAAE,IADE,CAETR,MAAM,gCACCf,aADD,MAEFwB,KAAK,CAAE,MAFL,EAFG,CAAb,CAOA3B,gBAAgB,CAAC,CAACiB,IAAI,CAAET,OAAP,CAAD,CAAhB,CAEA,GAAIA,OAAO,GAAKX,UAAU,CAACsB,SAAvB,EAAoCR,oBAAoB,GAAK,CAAjE,CAAoE,CAChEZ,aAAa,CAAC0B,IAAD,CAAb,CACH,CAED,GAAIjB,OAAO,GAAKX,UAAU,CAACuB,WAAvB,EAAsCR,qBAAqB,GAAK,CAApE,CAAuE,CACtE,CACDE,UAAU,CAAC,IAAD,CAAV,CACH,CACJ,CAnBmB,CAmBjB,GAnBiB,CAApB,CAqBA,MAAO,WAAM,CACTc,YAAY,CAACL,OAAD,CAAZ,CACAA,OAAO,CAAG,IAAV,CACH,CAHD,CAIH,CA5BQ,CA4BN,CAACP,OAAD,CAAUR,OAAV,CAAmBK,OAAnB,CAA4BF,oBAA5B,CAAkDC,qBAAlD,CA5BM,CAAT,CA6BH","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\r\nimport {useUrlParams} from '../app'\r\nimport {URL_KEYS, URL_VALUES} from '../../Constants'\r\nimport {$chatModel, allChatsMount, chatForceLoading} from '../../Models/chat-model'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 10,\r\n    offset: 0\r\n}\r\n\r\nexport function useChatList() {\r\n    const {urlData} = useUrlParams()\r\n    const chatTab = urlData[URL_KEYS.CHAT_TAB]\r\n    const {\r\n        $allChatList: {userChatForceLoading, groupChatForCeLoading},\r\n    } = useStore($chatModel)\r\n    const [mounted, setMounted] = useState(false)\r\n    const {push} = useHistory()\r\n\r\n    const getList = useCallback((type, params) => {\r\n        \r\n        if (type === URL_VALUES.ALL_CHATS) {\r\n            allChatsMount(params)\r\n        }\r\n\r\n        if (type === URL_VALUES.GROUP_CHATS) {\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!chatTab) {\r\n            push({\r\n                pathname: '/chat',\r\n                search: `${URL_KEYS.CHAT_TAB}=${URL_VALUES.ALL_CHATS}`\r\n            })\r\n        }\r\n    }, [chatTab, push])\r\n\r\n    useEffect(() => {\r\n        let timeout = null\r\n\r\n        timeout = setTimeout(() => {\r\n            if (chatTab && !mounted) {\r\n                const data = {\r\n                    clear: true,\r\n                    params: {\r\n                        ...initialParams,\r\n                        rtype: 'user'\r\n                    }\r\n                }\r\n                chatForceLoading({type: chatTab})\r\n\r\n                if (chatTab === URL_VALUES.ALL_CHATS && userChatForceLoading === 0) {\r\n                    allChatsMount(data)\r\n                }\r\n\r\n                if (chatTab === URL_VALUES.GROUP_CHATS && groupChatForCeLoading === 0) {\r\n                }\r\n                setMounted(true)\r\n            }\r\n        }, 300)\r\n\r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [getList, chatTab, mounted, userChatForceLoading, groupChatForCeLoading])\r\n}"]},"metadata":{},"sourceType":"module"}