{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx\";\nimport React, { Fragment, useCallback, useEffect, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport { useLocation } from 'react-router-dom';\nimport { INFO_MAT } from '../../Constants/app';\nimport { useChatCommon } from '../../Hooks/chat';\nimport { AuthModal } from '../../UIComponents/AuthModal';\nimport { IconBox } from '../../UIComponents/GlobalStyles';\nimport { $accountModel } from '../../Models/account-model';\nimport { bottomNavbarWithoutToken, bottomNavbarWithToken } from '../../data';\nimport { BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper } from './style';\nlet prevScrollpos = window.pageYOffset;\ngit;\nexport const BottomNavBar = () => {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    getChatList\n  } = useChatCommon();\n  const [show, setShow] = useState(null);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const {\n    $app: {\n      token\n    },\n    $socketCounters,\n    $device\n  } = useStore($appModel);\n\n  const generateCustomPath = id => {\n    const customPath = currentProfile && `${currentProfile.url}/tape`;\n    return id.indexOf('profile') !== -1 && customPath;\n  };\n\n  const generateAction = id => {\n    switch (id) {\n      case 'chat':\n        return getChatList;\n\n      default:\n        return false;\n    }\n  };\n\n  const getActive = useCallback(id => {\n    if (id === '/profile') {\n      if (currentProfile) {\n        return pathname.indexOf(currentProfile.slug_name) !== -1;\n      }\n    } else {\n      return pathname === id;\n    }\n  }, [currentProfile, pathname]);\n  const showHideBottomNavbar = useCallback(() => {\n    const currentScrollPos = window.pageYOffset;\n\n    if (prevScrollpos > currentScrollPos) {\n      setShow(0);\n    } else {\n      setShow(-60);\n    }\n\n    prevScrollpos = currentScrollPos;\n  }, []);\n  useEffect(() => {\n    showHideBottomNavbar();\n    window.addEventListener('scroll', showHideBottomNavbar);\n    return () => {\n      window.removeEventListener('scroll', showHideBottomNavbar);\n    };\n  }, [showHideBottomNavbar]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AuthModal, {\n    title: false,\n    modalIsOpen: modalIsOpen,\n    onCancel: () => setModalIsOpen(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(BottomNavWrapper, {\n    borderBottom: true,\n    className: show && 'hide',\n    style: {\n      display: $device && $device === INFO_MAT && 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NavLinkWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, $device && $device !== INFO_MAT ? token && currentProfile ? bottomNavbarWithToken.map(item => {\n    const Icon = item.icon;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: item.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 41\n      }\n    }, item.id === 'tape' ? /*#__PURE__*/React.createElement(React.Fragment, null, $device && $device !== INFO_MAT && /*#__PURE__*/React.createElement(NavLinkItem, {\n      isActive: () => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`),\n      onClick: () => item.onClick(generateAction(item.id)),\n      to: item.generatePath(item.path, generateCustomPath(item.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(IconBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 73\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 77\n      }\n    }), item.socketKey && !!$socketCounters[item.socketKey] && /*#__PURE__*/React.createElement(BottomNavbarCounter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 85\n      }\n    }, $socketCounters[item.socketKey])))) : /*#__PURE__*/React.createElement(NavLinkItem, {\n      isActive: () => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`),\n      onClick: () => item.onClick(generateAction(item.id)),\n      to: item.generatePath(item.path, generateCustomPath(item.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 57\n      }\n    }, /*#__PURE__*/React.createElement(IconBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 61\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 65\n      }\n    }), item.socketKey && !!$socketCounters[item.socketKey] && /*#__PURE__*/React.createElement(BottomNavbarCounter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 73\n      }\n    }, $socketCounters[item.socketKey]))));\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, $device && $device !== INFO_MAT && bottomNavbarWithoutToken.map((item, idx) => {\n    const Icon = item.icon;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: `${idx + 1}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 49\n      }\n    }, item.path === '/sign-in' ? /*#__PURE__*/React.createElement(BottomNavbarItem, {\n      onClick: () => setModalIsOpen(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 63\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 65\n      }\n    })) : /*#__PURE__*/React.createElement(NavLinkItem, {\n      isActive: () => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`),\n      onClick: () => item.onClick(generateAction(item.id)),\n      to: item.generatePath(item.path, generateCustomPath(item.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 64\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 69\n      }\n    })));\n  })) : '')));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx"],"names":["React","Fragment","useCallback","useEffect","useState","useStore","$appModel","useLocation","INFO_MAT","useChatCommon","AuthModal","IconBox","$accountModel","bottomNavbarWithoutToken","bottomNavbarWithToken","BottomNavbarCounter","BottomNavbarItem","BottomNavWrapper","NavLinkItem","NavLinkWrapper","prevScrollpos","window","pageYOffset","git","BottomNavBar","pathname","getChatList","show","setShow","$profiles","currentProfile","modalIsOpen","setModalIsOpen","$app","token","$socketCounters","$device","generateCustomPath","id","customPath","url","indexOf","generateAction","getActive","slug_name","showHideBottomNavbar","currentScrollPos","addEventListener","removeEventListener","display","map","item","Icon","icon","onClick","generatePath","path","socketKey","idx"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useEffect, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\nimport {useLocation} from 'react-router-dom'\r\nimport {INFO_MAT} from '../../Constants/app'\r\nimport {useChatCommon} from '../../Hooks/chat'\r\nimport {AuthModal} from '../../UIComponents/AuthModal'\r\nimport {IconBox} from '../../UIComponents/GlobalStyles'\r\nimport {$accountModel} from '../../Models/account-model'\r\nimport {bottomNavbarWithoutToken, bottomNavbarWithToken} from '../../data'\r\nimport {BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper} from './style'\r\n\r\nlet prevScrollpos = window.pageYOffset\r\ngit\r\nexport const BottomNavBar = () => {\r\n    const {pathname} = useLocation()\r\n    const {getChatList} = useChatCommon()\r\n    const [show, setShow] = useState(null)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const [modalIsOpen, setModalIsOpen] = useState(false)\r\n    const {$app: {token}, $socketCounters, $device} = useStore($appModel)\r\n    \r\n    const generateCustomPath = (id) => {\r\n        const customPath = currentProfile && `${currentProfile.url}/tape`\r\n        return id.indexOf('profile') !== -1 && customPath\r\n    }\r\n    \r\n    const generateAction = (id) => {\r\n        switch (id) {\r\n            case 'chat':\r\n                return getChatList\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    \r\n    const getActive = useCallback((id) => {\r\n        if (id === '/profile') {\r\n            if (currentProfile) {\r\n                return pathname.indexOf(currentProfile.slug_name) !== -1\r\n            }\r\n        } else {\r\n            return pathname === id\r\n        }\r\n    }, [currentProfile, pathname])\r\n    \r\n    const showHideBottomNavbar = useCallback(() => {\r\n        const currentScrollPos = window.pageYOffset\r\n        if (prevScrollpos > currentScrollPos) {\r\n            setShow(0)\r\n        } else {\r\n            setShow(-60)\r\n        }\r\n        prevScrollpos = currentScrollPos\r\n    }, [])\r\n    \r\n    useEffect(() => {\r\n        showHideBottomNavbar()\r\n        window.addEventListener('scroll', showHideBottomNavbar)\r\n        \r\n        return () => {\r\n            window.removeEventListener('scroll', showHideBottomNavbar)\r\n        }\r\n    }, [showHideBottomNavbar])\r\n    \r\n    \r\n    return (\r\n        <>\r\n            <AuthModal\r\n                title={false}\r\n                modalIsOpen={modalIsOpen}\r\n                onCancel={() => setModalIsOpen(false)}\r\n            />\r\n            <BottomNavWrapper\r\n                borderBottom\r\n                className={show && 'hide'}\r\n                style={{display: $device && $device === INFO_MAT && 'none'}}\r\n            >\r\n                <NavLinkWrapper>\r\n                    {\r\n                        $device && $device !== INFO_MAT ? (\r\n                            token && currentProfile ? (\r\n                                bottomNavbarWithToken.map((item) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={item.icon}>\r\n                                            {\r\n                                                item.id === 'tape'\r\n                                                    ? (\r\n                                                        <>\r\n                                                            {\r\n                                                                $device && $device !== INFO_MAT && (\r\n                                                                    <NavLinkItem\r\n                                                                        isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                                        onClick={() => item.onClick(generateAction(item.id))}\r\n                                                                        to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                                    >\r\n                                                                        <IconBox>\r\n                                                                            <Icon/>\r\n                                                                            {\r\n                                                                                item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                                                    <BottomNavbarCounter>\r\n                                                                                        {$socketCounters[item.socketKey]}\r\n                                                                                    </BottomNavbarCounter>\r\n                                                                                )\r\n                                                                            }\r\n                                                                        </IconBox>\r\n                                                                    </NavLinkItem>\r\n                                                                )\r\n                                                            }\r\n                                                        </>\r\n                                                    )\r\n                                                    : (\r\n                                                        <NavLinkItem\r\n                                                            isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                            onClick={() => item.onClick(generateAction(item.id))}\r\n                                                            to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                        >\r\n                                                            <IconBox>\r\n                                                                <Icon/>\r\n                                                                {\r\n                                                                    item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                                        <BottomNavbarCounter>\r\n                                                                            {$socketCounters[item.socketKey]}\r\n                                                                        </BottomNavbarCounter>\r\n                                                                    )\r\n                                                                }\r\n                                                            </IconBox>\r\n                                                        </NavLinkItem>\r\n                                                    )\r\n                                            }\r\n                                        \r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            ) : (\r\n                                <>\r\n                                    {\r\n                                        $device && $device !== INFO_MAT && bottomNavbarWithoutToken.map((item, idx) => {\r\n                                            const Icon = item.icon\r\n                                            return (\r\n                                                <Fragment key={`${idx + 1}`}>\r\n                                                    {\r\n                                                        item.path === '/sign-in'\r\n                                                            ? <BottomNavbarItem onClick={() => setModalIsOpen(true)}>\r\n                                                                <Icon/>\r\n                                                            </BottomNavbarItem>\r\n                                                            : (<NavLinkItem\r\n                                                                    isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                                    onClick={() => item.onClick(generateAction(item.id))}\r\n                                                                    to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                                >\r\n                                                                    <Icon/>\r\n                                                                </NavLinkItem>\r\n                                                            )\r\n                                                    }\r\n                                                </Fragment>\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </>\r\n                            )\r\n                        ) : ''\r\n                    }\r\n                </NavLinkWrapper>\r\n            </BottomNavWrapper>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}