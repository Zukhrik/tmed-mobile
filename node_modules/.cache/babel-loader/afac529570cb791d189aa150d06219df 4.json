{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx\";\nimport React, { Fragment, useCallback, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport { useLocation } from 'react-router-dom';\nimport { useChatCommon } from '../../Hooks/chat';\nimport { IconBox } from '../../UIComponents/GlobalStyles';\nimport { $accountModel } from '../../Models/account-model';\nimport { bottomNavbarWithoutToken, bottomNavbarWithToken } from '../../data';\nimport { BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper } from './style';\nimport { OverlayAuth } from '../../UIComponents/OverlayAuth';\nimport { OverlaySettings } from '../Overlay';\nexport const BottomNavBar = () => {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    getChatList\n  } = useChatCommon();\n  const [auth, setAuth] = useState(false);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    $app: {\n      token\n    },\n    $socketCounters\n  } = useStore($appModel);\n\n  const generateCustomPath = id => {\n    const customPath = currentProfile && `${currentProfile.url}`;\n    return id.indexOf('profile') !== -1 && customPath;\n  };\n\n  const generateAction = id => {\n    switch (id) {\n      case 'chat':\n        return getChatList;\n\n      default:\n        return false;\n    }\n  };\n\n  const getActive = useCallback(id => {\n    if (id === '/profile') {\n      if (currentProfile) {\n        return pathname.indexOf(currentProfile.slug_name) !== -1;\n      }\n    } else if (id === '/records' && pathname.slice(0, 7) === '/records') {\n      return pathname === id;\n    } else {\n      return pathname === id;\n    }\n  }, [currentProfile, pathname]);\n  console.log(pathname.slice(0, 8) === '/records');\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: auth,\n    onClose: () => setAuth(false),\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      auth: auth,\n      setAuth: setAuth,\n      onClose: () => setAuth(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(BottomNavWrapper, {\n    borderBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(NavLinkWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }, token && currentProfile ? bottomNavbarWithToken.map(item => {\n    const Icon = item.icon;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: item.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(NavLinkItem, {\n      isActive: () => getActive(`${item.id === 'org' ? '/' : `/${item.id}`}`),\n      onClick: () => item.onClick(generateAction(item.id)),\n      to: item.generatePath(item.path, generateCustomPath(item.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(IconBox, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 49\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 53\n      }\n    }), item.socketKey && !!$socketCounters[item.socketKey] && /*#__PURE__*/React.createElement(BottomNavbarCounter, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 61\n      }\n    }, $socketCounters[item.socketKey]))));\n  }) : bottomNavbarWithoutToken.map((item, idx) => {\n    const Icon = item.icon;\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: `${idx + 1}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 41\n      }\n    }, item.path === '/sign-in' ? /*#__PURE__*/React.createElement(BottomNavbarItem, {\n      onClick: () => setAuth(true),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 55\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 57\n      }\n    })) : /*#__PURE__*/React.createElement(NavLinkItem, {\n      isActive: () => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`),\n      onClick: () => item.onClick(generateAction(item.id)),\n      to: item.generatePath(item.path, generateCustomPath(item.id)),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 56\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 61\n      }\n    })));\n  }))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/BottomNavBar/index.jsx"],"names":["React","Fragment","useCallback","useState","useStore","$appModel","useLocation","useChatCommon","IconBox","$accountModel","bottomNavbarWithoutToken","bottomNavbarWithToken","BottomNavbarCounter","BottomNavbarItem","BottomNavWrapper","NavLinkItem","NavLinkWrapper","OverlayAuth","OverlaySettings","BottomNavBar","pathname","getChatList","auth","setAuth","$profiles","currentProfile","$app","token","$socketCounters","generateCustomPath","id","customPath","url","indexOf","generateAction","getActive","slug_name","slice","console","log","map","item","Icon","icon","onClick","generatePath","path","socketKey","idx"],"mappings":"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","sourcesContent":["import React, {Fragment, useCallback, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {$appModel} from '../../Models/app'\r\nimport {useLocation} from 'react-router-dom'\r\nimport {useChatCommon} from '../../Hooks/chat'\r\nimport {IconBox} from '../../UIComponents/GlobalStyles'\r\nimport {$accountModel} from '../../Models/account-model'\r\nimport {bottomNavbarWithoutToken, bottomNavbarWithToken} from '../../data'\r\nimport {BottomNavbarCounter, BottomNavbarItem, BottomNavWrapper, NavLinkItem, NavLinkWrapper} from './style'\r\nimport {OverlayAuth} from '../../UIComponents/OverlayAuth'\r\nimport {OverlaySettings} from '../Overlay'\r\n\r\n\r\nexport const BottomNavBar = () => {\r\n    const {pathname} = useLocation()\r\n    const {getChatList} = useChatCommon()\r\n    const [auth, setAuth] = useState(false)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {$app: {token}, $socketCounters} = useStore($appModel)\r\n    \r\n    const generateCustomPath = (id) => {\r\n        const customPath = currentProfile && `${currentProfile.url}`\r\n        return id.indexOf('profile') !== -1 && customPath\r\n    }\r\n    \r\n    const generateAction = (id) => {\r\n        switch (id) {\r\n            case 'chat':\r\n                return getChatList\r\n            default:\r\n                return false\r\n        }\r\n    }\r\n    \r\n    const getActive = useCallback((id) => {\r\n        if (id === '/profile') {\r\n            if (currentProfile) {\r\n                return pathname.indexOf(currentProfile.slug_name) !== -1\r\n            }\r\n        } else if (id === '/records' && pathname.slice(0, 7) === '/records') {\r\n            return pathname === id\r\n        } else {\r\n            return pathname === id\r\n        }\r\n    }, [currentProfile, pathname])\r\n    \r\n    console.log(pathname.slice(0, 8) === '/records')\r\n    \r\n    return (\r\n        <>\r\n            <OverlaySettings\r\n                openSettings={auth}\r\n                onClose={() => setAuth(false)}\r\n                content={<OverlayAuth\r\n                    auth={auth}\r\n                    setAuth={setAuth}\r\n                    onClose={() => setAuth(false)}\r\n                />}\r\n            />\r\n            <BottomNavWrapper borderBottom>\r\n                <NavLinkWrapper>\r\n                    {\r\n                        token && currentProfile\r\n                            ? (\r\n                                bottomNavbarWithToken.map((item) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={item.icon}>\r\n                                            <NavLinkItem\r\n                                                isActive={() => getActive(`${item.id === 'org'\r\n                                                    ? '/'\r\n                                                    : `/${item.id}`}`)\r\n                                                }\r\n                                                onClick={() => item.onClick(generateAction(item.id))}\r\n                                                to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                            >\r\n                                                <IconBox>\r\n                                                    <Icon/>\r\n                                                    {\r\n                                                        item.socketKey && !!$socketCounters[item.socketKey] && (\r\n                                                            <BottomNavbarCounter>\r\n                                                                {$socketCounters[item.socketKey]}\r\n                                                            </BottomNavbarCounter>\r\n                                                        )\r\n                                                    }\r\n                                                </IconBox>\r\n                                            </NavLinkItem>\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            ) : (\r\n                                bottomNavbarWithoutToken.map((item, idx) => {\r\n                                    const Icon = item.icon\r\n                                    return (\r\n                                        <Fragment key={`${idx + 1}`}>\r\n                                            {\r\n                                                item.path === '/sign-in'\r\n                                                    ? <BottomNavbarItem onClick={() => setAuth(true)}>\r\n                                                        <Icon/>\r\n                                                    </BottomNavbarItem>\r\n                                                    : (<NavLinkItem\r\n                                                            isActive={() => getActive(`${item.id === 'tape' ? '/' : `/${item.id}`}`)}\r\n                                                            onClick={() => item.onClick(generateAction(item.id))}\r\n                                                            to={item.generatePath(item.path, generateCustomPath(item.id))}\r\n                                                        >\r\n                                                            <Icon/>\r\n                                                        </NavLinkItem>\r\n                                                    )\r\n                                            }\r\n                                        </Fragment>\r\n                                    )\r\n                                })\r\n                            )\r\n                    }\r\n                </NavLinkWrapper>\r\n            </BottomNavWrapper>\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}