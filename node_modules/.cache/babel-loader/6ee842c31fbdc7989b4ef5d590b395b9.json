{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport useWebSocket from 'react-use-websocket';\nimport { onlineUserMount } from '../../Models/user-model';\nexport function useCommonWs() {\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const [generalWSUrl, setGeneralWSUrl] = useState(null);\n  const [time, setTime] = useState(null); // const [closed, setClosed] = useState({})\n\n  const [tabVisibility, setTabVisibility] = useState(null);\n  const {\n    sendMessage\n  } = useWebSocket(generalWSUrl, {\n    onMessage: e => {\n      const data = JSON.parse(e.data); // console.log(data)\n\n      if (data.type === 'online_status') {\n        const msg = {\n          [data.object.username]: {\n            time: new Date().getTime()\n          }\n        };\n        onlineUserMount(msg);\n      }\n    },\n    onOpen: e => {// console.log(e)\n      // setClosed({})\n    },\n    onClose: e => {// console.log(e)\n      // setClosed({general: true})\n    },\n    onError: e => {\n      console.log('error from use-common-ws in app hook');\n    }\n  });\n  useEffect(() => {\n    if (token) {\n      setGeneralWSUrl(`wss://py.dwed.biz/ws/v1.0/user/general/?token=${token}`);\n    } else {\n      setGeneralWSUrl(null);\n    }\n  }, [token]);\n  const getTabVisibility = useCallback(() => {\n    if (document.visibilityState === 'visible') {\n      setTabVisibility(document.visibilityState);\n    }\n\n    if (document.visibilityState === 'hidden') {\n      setTabVisibility(null);\n      setTime(null);\n    }\n  }, []);\n  useEffect(() => {\n    getTabVisibility();\n    window.addEventListener('visibilitychange', getTabVisibility);\n    return () => window.removeEventListener('visibilityChange', getTabVisibility);\n  }, [getTabVisibility]);\n  useEffect(() => {\n    let timeout = null;\n\n    if (token) {\n      const data = {\n        im_online: '1'\n      };\n\n      if (!time) {\n        setTime(new Date().getTime());\n        sendMessage(JSON.stringify(data));\n      } else {\n        if (tabVisibility && tabVisibility === 'visible') {\n          timeout = setInterval(() => {\n            const now = new Date();\n\n            if (time && now.getTime() - time > 10000) {\n              setTime(now.getTime()); // console.log(now)\n\n              sendMessage(JSON.stringify(data));\n            }\n          }, 10000);\n        }\n      }\n    }\n\n    return () => {\n      clearInterval(timeout);\n      timeout = null;\n    };\n  }, [token, time, sendMessage, tabVisibility]);\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/app/use-common-ws.js"],"names":["useCallback","useEffect","useState","useStore","$appModel","useWebSocket","onlineUserMount","useCommonWs","$app","token","generalWSUrl","setGeneralWSUrl","time","setTime","tabVisibility","setTabVisibility","sendMessage","onMessage","e","data","JSON","parse","type","msg","object","username","Date","getTime","onOpen","onClose","onError","console","log","getTabVisibility","document","visibilityState","window","addEventListener","removeEventListener","timeout","im_online","stringify","setInterval","now","clearInterval"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../Models/app'\nimport useWebSocket from 'react-use-websocket'\nimport {onlineUserMount} from '../../Models/user-model'\n\nexport function useCommonWs() {\n    const {$app: {token}} = useStore($appModel)\n    const [generalWSUrl, setGeneralWSUrl] = useState(null)\n    const [time, setTime] = useState(null)\n    // const [closed, setClosed] = useState({})\n    const [tabVisibility, setTabVisibility] = useState(null)\n\n    const {sendMessage} = useWebSocket(generalWSUrl, {\n        onMessage: (e) => {\n            const data = JSON.parse(e.data)\n            // console.log(data)\n            if (data.type === 'online_status') {\n                const msg = {\n                    [data.object.username]: {time: new Date().getTime()}\n                }\n                onlineUserMount(msg)\n            }\n        },\n        onOpen: (e) => {\n            // console.log(e)\n            // setClosed({})\n        },\n        onClose: (e) => {\n            // console.log(e)\n            // setClosed({general: true})\n        },\n        onError: (e) => {\n            console.log('error from use-common-ws in app hook')\n        },\n    })\n\n    useEffect(() => {\n        if (token) {\n            setGeneralWSUrl(`wss://py.dwed.biz/ws/v1.0/user/general/?token=${token}`)\n        } else {\n            setGeneralWSUrl(null)\n        }\n    }, [token])\n\n    const getTabVisibility = useCallback(() => {\n        if (document.visibilityState === 'visible') {\n            setTabVisibility(document.visibilityState)\n        }\n        if (document.visibilityState === 'hidden') {\n            setTabVisibility(null)\n            setTime(null)\n        }\n    }, [])\n\n    useEffect(() => {\n        getTabVisibility()\n        window.addEventListener('visibilitychange', getTabVisibility)\n\n        return () => window.removeEventListener('visibilityChange', getTabVisibility)\n    }, [getTabVisibility])\n\n    useEffect(() => {\n        let timeout = null\n        if (token) {\n            const data = {\n                im_online: '1'\n            }\n            if (!time) {\n                setTime(new Date().getTime())\n                sendMessage(JSON.stringify(data))\n            } else {\n                if (tabVisibility && tabVisibility === 'visible') {\n                    timeout = setInterval(() => {\n                        const now = new Date()\n                        if (time && now.getTime() - time > 10000) {\n                            setTime(now.getTime())\n                            // console.log(now)\n                            sendMessage(JSON.stringify(data))\n                        }\n                    }, 10000)\n                }\n            }\n        }\n\n        return () => {\n            clearInterval(timeout)\n            timeout = null\n        }\n    }, [token, time, sendMessage, tabVisibility])\n}"]},"metadata":{},"sourceType":"module"}