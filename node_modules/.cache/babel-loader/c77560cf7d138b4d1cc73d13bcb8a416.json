{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessagesList/index.jsx\";\nimport React, { Fragment } from 'react';\nimport { MessageGroupDate, MessageGroupItem, MessagesScrollableTarget } from '../style';\nimport { getDWEDGroupOfChatTime } from '../../../utils/time-utils';\nimport { MessageItem } from '../MessageItem';\nimport { useStore } from 'effector-react';\nimport { $accountModel } from '../../../Models/account-model';\nimport { ChatOverlay } from '../../../Views/Chat/style';\nexport const MessagesList = ({\n  loadMore,\n  data,\n  height,\n  handleMsgClick,\n  popupShowed\n}) => {\n  const messageGroups = data && Object.keys(data);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  return /*#__PURE__*/React.createElement(MessagesScrollableTarget, {\n    onScroll: loadMore,\n    height: height,\n    id: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ChatOverlay, {\n    className: `blur-overlay${popupShowed ? ' active' : ''}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }\n  }), messageGroups && messageGroups.length > 0 && messageGroups.map(date => {\n    const group = data[date];\n    return /*#__PURE__*/React.createElement(MessageGroupItem, {\n      key: date,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(MessageGroupDate, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 29\n      }\n    }, getDWEDGroupOfChatTime(date)), group && group.length > 0 && group.map((item, idx, arr) => {\n      const sender = arr[idx + 1] && arr[idx + 1].sender;\n      const myAvatar = sender && sender.username !== currentProfile.slug_name && item.sender.avatar;\n      const partnerAvatar = sender && sender.username !== item.sender.username && item.sender.avatar;\n      const me = currentProfile && item.sender.username === currentProfile.slug_name;\n      return /*#__PURE__*/React.createElement(Fragment, {\n        key: item.id,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 41\n        }\n      }, /*#__PURE__*/React.createElement(MessageItem // showAvatar\n      , {\n        popupShowed: popupShowed,\n        me: me,\n        item: item,\n        avatar: me ? myAvatar : partnerAvatar,\n        handleMsgClick: handleMsgClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 45\n        }\n      }));\n    }));\n  }));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessagesList/index.jsx"],"names":["React","Fragment","MessageGroupDate","MessageGroupItem","MessagesScrollableTarget","getDWEDGroupOfChatTime","MessageItem","useStore","$accountModel","ChatOverlay","MessagesList","loadMore","data","height","handleMsgClick","popupShowed","messageGroups","Object","keys","$profiles","currentProfile","length","map","date","group","item","idx","arr","sender","myAvatar","username","slug_name","avatar","partnerAvatar","me","id"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,gBAAR,EAA0BC,gBAA1B,EAA4CC,wBAA5C,QAA2E,UAA3E;AACA,SAAQC,sBAAR,QAAqC,2BAArC;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,aAAR,QAA4B,+BAA5B;AACA,SAAQC,WAAR,QAA0B,2BAA1B;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,MAAjB;AAAyBC,EAAAA,cAAzB;AAAyCC,EAAAA;AAAzC,CAAD,KAA2D;AACnF,QAAMC,aAAa,GAAGJ,IAAI,IAAIK,MAAM,CAACC,IAAP,CAAYN,IAAZ,CAA9B;AACA,QAAM;AAACO,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgCb,QAAQ,CAACC,aAAD,CAA9C;AAEA,sBACI,oBAAC,wBAAD;AAA0B,IAAA,QAAQ,EAAEG,QAApC;AAA8C,IAAA,MAAM,EAAEE,MAAtD;AAA8D,IAAA,EAAE,EAAC,eAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AAAa,IAAA,SAAS,EAAG,eAAcE,WAAW,GAAG,SAAH,GAAe,EAAG,EAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGQC,aAAa,IAAIA,aAAa,CAACK,MAAd,GAAuB,CAAxC,IAA6CL,aAAa,CAACM,GAAd,CAAkBC,IAAI,IAAI;AACnE,UAAMC,KAAK,GAAGZ,IAAI,CAACW,IAAD,CAAlB;AACA,wBACI,oBAAC,gBAAD;AAAkB,MAAA,GAAG,EAAEA,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKlB,sBAAsB,CAACkB,IAAD,CAD3B,CADJ,EAKQC,KAAK,IAAIA,KAAK,CAACH,MAAN,GAAe,CAAxB,IAA6BG,KAAK,CAACF,GAAN,CAAU,CAACG,IAAD,EAAOC,GAAP,EAAYC,GAAZ,KAAoB;AACvD,YAAMC,MAAM,GAAGD,GAAG,CAACD,GAAG,GAAG,CAAP,CAAH,IAAgBC,GAAG,CAACD,GAAG,GAAG,CAAP,CAAH,CAAaE,MAA5C;AACA,YAAMC,QAAQ,GAAGD,MAAM,IAAIA,MAAM,CAACE,QAAP,KAAoBV,cAAc,CAACW,SAA7C,IAA0DN,IAAI,CAACG,MAAL,CAAYI,MAAvF;AACA,YAAMC,aAAa,GAAGL,MAAM,IAAIA,MAAM,CAACE,QAAP,KAAoBL,IAAI,CAACG,MAAL,CAAYE,QAA1C,IAAsDL,IAAI,CAACG,MAAL,CAAYI,MAAxF;AACA,YAAME,EAAE,GAAGd,cAAc,IAAIK,IAAI,CAACG,MAAL,CAAYE,QAAZ,KAAyBV,cAAc,CAACW,SAArE;AAEA,0BACI,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEN,IAAI,CAACU,EAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACI,oBAAC,WAAD,CACI;AADJ;AAEI,QAAA,WAAW,EAAEpB,WAFjB;AAGI,QAAA,EAAE,EAAEmB,EAHR;AAII,QAAA,IAAI,EAAET,IAJV;AAKI,QAAA,MAAM,EAAES,EAAE,GAAGL,QAAH,GAAcI,aAL5B;AAMI,QAAA,cAAc,EAAEnB,cANpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ,CADJ;AAYH,KAlB4B,CALrC,CADJ;AA4BH,GA9B4C,CAHrD,CADJ;AAsCH,CA1CM","sourcesContent":["import React, {Fragment} from 'react'\nimport {MessageGroupDate, MessageGroupItem, MessagesScrollableTarget} from '../style'\nimport {getDWEDGroupOfChatTime} from '../../../utils/time-utils'\nimport {MessageItem} from '../MessageItem'\nimport {useStore} from 'effector-react'\nimport {$accountModel} from '../../../Models/account-model'\nimport {ChatOverlay} from '../../../Views/Chat/style'\n\nexport const MessagesList = ({loadMore, data, height, handleMsgClick, popupShowed}) => {\n    const messageGroups = data && Object.keys(data)\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n\n    return (\n        <MessagesScrollableTarget onScroll={loadMore} height={height} id='scrollableDiv'>\n            <ChatOverlay className={`blur-overlay${popupShowed ? ' active' : ''}`}/>\n            {\n                messageGroups && messageGroups.length > 0 && messageGroups.map(date => {\n                    const group = data[date]\n                    return (\n                        <MessageGroupItem key={date}>\n                            <MessageGroupDate>\n                                {getDWEDGroupOfChatTime(date)}\n                            </MessageGroupDate>\n                            {\n                                group && group.length > 0 && group.map((item, idx, arr) => {\n                                    const sender = arr[idx + 1] && arr[idx + 1].sender\n                                    const myAvatar = sender && sender.username !== currentProfile.slug_name && item.sender.avatar\n                                    const partnerAvatar = sender && sender.username !== item.sender.username && item.sender.avatar\n                                    const me = currentProfile && item.sender.username === currentProfile.slug_name\n\n                                    return (\n                                        <Fragment key={item.id}>\n                                            <MessageItem\n                                                // showAvatar\n                                                popupShowed={popupShowed}\n                                                me={me}\n                                                item={item}\n                                                avatar={me ? myAvatar : partnerAvatar}\n                                                handleMsgClick={handleMsgClick}\n                                            />\n                                        </Fragment>\n                                    )\n                                })\n                            }\n                        </MessageGroupItem>\n                    )\n                })\n            }\n        </MessagesScrollableTarget>\n    )\n}"]},"metadata":{},"sourceType":"module"}