{"ast":null,"code":"import React from'react';import{Col,Row}from'antd';import{useStore}from'effector-react';import{$appModel}from'../../../../Models/app';import{CloseSvg}from'../../../../Icons/Close';import{INFO_MAT}from'../../../../Constants/app';import{Trans,useTranslation}from'react-i18next';import{RefreshSvg}from'../../../../Icons/refresh';import{Button}from'../../../../UIComponents/Button';import{InputUI}from'../../../../UIComponents/mu-inputs';import{Text}from'../../../../UIComponents/Typography/Text';import{Title}from'../../../../UIComponents/Typography/Title';import{Container}from'../../../../UIComponents/GlobalStyles';import{AuthForm,CloseModalForm,CountdownWrapper,StyledCountdown}from'../../style';export var ActivationForm=function ActivationForm(_ref){var formik=_ref.formik,onFinish=_ref.onFinish,deadline=_ref.deadline,showResend=_ref.showResend,resend=_ref.resend,phone=_ref.phone,onClose=_ref.onClose;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useStore=useStore($appModel),$device=_useStore.$device;return/*#__PURE__*/React.createElement(AuthForm,{onSubmit:formik.handleSubmit,style:{position:'relative'}},$device&&$device===INFO_MAT&&/*#__PURE__*/React.createElement(CloseModalForm,{onClick:function onClick(){return onClose();}},/*#__PURE__*/React.createElement(CloseSvg,null)),/*#__PURE__*/React.createElement(Container,null,/*#__PURE__*/React.createElement(Row,{gutter:[0,24],style:{marginBottom:0}},/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Title,{weight:500},t('SMS_confirmation'))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Text,null,/*#__PURE__*/React.createElement(Trans,{i18nKey:\"verify_code_sentence\"},{phone:phone},/*#__PURE__*/React.createElement(\"br\",null)))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(InputUI,{type:\"tel\",pattern:\"[0-9]*\",mask:\"9 9 9 9 9 9\",inputType:\"masked\",name:\"activation_code\",onBlur:formik.handleBlur,onChange:formik.handleChange,label:t('verification_code'),values:formik.values.activation_code,error:formik.touched.activation_code&&formik.errors.activation_code})),showResend?/*#__PURE__*/React.createElement(Button,{onClick:function onClick(){return resend();},size:\"l\",style:{boxShadow:'unset',color:'var(--dark-dwed)'}},/*#__PURE__*/React.createElement(RefreshSvg,null),t('send_again')):/*#__PURE__*/React.createElement(CountdownWrapper,{padding:\"0\"},/*#__PURE__*/React.createElement(Trans,{i18nKey:\"get_code_sentence\"},/*#__PURE__*/React.createElement(StyledCountdown,{value:deadline,format:\"s\",onFinish:onFinish}))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Button,{size:\"l\",variant:\"primary\",htmlType:\"submit\",disabled:formik.touched.activation_code&&!!formik.errors.activation_code||!formik.values.activation_code.match(/^(\\d\\s*){6}$/)},t('enter'))))));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Auth/FastAuth/ActivationForm/index.jsx"],"names":["React","Col","Row","useStore","$appModel","CloseSvg","INFO_MAT","Trans","useTranslation","RefreshSvg","Button","InputUI","Text","Title","Container","AuthForm","CloseModalForm","CountdownWrapper","StyledCountdown","ActivationForm","formik","onFinish","deadline","showResend","resend","phone","onClose","t","$device","handleSubmit","position","marginBottom","handleBlur","handleChange","values","activation_code","touched","errors","boxShadow","color","match"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../../../Models/app'\nimport {CloseSvg} from '../../../../Icons/Close'\nimport {INFO_MAT} from '../../../../Constants/app'\nimport {Trans, useTranslation} from 'react-i18next'\nimport {RefreshSvg} from '../../../../Icons/refresh'\nimport {Button} from '../../../../UIComponents/Button'\nimport {InputUI} from '../../../../UIComponents/mu-inputs'\nimport {Text} from '../../../../UIComponents/Typography/Text'\nimport {Title} from '../../../../UIComponents/Typography/Title'\nimport {Container} from '../../../../UIComponents/GlobalStyles'\nimport {AuthForm, CloseModalForm, CountdownWrapper, StyledCountdown} from '../../style'\n\nexport const ActivationForm = ({formik, onFinish, deadline, showResend, resend, phone, onClose}) => {\n    const {t} = useTranslation()\n    const {$device} = useStore($appModel)\n    \n    return (\n        <AuthForm onSubmit={formik.handleSubmit} style={{position: 'relative'}}>\n            {\n                $device && $device === INFO_MAT && (\n                    <CloseModalForm onClick={() => onClose()}>\n                        <CloseSvg/>\n                    </CloseModalForm>\n                )\n            }\n            <Container>\n                <Row gutter={[0, 24]} style={{marginBottom: 0}}>\n                    <Col span={24}>\n                        <Title weight={500}>{t('SMS_confirmation')}</Title>\n                    </Col>\n                    <Col span={24}>\n                        <Text>\n                            <Trans i18nKey='verify_code_sentence'>\n                                {{phone}}\n                                <br/>\n                            </Trans>\n                        </Text>\n                    </Col>\n                    <Col span={24}>\n                        <InputUI\n                            type='tel'\n                            pattern='[0-9]*'\n                            mask='9 9 9 9 9 9'\n                            inputType='masked'\n                            name='activation_code'\n                            onBlur={formik.handleBlur}\n                            onChange={formik.handleChange}\n                            label={t('verification_code')}\n                            values={formik.values.activation_code}\n                            error={formik.touched.activation_code && formik.errors.activation_code}\n                        />\n                    </Col>\n                    {\n                        showResend\n                            ? <Button\n                                onClick={() => resend()}\n                                size='l'\n                                style={{boxShadow: 'unset', color: 'var(--dark-dwed)'}}\n                            >\n                                <RefreshSvg/>\n                                {t('send_again')}\n                            </Button>\n                            : <CountdownWrapper padding='0'>\n                                <Trans i18nKey='get_code_sentence'>\n                                    <StyledCountdown value={deadline} format='s' onFinish={onFinish}/>\n                                </Trans>\n                            </CountdownWrapper>\n                    }\n                    <Col span={24}>\n                        <Button\n                            size='l'\n                            variant='primary'\n                            htmlType='submit'\n                            disabled={\n                                (formik.touched.activation_code && !!formik.errors.activation_code)\n                                || !formik.values.activation_code.match(/^(\\d\\s*){6}$/)\n                            }\n                        >\n                            {t('enter')}\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        </AuthForm>\n    )\n}"]},"metadata":{},"sourceType":"module"}