{"ast":null,"code":"import React from'react';import{Col,Row}from'antd';import{useStore}from'effector-react';import{TapeItems}from'../../TapeTypes';import{$appModel}from'../../../Models/app';import{INFO_MAT}from'../../../Constants/app';import{useAuthorTape}from'../../../Hooks/tape';import{PostSkeleton}from'../../Post/PostSkeleton';import{$tapeModel}from'../../../Models/tape-model';import{NoOfferingSvg}from'../../../Icons/NoOffering';import InfiniteScroll from'react-infinite-scroll-component';import{generateSkeleton}from'../../../utils/skeleton-utils';import{EmptyContainerWrapper,RootContent}from'../../../UIComponents/GlobalStyles';var skeleton=generateSkeleton(10);export var UserTape=function UserTape(){var _useAuthorTape=useAuthorTape(),loadMore=_useAuthorTape.loadMore;var _useStore=useStore($appModel),$device=_useStore.$device;var _useStore2=useStore($tapeModel),_useStore2$$authorTap=_useStore2.$authorTape,data=_useStore2$$authorTap.data,forceLoading=_useStore2$$authorTap.forceLoading,result=_useStore2$$authorTap.result,loading=_useStore2$$authorTap.loading;return/*#__PURE__*/React.createElement(RootContent,{paddingTop:$device&&$device===INFO_MAT&&'245px'},forceLoading===2?/*#__PURE__*/React.createElement(React.Fragment,null,data&&data.length>0?/*#__PURE__*/React.createElement(InfiniteScroll,{next:loadMore,hasMore:!loading&&!!(result===null||result===void 0?void 0:result.next),dataLength:(result===null||result===void 0?void 0:result.nextOffset)||10,loader:/*#__PURE__*/React.createElement(React.Fragment,null,\"...loading\")},/*#__PURE__*/React.createElement(React.Fragment,null,data.map(function(item,idx){return/*#__PURE__*/React.createElement(TapeItems,{key:\"\".concat(idx+1),data:item});}))):/*#__PURE__*/React.createElement(EmptyContainerWrapper,null,/*#__PURE__*/React.createElement(NoOfferingSvg,null))):/*#__PURE__*/React.createElement(Row,null,skeleton.map(function(item,idx){return/*#__PURE__*/React.createElement(Col,{span:24,key:\"\".concat(idx+1)},/*#__PURE__*/React.createElement(PostSkeleton,null));})));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/AccountComponents/UserTape/index.jsx"],"names":["React","Col","Row","useStore","TapeItems","$appModel","INFO_MAT","useAuthorTape","PostSkeleton","$tapeModel","NoOfferingSvg","InfiniteScroll","generateSkeleton","EmptyContainerWrapper","RootContent","skeleton","UserTape","loadMore","$device","$authorTape","data","forceLoading","result","loading","length","next","nextOffset","map","item","idx"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,GAAR,CAAaC,GAAb,KAAuB,MAAvB,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,KAAwB,iBAAxB,CACA,OAAQC,SAAR,KAAwB,qBAAxB,CACA,OAAQC,QAAR,KAAuB,wBAAvB,CACA,OAAQC,aAAR,KAA4B,qBAA5B,CACA,OAAQC,YAAR,KAA2B,yBAA3B,CACA,OAAQC,UAAR,KAAyB,4BAAzB,CACA,OAAQC,aAAR,KAA4B,2BAA5B,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,OAAQC,gBAAR,KAA+B,+BAA/B,CACA,OAAQC,qBAAR,CAA+BC,WAA/B,KAAiD,oCAAjD,CAEA,GAAMC,CAAAA,QAAQ,CAAGH,gBAAgB,CAAC,EAAD,CAAjC,CACA,MAAO,IAAMI,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CAC1B,mBAAmBT,aAAa,EAAhC,CAAOU,QAAP,gBAAOA,QAAP,CACA,cAAkBd,QAAQ,CAACE,SAAD,CAA1B,CAAOa,OAAP,WAAOA,OAAP,CACA,eAA6Df,QAAQ,CAACM,UAAD,CAArE,kCAAOU,WAAP,CAAqBC,IAArB,uBAAqBA,IAArB,CAA2BC,YAA3B,uBAA2BA,YAA3B,CAAyCC,MAAzC,uBAAyCA,MAAzC,CAAiDC,OAAjD,uBAAiDA,OAAjD,CAEA,mBACI,oBAAC,WAAD,EACI,UAAU,CAAEL,OAAO,EAAIA,OAAO,GAAKZ,QAAvB,EAAmC,OADnD,EAIQe,YAAY,GAAK,CAAjB,cAEQ,wCAEQD,IAAI,EAAIA,IAAI,CAACI,MAAL,CAAc,CAAtB,cACM,oBAAC,cAAD,EACE,IAAI,CAAEP,QADR,CAEE,OAAO,CAAE,CAACM,OAAD,EAAY,CAAC,EAACD,MAAD,SAACA,MAAD,iBAACA,MAAM,CAAEG,IAAT,CAFxB,CAGE,UAAU,CAAE,CAAAH,MAAM,OAAN,EAAAA,MAAM,SAAN,QAAAA,MAAM,CAAEI,UAAR,GAAsB,EAHpC,CAIE,MAAM,cAAE,qDAJV,eAME,wCAEQN,IAAI,CAACO,GAAL,CAAS,SAACC,IAAD,CAAOC,GAAP,qBACL,oBAAC,SAAD,EACI,GAAG,WAAKA,GAAG,CAAG,CAAX,CADP,CAEI,IAAI,CAAED,IAFV,EADK,EAAT,CAFR,CANF,CADN,cAkBM,oBAAC,qBAAD,mBACE,oBAAC,aAAD,MADF,CApBd,CAFR,cA2BQ,oBAAC,GAAD,MAEIb,QAAQ,CAACY,GAAT,CAAa,SAACC,IAAD,CAAOC,GAAP,qBACT,oBAAC,GAAD,EACI,IAAI,CAAE,EADV,CAEI,GAAG,WAAKA,GAAG,CAAG,CAAX,CAFP,eAII,oBAAC,YAAD,MAJJ,CADS,EAAb,CAFJ,CA/BhB,CADJ,CA+CH,CApDM","sourcesContent":["import React from 'react'\r\nimport {Col, Row} from 'antd'\r\nimport {useStore} from 'effector-react'\r\nimport {TapeItems} from '../../TapeTypes'\r\nimport {$appModel} from '../../../Models/app'\r\nimport {INFO_MAT} from '../../../Constants/app'\r\nimport {useAuthorTape} from '../../../Hooks/tape'\r\nimport {PostSkeleton} from '../../Post/PostSkeleton'\r\nimport {$tapeModel} from '../../../Models/tape-model'\r\nimport {NoOfferingSvg} from '../../../Icons/NoOffering'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {EmptyContainerWrapper, RootContent} from '../../../UIComponents/GlobalStyles'\r\n\r\nconst skeleton = generateSkeleton(10)\r\nexport const UserTape = () => {\r\n    const {loadMore} = useAuthorTape()\r\n    const {$device} = useStore($appModel)\r\n    const {$authorTape: {data, forceLoading, result, loading}} = useStore($tapeModel)\r\n    \r\n    return (\r\n        <RootContent\r\n            paddingTop={$device && $device === INFO_MAT && '245px'}\r\n        >\r\n            {\r\n                forceLoading === 2\r\n                    ? (\r\n                        <>\r\n                            {\r\n                                data && data.length > 0\r\n                                    ? <InfiniteScroll\r\n                                        next={loadMore}\r\n                                        hasMore={!loading && !!result?.next}\r\n                                        dataLength={result?.nextOffset || 10}\r\n                                        loader={<>...loading</>}\r\n                                    >\r\n                                        <>\r\n                                            {\r\n                                                data.map((item, idx) => (\r\n                                                    <TapeItems\r\n                                                        key={`${idx + 1}`}\r\n                                                        data={item}\r\n                                                    />\r\n                                                ))\r\n                                            }\r\n                                        </>\r\n                                    </InfiniteScroll>\r\n                                    : <EmptyContainerWrapper>\r\n                                        <NoOfferingSvg/>\r\n                                    </EmptyContainerWrapper>\r\n                            }\r\n                        </>\r\n                    ) : <Row>\r\n                        {\r\n                            skeleton.map((item, idx) => (\r\n                                <Col\r\n                                    span={24}\r\n                                    key={`${idx + 1}`}\r\n                                >\r\n                                    <PostSkeleton/>\r\n                                </Col>\r\n                            ))\r\n                        }\r\n                    </Row>\r\n            }\r\n        </RootContent>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}