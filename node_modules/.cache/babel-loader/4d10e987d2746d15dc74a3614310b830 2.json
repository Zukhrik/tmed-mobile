{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.attachSharedListeners = void 0;\n\nvar globals_1 = require(\"./globals\");\n\nvar constants_1 = require(\"./constants\");\n\nvar manage_subscribers_1 = require(\"./manage-subscribers\");\n\nvar socket_io_1 = require(\"./socket-io\");\n\nvar bindMessageHandler = function (webSocketInstance, url) {\n  webSocketInstance.onmessage = function (message) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onMessage) {\n        subscriber.optionsRef.current.onMessage(message);\n      }\n\n      if (typeof subscriber.optionsRef.current.filter === 'function' && subscriber.optionsRef.current.filter(message) !== true) {\n        return;\n      }\n\n      subscriber.setLastMessage(message);\n    });\n  };\n};\n\nvar bindOpenHandler = function (webSocketInstance, url) {\n  webSocketInstance.onopen = function (event) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      subscriber.reconnectCount.current = 0;\n\n      if (subscriber.optionsRef.current.onOpen) {\n        subscriber.optionsRef.current.onOpen(event);\n      }\n\n      subscriber.setReadyState(constants_1.ReadyState.OPEN);\n    });\n  };\n};\n\nvar bindCloseHandler = function (webSocketInstance, url) {\n  if (webSocketInstance instanceof WebSocket) {\n    webSocketInstance.onclose = function (event) {\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        if (subscriber.optionsRef.current.onClose) {\n          subscriber.optionsRef.current.onClose(event);\n        }\n\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      });\n      delete globals_1.sharedWebSockets[url];\n      manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n        var _a, _b;\n\n        if (subscriber.optionsRef.current.shouldReconnect && subscriber.optionsRef.current.shouldReconnect(event)) {\n          var reconnectAttempts = (_a = subscriber.optionsRef.current.reconnectAttempts) !== null && _a !== void 0 ? _a : constants_1.DEFAULT_RECONNECT_LIMIT;\n\n          if (subscriber.reconnectCount.current < reconnectAttempts) {\n            setTimeout(function () {\n              subscriber.reconnectCount.current++;\n              subscriber.reconnect.current();\n            }, (_b = subscriber.optionsRef.current.reconnectInterval) !== null && _b !== void 0 ? _b : constants_1.DEFAULT_RECONNECT_INTERVAL_MS);\n          } else {\n            subscriber.optionsRef.current.onReconnectStop && subscriber.optionsRef.current.onReconnectStop(subscriber.optionsRef.current.reconnectAttempts);\n            console.warn(\"Max reconnect attempts of \" + reconnectAttempts + \" exceeded\");\n          }\n        }\n      });\n    };\n  }\n};\n\nvar bindErrorHandler = function (webSocketInstance, url) {\n  webSocketInstance.onerror = function (error) {\n    manage_subscribers_1.getSubscribers(url).forEach(function (subscriber) {\n      if (subscriber.optionsRef.current.onError) {\n        subscriber.optionsRef.current.onError(error);\n      }\n\n      if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n        subscriber.optionsRef.current.onClose && subscriber.optionsRef.current.onClose(__assign(__assign({}, error), {\n          code: 1006,\n          reason: \"An error occurred with the EventSource: \" + error,\n          wasClean: false\n        }));\n        subscriber.setReadyState(constants_1.ReadyState.CLOSED);\n      }\n    });\n\n    if (constants_1.isEventSourceSupported && webSocketInstance instanceof EventSource) {\n      webSocketInstance.close();\n    }\n  };\n};\n\nexports.attachSharedListeners = function (webSocketInstance, url, optionsRef, sendMessage) {\n  var interval;\n\n  if (optionsRef.current.fromSocketIO) {\n    interval = socket_io_1.setUpSocketIOPing(sendMessage);\n  }\n\n  bindMessageHandler(webSocketInstance, url);\n  bindCloseHandler(webSocketInstance, url);\n  bindOpenHandler(webSocketInstance, url);\n  bindErrorHandler(webSocketInstance, url);\n  return function () {\n    if (interval) clearInterval(interval);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}