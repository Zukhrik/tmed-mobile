{"ast":null,"code":"import React from'react';import{Col,Row}from'antd';import{CreditCardDetailForm}from'../../style';import{Trans,useTranslation}from'react-i18next';import{PayMeSvg}from'../../../../../Icons/PayMe';import{StyledCountdown}from'../../../../Auth/style';import{RefreshSvg}from'../../../../../Icons/refresh';import{Button}from'../../../../../UIComponents/Button';import{InputUI}from'../../../../../UIComponents/mu-inputs';import{Title}from'../../../../../UIComponents/Typography/Title';export var CreateCard=function CreateCard(_ref){var _formik$values;var formik=_ref.formik,cardId=_ref.cardId,deadline=_ref.deadline,resendCode=_ref.resendCode,showResend=_ref.showResend,codeFormik=_ref.codeFormik,handleChange=_ref.handleChange,setShowResend=_ref.setShowResend,disabledButton=_ref.disabledButton,handleChangeCode=_ref.handleChangeCode,disabledButtonCode=_ref.disabledButtonCode;var _useTranslation=useTranslation(),t=_useTranslation.t;return/*#__PURE__*/React.createElement(React.Fragment,null,cardId?/*#__PURE__*/React.createElement(CreditCardDetailForm,{onSubmit:codeFormik.handleSubmit},/*#__PURE__*/React.createElement(Row,{gutter:[0,24]},/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Title,null,t('enter_code_activation'))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(PayMeSvg,null)),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(InputUI,{inputType:\"masked\",name:\"activate_code\",mask:\"9 9 9 9 9 9\",label:t('code_activation'),maskChar:\"*\",value:codeFormik.values.activate_code||'',onBlur:codeFormik.handleBlur,onChange:function onChange(e){return handleChangeCode('activate_code',e.target.value);},error:codeFormik.touched.activate_code&&codeFormik.errors.activate_code})),showResend?/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Button,{size:\"l\",onClick:function onClick(){return resendCode();}},/*#__PURE__*/React.createElement(RefreshSvg,null),t('send_again'))):/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Trans,{i18nKey:\"get_code_sentence\"},/*#__PURE__*/React.createElement(StyledCountdown,{format:\"s\",value:deadline,onFinish:function onFinish(){return setShowResend(true);}}))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Button,{size:\"l\",variant:\"primary\",htmlType:\"submit\",disabled:disabledButtonCode()},t('confirm'))))):/*#__PURE__*/React.createElement(CreditCardDetailForm,{onSubmit:formik.handleSubmit},/*#__PURE__*/React.createElement(Row,{gutter:[0,24]},/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Title,null,t('enter_bank_card_details'))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(PayMeSvg,null)),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(InputUI,{inputType:\"masked\",mask:\"9999 9999 9999 9999\",name:\"number\",maskChar:\"*\",onBlur:formik.handleBlur,label:t('enter_card_number'),value:formik.values.number||'',onChange:function onChange(e){return handleChange('number',e.target.value);},error:formik.touched.number&&formik.errors.number})),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(InputUI,{name:\"expire_date\",label:t('expiry_date'),inputType:\"keyboardDate\",placeholder:t('MM/YY'),format:\"MM/YY\",value:formik.values.expire_date||null,onBlur:formik.handleBlur,onChange:function onChange(value){return handleChange('expire_date',value);},error:formik.touched.expire_date&&formik.errors.expire_date})),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(InputUI,{name:\"name\",label:t('card_name'),value:((_formik$values=formik.values)===null||_formik$values===void 0?void 0:_formik$values.name)||'',onChange:function onChange(e){return handleChange('name',e.target.value);}})),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Button,{size:\"l\",variant:\"primary\",htmlType:\"submit\",disabled:disabledButton()},t('add'))))));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Checkout/InfoCard/CheckoutDetail/CreditCardDetail/CreateCard.jsx"],"names":["React","Col","Row","CreditCardDetailForm","Trans","useTranslation","PayMeSvg","StyledCountdown","RefreshSvg","Button","InputUI","Title","CreateCard","formik","cardId","deadline","resendCode","showResend","codeFormik","handleChange","setShowResend","disabledButton","handleChangeCode","disabledButtonCode","t","handleSubmit","values","activate_code","handleBlur","e","target","value","touched","errors","number","expire_date","name"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Col, Row} from 'antd'\nimport {CreditCardDetailForm} from '../../style'\nimport {Trans, useTranslation} from 'react-i18next'\nimport {PayMeSvg} from '../../../../../Icons/PayMe'\nimport {StyledCountdown} from '../../../../Auth/style'\nimport {RefreshSvg} from '../../../../../Icons/refresh'\nimport {Button} from '../../../../../UIComponents/Button'\nimport {InputUI} from '../../../../../UIComponents/mu-inputs'\nimport {Title} from '../../../../../UIComponents/Typography/Title'\n\nexport const CreateCard = (\n    {\n        formik,\n        cardId,\n        deadline,\n        resendCode,\n        showResend,\n        codeFormik,\n        handleChange,\n        setShowResend,\n        disabledButton,\n        handleChangeCode,\n        disabledButtonCode\n    }\n) => {\n    const {t} = useTranslation()\n    \n    return (\n        <>\n            {\n                cardId\n                    ? (\n                        <CreditCardDetailForm onSubmit={codeFormik.handleSubmit}>\n                            <Row gutter={[0, 24]}>\n                                <Col span={24}>\n                                    <Title>{t('enter_code_activation')}</Title>\n                                </Col>\n                                <Col span={24}>\n                                    <PayMeSvg/>\n                                </Col>\n                                <Col span={24}>\n                                    <InputUI\n                                        inputType='masked'\n                                        name='activate_code'\n                                        mask='9 9 9 9 9 9'\n                                        label={t('code_activation')}\n                                        maskChar='*'\n                                        value={codeFormik.values.activate_code || ''}\n                                        onBlur={codeFormik.handleBlur}\n                                        onChange={(e) => handleChangeCode('activate_code', e.target.value)}\n                                        error={codeFormik.touched.activate_code && codeFormik.errors.activate_code}\n                                    />\n                                </Col>\n                                {\n                                    showResend\n                                        ? (\n                                            <Col span={24}>\n                                                <Button\n                                                    size='l'\n                                                    onClick={() => resendCode()}\n                                                >\n                                                    <RefreshSvg/>\n                                                    {t('send_again')}\n                                                </Button>\n                                            </Col>\n                                        )\n                                        : (\n                                            <Col span={24}>\n                                                <Trans i18nKey='get_code_sentence'>\n                                                    <StyledCountdown\n                                                        format='s'\n                                                        value={deadline}\n                                                        onFinish={() => setShowResend(true)}\n                                                    />\n                                                </Trans>\n                                            </Col>\n                                        )\n                                }\n                                <Col span={24}>\n                                    <Button\n                                        size='l'\n                                        variant='primary'\n                                        htmlType='submit'\n                                        disabled={disabledButtonCode()}\n                                    >\n                                        {t('confirm')}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </CreditCardDetailForm>\n                    )\n                    : (\n                        <CreditCardDetailForm onSubmit={formik.handleSubmit}>\n                            <Row gutter={[0, 24]}>\n                                <Col span={24}>\n                                    <Title>{t('enter_bank_card_details')}</Title>\n                                </Col>\n                                <Col span={24}>\n                                    <PayMeSvg/>\n                                </Col>\n                                <Col span={24}>\n                                    <InputUI\n                                        inputType='masked'\n                                        mask='9999 9999 9999 9999'\n                                        name='number'\n                                        maskChar='*'\n                                        onBlur={formik.handleBlur}\n                                        label={t('enter_card_number')}\n                                        value={formik.values.number || ''}\n                                        onChange={(e) => handleChange('number', e.target.value)}\n                                        error={formik.touched.number && formik.errors.number}\n                                    />\n                                </Col>\n                                <Col span={24}>\n                                    <InputUI\n                                        name='expire_date'\n                                        label={t('expiry_date')}\n                                        inputType='keyboardDate'\n                                        placeholder={t('MM/YY')}\n                                        format='MM/YY'\n                                        value={formik.values.expire_date || null}\n                                        onBlur={formik.handleBlur}\n                                        onChange={(value) => handleChange('expire_date', value)}\n                                        error={formik.touched.expire_date && formik.errors.expire_date}\n                                    />\n                                </Col>\n                                <Col span={24}>\n                                    <InputUI\n                                        name='name'\n                                        label={t('card_name')}\n                                        value={formik.values?.name || ''}\n                                        onChange={(e) => handleChange('name', e.target.value)}\n                                    />\n                                </Col>\n                                <Col span={24}>\n                                    <Button\n                                        size='l'\n                                        variant='primary'\n                                        htmlType='submit'\n                                        disabled={disabledButton()}\n                                    >\n                                        {t('add')}\n                                    </Button>\n                                </Col>\n                            </Row>\n                        </CreditCardDetailForm>\n                    )\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}