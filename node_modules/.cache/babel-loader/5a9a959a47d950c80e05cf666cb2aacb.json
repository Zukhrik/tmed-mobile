{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import useWebSocket from'react-use-websocket';import{useEffect,useState}from'react';import{useStore}from'effector-react';import{$appModel,socketCountersMount}from'../../Models/app';import{addedMessageToListFromSocket,addedMessageFromSocket}from'../../Models/chat-model';import{useLocation}from'react-router-dom';export function useChatWs(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),chatsUrl=_useState2[0],setChatsUrl=_useState2[1];var _useStore=useStore($appModel),token=_useStore.$app.token;var _useLocation=useLocation(),pathname=_useLocation.pathname;var getAddedMessageToListFromSocket=function getAddedMessageToListFromSocket(data){var objectData=data.object;var payload={is_muted:objectData.is_muted,last_message:{date:objectData.date,file:objectData.file,sender:objectData.sender,text:objectData.text},receiver:objectData.sender,receiver_type:'user',unread_count:data.counters.unread_count};addedMessageToListFromSocket({type:'user',payload:payload,key:objectData.sender.username});};var getAddedMessageToSingleChat=function getAddedMessageToSingleChat(data){addedMessageFromSocket({payload:data,key:data.sender.username});};useWebSocket(chatsUrl,{onMessage:function onMessage(e){var data=JSON.parse(e.data);if(data.counters&&data.counters.unread_count_all){socketCountersMount({chatUnreadCounter:data.counters.unread_count_all});}if(data.action==='add'&&data.object){var isSingle=pathname.match(/([^/]*)\\/[^/]*$/)[1]==='chat';getAddedMessageToListFromSocket(data);if(isSingle){getAddedMessageToSingleChat(data.object);}}},onError:function onError(e){// console.log(e)\n}});useEffect(function(){if(token){setChatsUrl(\"wss://py.dwed.biz/ws/v1.0/chats/?token=\".concat(token));}else{setChatsUrl(null);}},[token]);}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/app/use-chat-ws.js"],"names":["useWebSocket","useEffect","useState","useStore","$appModel","socketCountersMount","addedMessageToListFromSocket","addedMessageFromSocket","useLocation","useChatWs","chatsUrl","setChatsUrl","token","$app","pathname","getAddedMessageToListFromSocket","data","objectData","object","payload","is_muted","last_message","date","file","sender","text","receiver","receiver_type","unread_count","counters","type","key","username","getAddedMessageToSingleChat","onMessage","e","JSON","parse","unread_count_all","chatUnreadCounter","action","isSingle","match","onError"],"mappings":"qKAAA,MAAOA,CAAAA,YAAP,KAAyB,qBAAzB,CACA,OAAQC,SAAR,CAAmBC,QAAnB,KAAkC,OAAlC,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,CAAmBC,mBAAnB,KAA6C,kBAA7C,CACA,OAAQC,4BAAR,CAAsCC,sBAAtC,KAAoE,yBAApE,CACA,OAAQC,WAAR,KAA0B,kBAA1B,CAEA,MAAO,SAASC,CAAAA,SAAT,EAAqB,CACxB,cAAgCP,QAAQ,CAAC,IAAD,CAAxC,wCAAOQ,QAAP,eAAiBC,WAAjB,eACA,cAAwBR,QAAQ,CAACC,SAAD,CAAhC,CAAcQ,KAAd,WAAOC,IAAP,CAAcD,KAAd,CACA,iBAAmBJ,WAAW,EAA9B,CAAOM,QAAP,cAAOA,QAAP,CAEA,GAAMC,CAAAA,+BAA+B,CAAG,QAAlCA,CAAAA,+BAAkC,CAACC,IAAD,CAAU,CAC9C,GAAMC,CAAAA,UAAU,CAAGD,IAAI,CAACE,MAAxB,CACA,GAAMC,CAAAA,OAAO,CAAG,CACZC,QAAQ,CAAEH,UAAU,CAACG,QADT,CAEZC,YAAY,CAAE,CACVC,IAAI,CAAEL,UAAU,CAACK,IADP,CAEVC,IAAI,CAAEN,UAAU,CAACM,IAFP,CAGVC,MAAM,CAAEP,UAAU,CAACO,MAHT,CAIVC,IAAI,CAAER,UAAU,CAACQ,IAJP,CAFF,CAQZC,QAAQ,CAAET,UAAU,CAACO,MART,CASZG,aAAa,CAAE,MATH,CAUZC,YAAY,CAAEZ,IAAI,CAACa,QAAL,CAAcD,YAVhB,CAAhB,CAYAtB,4BAA4B,CAAC,CAACwB,IAAI,CAAE,MAAP,CAAeX,OAAO,CAAPA,OAAf,CAAwBY,GAAG,CAAEd,UAAU,CAACO,MAAX,CAAkBQ,QAA/C,CAAD,CAA5B,CACH,CAfD,CAiBA,GAAMC,CAAAA,2BAA2B,CAAG,QAA9BA,CAAAA,2BAA8B,CAACjB,IAAD,CAAU,CAC1CT,sBAAsB,CAAC,CAACY,OAAO,CAAEH,IAAV,CAAgBe,GAAG,CAAEf,IAAI,CAACQ,MAAL,CAAYQ,QAAjC,CAAD,CAAtB,CACH,CAFD,CAIAhC,YAAY,CAACU,QAAD,CAAW,CACnBwB,SAAS,CAAE,mBAACC,CAAD,CAAO,CACd,GAAMnB,CAAAA,IAAI,CAAGoB,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACnB,IAAb,CAAb,CACA,GAAIA,IAAI,CAACa,QAAL,EAAiBb,IAAI,CAACa,QAAL,CAAcS,gBAAnC,CAAqD,CACjDjC,mBAAmB,CAAC,CAACkC,iBAAiB,CAAEvB,IAAI,CAACa,QAAL,CAAcS,gBAAlC,CAAD,CAAnB,CACH,CACD,GAAItB,IAAI,CAACwB,MAAL,GAAgB,KAAhB,EAAyBxB,IAAI,CAACE,MAAlC,CAA0C,CACtC,GAAMuB,CAAAA,QAAQ,CAAG3B,QAAQ,CAAC4B,KAAT,CAAe,iBAAf,EAAkC,CAAlC,IAAyC,MAA1D,CACA3B,+BAA+B,CAACC,IAAD,CAA/B,CACA,GAAIyB,QAAJ,CAAc,CACVR,2BAA2B,CAACjB,IAAI,CAACE,MAAN,CAA3B,CACH,CACJ,CACJ,CAbkB,CAcnByB,OAAO,CAAE,iBAACR,CAAD,CAAO,CACZ;AACH,CAhBkB,CAAX,CAAZ,CAoBAlC,SAAS,CAAC,UAAM,CACZ,GAAIW,KAAJ,CAAW,CACPD,WAAW,kDAA2CC,KAA3C,EAAX,CACH,CAFD,IAEO,CACHD,WAAW,CAAC,IAAD,CAAX,CACH,CACJ,CANQ,CAMN,CAACC,KAAD,CANM,CAAT,CAOH","sourcesContent":["import useWebSocket from 'react-use-websocket'\nimport {useEffect, useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel, socketCountersMount} from '../../Models/app'\nimport {addedMessageToListFromSocket, addedMessageFromSocket,} from '../../Models/chat-model'\nimport {useLocation} from 'react-router-dom'\n\nexport function useChatWs() {\n    const [chatsUrl, setChatsUrl] = useState(null)\n    const {$app: {token}} = useStore($appModel)\n    const {pathname} = useLocation()\n\n    const getAddedMessageToListFromSocket = (data) => {\n        const objectData = data.object\n        const payload = {\n            is_muted: objectData.is_muted,\n            last_message: {\n                date: objectData.date,\n                file: objectData.file,\n                sender: objectData.sender,\n                text: objectData.text,\n            },\n            receiver: objectData.sender,\n            receiver_type: 'user',\n            unread_count: data.counters.unread_count\n        }\n        addedMessageToListFromSocket({type: 'user', payload, key: objectData.sender.username})\n    }\n\n    const getAddedMessageToSingleChat = (data) => {\n        addedMessageFromSocket({payload: data, key: data.sender.username})\n    }\n\n    useWebSocket(chatsUrl, {\n        onMessage: (e) => {\n            const data = JSON.parse(e.data)\n            if (data.counters && data.counters.unread_count_all) {\n                socketCountersMount({chatUnreadCounter: data.counters.unread_count_all})\n            }\n            if (data.action === 'add' && data.object) {\n                const isSingle = pathname.match(/([^/]*)\\/[^/]*$/)[1] === 'chat'\n                getAddedMessageToListFromSocket(data)\n                if (isSingle) {\n                    getAddedMessageToSingleChat(data.object)\n                }\n            }\n        },\n        onError: (e) => {\n            // console.log(e)\n        }\n    })\n\n\n    useEffect(() => {\n        if (token) {\n            setChatsUrl(`wss://py.dwed.biz/ws/v1.0/chats/?token=${token}`)\n        } else {\n            setChatsUrl(null)\n        }\n    }, [token])\n}"]},"metadata":{},"sourceType":"module"}