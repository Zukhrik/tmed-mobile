{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OrganizationTape/index.jsx\";\nimport React from 'react';\nimport { useStore } from 'effector-react';\nimport { useAuthorTape } from '../../../Hooks/tape';\nimport { $tapeModel } from '../../../Models/tape-model';\nimport { TapeItems } from '../../../Components/TapeTypes';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { PostSkeleton } from '../../../Components/Post/PostSkeleton';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nconst skeleton = generateSkeleton(10);\nexport const OrganizationTape = () => {\n  const {\n    loadMore\n  } = useAuthorTape();\n  const {\n    $authorTape: {\n      data,\n      forceLoading,\n      result,\n      loading\n    }\n  } = useStore($tapeModel);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, forceLoading === 2 ? /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    style: {\n      overflow: 'visible'\n    },\n    hasMore: !loading && !!result.next,\n    dataLength: result.nextOffset || 10,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 23\n    }\n  }, data.map((item, idx) => /*#__PURE__*/React.createElement(TapeItems, {\n    key: `${idx + 1}`,\n    data: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 33\n    }\n  }))) : /*#__PURE__*/React.createElement(React.Fragment, null, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(PostSkeleton, {\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 33\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OrganizationTape/index.jsx"],"names":["React","useStore","useAuthorTape","$tapeModel","TapeItems","generateSkeleton","PostSkeleton","InfiniteScroll","skeleton","OrganizationTape","loadMore","$authorTape","data","forceLoading","result","loading","overflow","next","nextOffset","map","item","idx"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AACA,SAAQC,UAAR,QAAyB,4BAAzB;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AACA,SAAQC,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,YAAR,QAA2B,uCAA3B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AAEA,MAAMC,QAAQ,GAAGH,gBAAgB,CAAC,EAAD,CAAjC;AACA,OAAO,MAAMI,gBAAgB,GAAG,MAAM;AAClC,QAAM;AAACC,IAAAA;AAAD,MAAaR,aAAa,EAAhC;AACA,QAAM;AAACS,IAAAA,WAAW,EAAE;AAACC,MAAAA,IAAD;AAAOC,MAAAA,YAAP;AAAqBC,MAAAA,MAArB;AAA6BC,MAAAA;AAA7B;AAAd,MAAuDd,QAAQ,CAACE,UAAD,CAArE;AAEA,sBACI,0CAEQU,YAAY,KAAK,CAAjB,gBACM,oBAAC,cAAD;AACE,IAAA,IAAI,EAAEH,QADR;AAEE,IAAA,KAAK,EAAE;AAACM,MAAAA,QAAQ,EAAE;AAAX,KAFT;AAGE,IAAA,OAAO,EAAE,CAACD,OAAD,IAAY,CAAC,CAACD,MAAM,CAACG,IAHhC;AAIE,IAAA,UAAU,EAAEH,MAAM,CAACI,UAAP,IAAqB,EAJnC;AAKE,IAAA,MAAM,eAAE,uDALV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQMN,IAAI,CAACO,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,kBACL,oBAAC,SAAD;AACI,IAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EADpB;AAEI,IAAA,IAAI,EAAED,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CARN,CADN,gBAiBM,0CAEMZ,QAAQ,CAACW,GAAT,CAAa,CAACC,IAAD,EAAOC,GAAP,kBACT,oBAAC,YAAD;AACI,IAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EADpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFN,CAnBd,CADJ;AA+BH,CAnCM","sourcesContent":["import React from 'react'\nimport {useStore} from 'effector-react'\nimport {useAuthorTape} from '../../../Hooks/tape'\nimport {$tapeModel} from '../../../Models/tape-model'\nimport {TapeItems} from '../../../Components/TapeTypes'\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\nimport {PostSkeleton} from '../../../Components/Post/PostSkeleton'\nimport InfiniteScroll from 'react-infinite-scroll-component'\n\nconst skeleton = generateSkeleton(10)\nexport const OrganizationTape = () => {\n    const {loadMore} = useAuthorTape()\n    const {$authorTape: {data, forceLoading, result, loading}} = useStore($tapeModel)\n    \n    return (\n        <>\n            {\n                forceLoading === 2\n                    ? <InfiniteScroll\n                        next={loadMore}\n                        style={{overflow: 'visible'}}\n                        hasMore={!loading && !!result.next}\n                        dataLength={result.nextOffset || 10}\n                        loader={<>...loading</>}\n                    >\n                        {\n                            data.map((item, idx) => (\n                                <TapeItems\n                                    key={`${idx + 1}`}\n                                    data={item}\n                                />\n                            ))\n                        }\n                    </InfiniteScroll>\n                    : <>\n                        {\n                            skeleton.map((item, idx) =>\n                                <PostSkeleton\n                                    key={`${idx + 1}`}\n                                />)\n                        }\n                    </>\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}