{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from\"react\";export function useOutsideClicker(ref){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),clicked=_useState2[0],setClicked=_useState2[1];var handleClickOutside=useCallback(function(event){if(ref&&ref.current&&!ref.current.contains(event.target)){setClicked(true);}else{setClicked(false);}},[ref]);useEffect(function(){document.addEventListener(\"mousedown\",handleClickOutside);return function(){document.removeEventListener(\"mousedown\",handleClickOutside);};},[handleClickOutside]);return{clicked:clicked};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/app/use-outside-clicker.js"],"names":["useCallback","useEffect","useState","useOutsideClicker","ref","clicked","setClicked","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"qKAAA,OAAQA,WAAR,CAAqBC,SAArB,CAAgCC,QAAhC,KAA+C,OAA/C,CAEA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,GAA3B,CAAgC,CACnC,cAA8BF,QAAQ,CAAC,KAAD,CAAtC,wCAAOG,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,kBAAkB,CAAGP,WAAW,CAAC,SAACQ,KAAD,CAAW,CAC9C,GAAIJ,GAAG,EAAIA,GAAG,CAACK,OAAX,EAAsB,CAACL,GAAG,CAACK,OAAJ,CAAYC,QAAZ,CAAqBF,KAAK,CAACG,MAA3B,CAA3B,CAA+D,CAC3DL,UAAU,CAAC,IAAD,CAAV,CACH,CAFD,IAEO,CACHA,UAAU,CAAC,KAAD,CAAV,CACH,CACJ,CANqC,CAMnC,CAACF,GAAD,CANmC,CAAtC,CAQAH,SAAS,CAAC,UAAM,CACZW,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,CAAuCN,kBAAvC,EACA,MAAO,WAAM,CACTK,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,CAA0CP,kBAA1C,EACH,CAFD,CAGH,CALQ,CAKN,CAACA,kBAAD,CALM,CAAT,CAOA,MAAO,CAACF,OAAO,CAAPA,OAAD,CAAP,CACH","sourcesContent":["import {useCallback, useEffect, useState} from \"react\";\r\n\r\nexport function useOutsideClicker(ref) {\r\n    const [clicked, setClicked] = useState(false)\r\n\r\n    const handleClickOutside = useCallback((event) => {\r\n        if (ref && ref.current && !ref.current.contains(event.target)) {\r\n            setClicked(true)\r\n        } else {\r\n            setClicked(false)\r\n        }\r\n    }, [ref])\r\n\r\n    useEffect(() => {\r\n        document.addEventListener(\"mousedown\", handleClickOutside);\r\n        return () => {\r\n            document.removeEventListener(\"mousedown\", handleClickOutside);\r\n        };\r\n    }, [handleClickOutside]);\r\n\r\n    return {clicked}\r\n}"]},"metadata":{},"sourceType":"module"}