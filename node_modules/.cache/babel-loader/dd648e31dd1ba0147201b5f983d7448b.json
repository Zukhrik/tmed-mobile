{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OrgOfferingGroup/index.jsx\";\nimport React, { useCallback } from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { OfferGroupWrapper } from '../style';\nimport { useHistory } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { URL_KEYS } from '../../../../Constants';\nimport { $appModel } from '../../../../Models/app';\nimport { INFO_MAT } from '../../../../Constants/app';\nimport { useUrlParams } from '../../../../Hooks/app';\nimport { useScrollLeft } from '../../../../Hooks/org';\nimport { OfferingGroupItem } from '../OfferingGroupItem';\nimport { Text } from '../../../../UIComponents/Typography/Text';\nimport { generateSkeleton } from '../../../../utils/skeleton-utils';\nimport { $offeringsModel } from '../../../../Models/offerings-model';\nimport { OfferingGroupItemSkeleton } from '../OfferingGroupItemSkeleton';\nconst skeleton = generateSkeleton(20);\nexport const OrgOfferingGroup = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    $device\n  } = useStore($appModel);\n  const {\n    handleScroll\n  } = useScrollLeft();\n  const {\n    location: {\n      pathname\n    }\n  } = useHistory();\n  const groupId = urlData[URL_KEYS.OFFERING_GROUP_ID];\n  const {\n    $offeringGroupList: {\n      data,\n      forceLoading\n    }\n  } = useStore($offeringsModel);\n  const generateUrl = useCallback(id => {\n    const url = [];\n\n    if (urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]) {\n      url.push(`${URL_KEYS.SPECIALIST_CATEGORY_ID}=${urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]}`);\n    }\n\n    if (urlData[URL_KEYS.SPECIALIST_ID]) {\n      url.push(`${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`);\n    }\n\n    if (!groupId || groupId !== String(id)) {\n      url.push(`${URL_KEYS.OFFERING_GROUP_ID}=${id}`);\n    }\n\n    return {\n      pathname,\n      search: url.join('&')\n    };\n  }, [pathname, groupId, urlData]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, $device && $device === INFO_MAT && /*#__PURE__*/React.createElement(Text, {\n    className: \"group-text-style\",\n    style: {\n      fontSize: 18,\n      color: 'var(--grey-dwed)',\n      padding: '0 12px',\n      marginBottom: 8\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, t('chapter')), /*#__PURE__*/React.createElement(OfferGroupWrapper, {\n    onScroll: e => handleScroll(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    wrap: false,\n    gutter: $device && $device !== INFO_MAT ? [20, 0] : [28, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 17\n    }\n  }, forceLoading === 2 ? data.map(item => /*#__PURE__*/React.createElement(Col, {\n    key: item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupItem, {\n    size: $device && $device === INFO_MAT ? 110 : 75,\n    shape: \"square\",\n    name: item.name,\n    imgUrl: item.image,\n    path: generateUrl(item.id),\n    isActive: () => groupId && groupId === String(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 41\n    }\n  }))) : skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupItemSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 41\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OrgOfferingGroup/index.jsx"],"names":["React","useCallback","Col","Row","useStore","OfferGroupWrapper","useHistory","useTranslation","URL_KEYS","$appModel","INFO_MAT","useUrlParams","useScrollLeft","OfferingGroupItem","Text","generateSkeleton","$offeringsModel","OfferingGroupItemSkeleton","skeleton","OrgOfferingGroup","t","urlData","$device","handleScroll","location","pathname","groupId","OFFERING_GROUP_ID","$offeringGroupList","data","forceLoading","generateUrl","id","url","SPECIALIST_CATEGORY_ID","push","SPECIALIST_ID","String","search","join","fontSize","color","padding","marginBottom","e","map","item","name","image","idx"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {OfferGroupWrapper} from '../style'\nimport {useHistory} from 'react-router-dom'\nimport {useTranslation} from 'react-i18next'\nimport {URL_KEYS} from '../../../../Constants'\nimport {$appModel} from '../../../../Models/app'\nimport {INFO_MAT} from '../../../../Constants/app'\nimport {useUrlParams} from '../../../../Hooks/app'\nimport {useScrollLeft} from '../../../../Hooks/org'\nimport {OfferingGroupItem} from '../OfferingGroupItem'\nimport {Text} from '../../../../UIComponents/Typography/Text'\nimport {generateSkeleton} from '../../../../utils/skeleton-utils'\nimport {$offeringsModel} from '../../../../Models/offerings-model'\nimport {OfferingGroupItemSkeleton} from '../OfferingGroupItemSkeleton'\n\n\nconst skeleton = generateSkeleton(20)\nexport const OrgOfferingGroup = () => {\n    const {t} = useTranslation()\n    const {urlData} = useUrlParams()\n    const {$device} = useStore($appModel)\n    const {handleScroll} = useScrollLeft()\n    const {location: {pathname}} = useHistory()\n    const groupId = urlData[URL_KEYS.OFFERING_GROUP_ID]\n    const {$offeringGroupList: {data, forceLoading}} = useStore($offeringsModel)\n    \n    const generateUrl = useCallback((id) => {\n        const url = []\n        if (urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]) {\n            url.push(`${URL_KEYS.SPECIALIST_CATEGORY_ID}=${urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]}`)\n        }\n        \n        if (urlData[URL_KEYS.SPECIALIST_ID]) {\n            url.push(`${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`)\n        }\n        \n        if (!groupId || groupId !== String(id)) {\n            url.push(`${URL_KEYS.OFFERING_GROUP_ID}=${id}`)\n        }\n        \n        return {\n            pathname,\n            search: url.join('&')\n        }\n    }, [pathname, groupId, urlData])\n    \n    \n    return (\n        <>\n            {\n                $device && $device === INFO_MAT &&\n                <Text\n                    className='group-text-style'\n                    style={{\n                        fontSize: 18,\n                        color: 'var(--grey-dwed)',\n                        padding: '0 12px',\n                        marginBottom: 8\n                    }}\n                >\n                    {t('chapter')}\n                </Text>\n            }\n            <OfferGroupWrapper onScroll={(e) => handleScroll(e)}>\n                <Row wrap={false} gutter={$device && $device !== INFO_MAT ? [20, 0] : [28, 0]}>\n                    {\n                        forceLoading === 2\n                            ? (\n                                data.map((item) => (\n                                    <Col key={item.id}>\n                                        <OfferingGroupItem\n                                            size={$device && $device === INFO_MAT ? 110 : 75}\n                                            shape='square'\n                                            name={item.name}\n                                            imgUrl={item.image}\n                                            path={generateUrl(item.id)}\n                                            isActive={() => groupId && groupId === String(item.id)}\n                                        />\n                                    </Col>\n                                ))\n                            )\n                            : (\n                                skeleton.map((item, idx) => (\n                                    <Col\n                                        key={`${idx + 1}`}\n                                    >\n                                        <OfferingGroupItemSkeleton/>\n                                    </Col>\n                                ))\n                            )\n                    }\n                </Row>\n            </OfferGroupWrapper>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}