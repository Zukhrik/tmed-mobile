{"ast":null,"code":"import React,{useEffect}from'react';import{Root}from'./Root';import{useStore}from'effector-react';import{Records}from'./Views/Records';import{useTranslation}from'react-i18next';import{SignInPage,SignUpPage}from'./Views/Auth';import{BottomNavBar}from'./Components/BottomNavBar';import{accountInfoMount}from'./Models/account-model';import{$appModel,detectLocationMount}from'./Models/app';import{Route,Switch,useLocation}from'react-router-dom';import{useAppDb,useChatWs,useCommonWs,useIsMobile}from'./Hooks/app';export var App=function App(){var _useLocation=useLocation(),pathname=_useLocation.pathname;var generateBottomNavbar=pathname.indexOf('sign-in')===-1&&pathname.indexOf('sign-up')===-1&&pathname.match(/([^/]*)\\/[^/]*$/)[1]!=='offerings'&&pathname.match(/([^/]*)\\/[^/]*$/)[1]!=='unregistered'&&pathname.match(/([^/]*)\\/[^/]*$/)[1]!=='checkout';useAppDb();useChatWs();useCommonWs();useIsMobile();var _useTranslation=useTranslation(),i18n=_useTranslation.i18n;var _useStore=useStore($appModel),token=_useStore.$app.token,lang=_useStore.$appLang;useEffect(function(){if(token){accountInfoMount();}else{detectLocationMount();}},[token]);useEffect(function(){if(lang){i18n.changeLanguage(lang);}},[i18n,lang]);return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Switch,null,/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/sign-in\",component:SignInPage}),/*#__PURE__*/React.createElement(Route,{exact:true,path:\"/sign-up\",component:SignUpPage}),/*#__PURE__*/React.createElement(Route,{path:\"/records\",component:Records}),/*#__PURE__*/React.createElement(Route,{path:\"/\",component:Root})),generateBottomNavbar&&/*#__PURE__*/React.createElement(BottomNavBar,null));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/App.jsx"],"names":["React","useEffect","Root","useStore","Records","useTranslation","SignInPage","SignUpPage","BottomNavBar","accountInfoMount","$appModel","detectLocationMount","Route","Switch","useLocation","useAppDb","useChatWs","useCommonWs","useIsMobile","App","pathname","generateBottomNavbar","indexOf","match","i18n","token","$app","lang","$appLang","changeLanguage"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,SAAf,KAA+B,OAA/B,CACA,OAAQC,IAAR,KAAmB,QAAnB,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,OAAR,KAAsB,iBAAtB,CACA,OAAQC,cAAR,KAA6B,eAA7B,CACA,OAAQC,UAAR,CAAoBC,UAApB,KAAqC,cAArC,CACA,OAAQC,YAAR,KAA2B,2BAA3B,CACA,OAAQC,gBAAR,KAA+B,wBAA/B,CACA,OAAQC,SAAR,CAAmBC,mBAAnB,KAA6C,cAA7C,CACA,OAAQC,KAAR,CAAeC,MAAf,CAAuBC,WAAvB,KAAyC,kBAAzC,CACA,OAAQC,QAAR,CAAkBC,SAAlB,CAA6BC,WAA7B,CAA0CC,WAA1C,KAA4D,aAA5D,CAGA,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,EAAM,CACrB,iBAAmBL,WAAW,EAA9B,CAAOM,QAAP,cAAOA,QAAP,CAEA,GAAMC,CAAAA,oBAAoB,CACtBD,QAAQ,CAACE,OAAT,CAAiB,SAAjB,IAAgC,CAAC,CAAjC,EACAF,QAAQ,CAACE,OAAT,CAAiB,SAAjB,IAAgC,CAAC,CADjC,EAEAF,QAAQ,CAACG,KAAT,CAAe,iBAAf,EAAkC,CAAlC,IAAyC,WAFzC,EAGAH,QAAQ,CAACG,KAAT,CAAe,iBAAf,EAAkC,CAAlC,IAAyC,cAHzC,EAIAH,QAAQ,CAACG,KAAT,CAAe,iBAAf,EAAkC,CAAlC,IAAyC,UAL7C,CAQAR,QAAQ,GACRC,SAAS,GACTC,WAAW,GACXC,WAAW,GAEX,oBAAeb,cAAc,EAA7B,CAAOmB,IAAP,iBAAOA,IAAP,CACA,cAAwCrB,QAAQ,CAACO,SAAD,CAAhD,CAAce,KAAd,WAAOC,IAAP,CAAcD,KAAd,CAAgCE,IAAhC,WAAsBC,QAAtB,CAGA3B,SAAS,CAAC,UAAM,CACZ,GAAIwB,KAAJ,CAAW,CACPhB,gBAAgB,GACnB,CAFD,IAEO,CACHE,mBAAmB,GACtB,CACJ,CANQ,CAMN,CAACc,KAAD,CANM,CAAT,CASAxB,SAAS,CAAC,UAAM,CACZ,GAAI0B,IAAJ,CAAU,CACNH,IAAI,CAACK,cAAL,CAAoBF,IAApB,EACH,CACJ,CAJQ,CAIN,CAACH,IAAD,CAAOG,IAAP,CAJM,CAAT,CAOA,mBACI,qDACI,oBAAC,MAAD,mBACI,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,UAAlB,CAA6B,SAAS,CAAErB,UAAxC,EADJ,cAEI,oBAAC,KAAD,EAAO,KAAK,KAAZ,CAAa,IAAI,CAAC,UAAlB,CAA6B,SAAS,CAAEC,UAAxC,EAFJ,cAGI,oBAAC,KAAD,EAAO,IAAI,CAAC,UAAZ,CAAuB,SAAS,CAAEH,OAAlC,EAHJ,cAII,oBAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,SAAS,CAAEF,IAA3B,EAJJ,CADJ,CAOKmB,oBAAoB,eAAI,oBAAC,YAAD,MAP7B,CADJ,CAWH,CA/CM","sourcesContent":["import React, {useEffect} from 'react'\nimport {Root} from './Root'\nimport {useStore} from 'effector-react'\nimport {Records} from './Views/Records'\nimport {useTranslation} from 'react-i18next'\nimport {SignInPage, SignUpPage} from './Views/Auth'\nimport {BottomNavBar} from './Components/BottomNavBar'\nimport {accountInfoMount} from './Models/account-model'\nimport {$appModel, detectLocationMount} from './Models/app'\nimport {Route, Switch, useLocation} from 'react-router-dom'\nimport {useAppDb, useChatWs, useCommonWs, useIsMobile} from './Hooks/app'\n\n\nexport const App = () => {\n    const {pathname} = useLocation()\n    \n    const generateBottomNavbar = (\n        pathname.indexOf('sign-in') === -1 &&\n        pathname.indexOf('sign-up') === -1 &&\n        pathname.match(/([^/]*)\\/[^/]*$/)[1] !== 'offerings' &&\n        pathname.match(/([^/]*)\\/[^/]*$/)[1] !== 'unregistered' &&\n        pathname.match(/([^/]*)\\/[^/]*$/)[1] !== 'checkout'\n    )\n    \n    useAppDb()\n    useChatWs()\n    useCommonWs()\n    useIsMobile()\n    \n    const {i18n} = useTranslation()\n    const {$app: {token}, $appLang: lang} = useStore($appModel)\n    \n    \n    useEffect(() => {\n        if (token) {\n            accountInfoMount()\n        } else {\n            detectLocationMount()\n        }\n    }, [token])\n    \n    \n    useEffect(() => {\n        if (lang) {\n            i18n.changeLanguage(lang)\n        }\n    }, [i18n, lang])\n    \n    \n    return (\n        <>\n            <Switch>\n                <Route exact path='/sign-in' component={SignInPage}/>\n                <Route exact path='/sign-up' component={SignUpPage}/>\n                <Route path='/records' component={Records}/>\n                <Route path='/' component={Root}/>\n            </Switch>\n            {generateBottomNavbar && <BottomNavBar/>}\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}