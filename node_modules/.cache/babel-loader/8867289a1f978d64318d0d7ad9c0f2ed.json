{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Views/Organization/organisms/offering-list.jsx\";\nimport React, { useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { $appModel } from '../../../Models/app';\nimport { useQueryOfferingList } from '../../../Hooks/offerings';\nimport { OverlaySettings } from '../../../Components/Overlay';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { OverlayAuth } from '../../../UIComponents/OverlayAuth';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { useOrgOrder, useOrgOrderList } from '../../../Hooks/order';\nimport { useBodyOverflowHidden } from '../../../Hooks/app';\nimport { numberFormat } from '../../../utils/number-utils';\nimport { ProductCard, ProductCardSkeleton } from '../../../Components/Cards';\nimport { Col, Row } from 'antd';\nconst skeleton = generateSkeleton(10, 100, 220);\nexport const OfferingsList = () => {\n  useOrgOrderList();\n  const {\n    organization\n  } = useParams();\n  const [auth, setAuth] = useState(false);\n  const {\n    currency,\n    getIsLoading,\n    onCreatingCartItem\n  } = useOrgOrder();\n  const [offeringItem, setOfferingItem] = useState(false);\n  const {\n    $app: {\n      token,\n      changeOrgGroupPanel,\n      showSpecPanel\n    }\n  } = useStore($appModel);\n  useBodyOverflowHidden(changeOrgGroupPanel || showSpecPanel);\n  const {\n    list,\n    dataLength,\n    orgOfferQuery: {\n      isLoading,\n      hasNextPage,\n      fetchNextPage\n    }\n  } = useQueryOfferingList();\n\n  const handleClose = () => {\n    if (auth) {\n      setAuth(false);\n    }\n\n    setOfferingItem(false);\n  };\n\n  console.log(offeringItem);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: offeringItem,\n    onClose: handleClose,\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      action: () => onCreatingCartItem(offeringItem),\n      auth: auth,\n      setAuth: setAuth,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: () => fetchNextPage(),\n    dataLength: dataLength,\n    hasMore: !isLoading && !!hasNextPage,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 17\n    }\n  }, !isLoading ? (list === null || list === void 0 ? void 0 : list.length) > 0 && list.map((item, idx) => {\n    const offeringData = {\n      id: item.id,\n      qty: item.qty,\n      name: item.name,\n      image: item.image,\n      currency: currency,\n      loading: getIsLoading(item.id),\n      inCart: item.is_in_cart,\n      organization: organization,\n      cost: numberFormat(item.cost),\n      responsible: item.responsible,\n      path: `/${organization}/offerings/${item.id}`\n    };\n    return /*#__PURE__*/React.createElement(Col, {\n      span: 12,\n      key: idx + 1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ProductCard, {\n      showBag: true,\n      isLoading: isLoading,\n      item: offeringData,\n      handleClick: item => {\n        !!token ? onCreatingCartItem(item) : setOfferingItem(item);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 45\n      }\n    }));\n  }) : skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    key: idx + 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(ProductCardSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 41\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Views/Organization/organisms/offering-list.jsx"],"names":["React","useState","useStore","useParams","$appModel","useQueryOfferingList","OverlaySettings","InfiniteScroll","OverlayAuth","generateSkeleton","useOrgOrder","useOrgOrderList","useBodyOverflowHidden","numberFormat","ProductCard","ProductCardSkeleton","Col","Row","skeleton","OfferingsList","organization","auth","setAuth","currency","getIsLoading","onCreatingCartItem","offeringItem","setOfferingItem","$app","token","changeOrgGroupPanel","showSpecPanel","list","dataLength","orgOfferQuery","isLoading","hasNextPage","fetchNextPage","handleClose","console","log","length","map","item","idx","offeringData","id","qty","name","image","loading","inCart","is_in_cart","cost","responsible","path"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {useParams} from 'react-router-dom'\nimport {$appModel} from '../../../Models/app'\nimport {useQueryOfferingList} from '../../../Hooks/offerings'\nimport {OverlaySettings} from '../../../Components/Overlay'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\nimport {useOrgOrder, useOrgOrderList} from '../../../Hooks/order'\nimport {useBodyOverflowHidden} from '../../../Hooks/app'\nimport {numberFormat} from '../../../utils/number-utils'\nimport {ProductCard, ProductCardSkeleton} from '../../../Components/Cards'\nimport {Col, Row} from 'antd'\n\nconst skeleton = generateSkeleton(10, 100, 220)\nexport const OfferingsList = () => {\n    useOrgOrderList()\n    const {organization} = useParams()\n    const [auth, setAuth] = useState(false)\n    const {currency, getIsLoading, onCreatingCartItem} = useOrgOrder()\n    const [offeringItem, setOfferingItem] = useState(false)\n    const {$app: {token, changeOrgGroupPanel, showSpecPanel}} = useStore($appModel)\n    useBodyOverflowHidden(changeOrgGroupPanel || showSpecPanel)\n    const {list, dataLength, orgOfferQuery: {isLoading, hasNextPage, fetchNextPage}} = useQueryOfferingList()\n    \n    const handleClose = () => {\n        if (auth) {\n            setAuth(false)\n        }\n        setOfferingItem(false)\n    }\n    \n    console.log(offeringItem)\n    \n    \n    return (\n        <>\n            <OverlaySettings\n                openSettings={offeringItem}\n                onClose={handleClose}\n                content={<OverlayAuth\n                    action={() => onCreatingCartItem(offeringItem)}\n                    auth={auth}\n                    setAuth={setAuth}\n                    onClose={handleClose}\n                />}\n            />\n            <InfiniteScroll\n                next={() => fetchNextPage()}\n                dataLength={dataLength}\n                hasMore={!isLoading && !!hasNextPage}\n                loader={<>...loading</>}\n            >\n                <Row gutter={[12, 12]}>\n                    {\n                        !isLoading\n                            ? (\n                                list?.length > 0 && list.map((item, idx) => {\n                                    const offeringData = {\n                                        id: item.id,\n                                        qty: item.qty,\n                                        name: item.name,\n                                        image: item.image,\n                                        currency: currency,\n                                        loading: getIsLoading(item.id),\n                                        inCart: item.is_in_cart,\n                                        organization: organization,\n                                        cost: numberFormat(item.cost),\n                                        responsible: item.responsible,\n                                        path: `/${organization}/offerings/${item.id}`\n                                    }\n                                    return (\n                                        <Col span={12} key={idx + 1}>\n                                            <ProductCard\n                                                showBag\n                                                isLoading={isLoading}\n                                                item={offeringData}\n                                                handleClick={(item) => {\n                                                    !!token\n                                                        ? onCreatingCartItem(item)\n                                                        : setOfferingItem(item)\n                                                }}\n                                            />\n                                        </Col>\n                                    )\n                                })\n                            ) : (\n                                skeleton.map((item, idx) => (\n                                    <Col span={12} key={idx + 1}>\n                                        <ProductCardSkeleton/>\n                                    </Col>\n                                ))\n                            )\n                    }\n                </Row>\n            </InfiniteScroll>\n            {/*{*/}\n            {/*    list && list?.length === 0 && (*/}\n            {/*        <EmptyContainerWrapper>*/}\n            {/*            <NoOfferingSvg/>*/}\n            {/*        </EmptyContainerWrapper>*/}\n            {/*    )*/}\n            {/*}*/}\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}