{"ast":null,"code":"import React from'react';import{ArrowIosRightSvg}from'../../../Icons/Arrow';import{IconBox}from'../../../UIComponents/GlobalStyles';import{BodyItemWrapper,ItemCheckBox,ItemCheckBoxWrapper,LoadingSpinWrapper,SelectionListBody}from'../style';import InfiniteScroll from'react-infinite-scroll-component';import{Spin}from'antd';export var ListBody=function ListBody(_ref){var loadMore=_ref.loadMore,list=_ref.list,getChildren=_ref.getChildren,onSelect=_ref.onSelect,selected=_ref.selected;var loading=list.loading,data=list.data,result=list.result;var handleClick=function handleClick(item){if(item.has_subs){getChildren(item);}else{onSelect(item);}};return/*#__PURE__*/React.createElement(SelectionListBody,{id:\"scrollableDiv\"},loading?/*#__PURE__*/React.createElement(LoadingSpinWrapper,null,/*#__PURE__*/React.createElement(Spin,null)):/*#__PURE__*/React.createElement(InfiniteScroll,{next:loadMore,dataLength:(result===null||result===void 0?void 0:result.nextOffset)||10,hasMore:!loading&&!!(result===null||result===void 0?void 0:result.next),loader:/*#__PURE__*/React.createElement(React.Fragment,null,\"...loading\"),scrollableTarget:\"scrollableDiv\"},(data===null||data===void 0?void 0:data.length)>0&&(data===null||data===void 0?void 0:data.length)>0&&data.map(function(item){return/*#__PURE__*/React.createElement(BodyItemWrapper,{key:item.id,onClick:function onClick(){return handleClick(item);}},item.has_subs&&/*#__PURE__*/React.createElement(IconBox,null,/*#__PURE__*/React.createElement(ArrowIosRightSvg,null)),/*#__PURE__*/React.createElement(ItemCheckBoxWrapper,null,item.name,!item.has_subs&&/*#__PURE__*/React.createElement(ItemCheckBox,{checked:selected&&selected.id===item.id})));})));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/SelectionList/ListBody/index.jsx"],"names":["React","ArrowIosRightSvg","IconBox","BodyItemWrapper","ItemCheckBox","ItemCheckBoxWrapper","LoadingSpinWrapper","SelectionListBody","InfiniteScroll","Spin","ListBody","loadMore","list","getChildren","onSelect","selected","loading","data","result","handleClick","item","has_subs","nextOffset","next","length","map","id","name"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAAQC,gBAAR,KAA+B,sBAA/B,CACA,OAAQC,OAAR,KAAsB,oCAAtB,CACA,OAAQC,eAAR,CAAyBC,YAAzB,CAAuCC,mBAAvC,CAA4DC,kBAA5D,CAAgFC,iBAAhF,KAAwG,UAAxG,CACA,MAAOC,CAAAA,cAAP,KAA2B,iCAA3B,CACA,OAAQC,IAAR,KAAmB,MAAnB,CAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,MAAuD,IAArDC,CAAAA,QAAqD,MAArDA,QAAqD,CAA3CC,IAA2C,MAA3CA,IAA2C,CAArCC,WAAqC,MAArCA,WAAqC,CAAxBC,QAAwB,MAAxBA,QAAwB,CAAdC,QAAc,MAAdA,QAAc,CAC3E,GAAOC,CAAAA,OAAP,CAAgCJ,IAAhC,CAAOI,OAAP,CAAgBC,IAAhB,CAAgCL,IAAhC,CAAgBK,IAAhB,CAAsBC,MAAtB,CAAgCN,IAAhC,CAAsBM,MAAtB,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,IAAD,CAAU,CAC1B,GAAIA,IAAI,CAACC,QAAT,CAAmB,CACfR,WAAW,CAACO,IAAD,CAAX,CACH,CAFD,IAEO,CACHN,QAAQ,CAACM,IAAD,CAAR,CACH,CACJ,CAND,CAQA,mBACI,oBAAC,iBAAD,EAAmB,EAAE,CAAC,eAAtB,EAEQJ,OAAO,cAEC,oBAAC,kBAAD,mBACI,oBAAC,IAAD,MADJ,CAFD,cAOC,oBAAC,cAAD,EACI,IAAI,CAAEL,QADV,CAEI,UAAU,CAAE,CAAAO,MAAM,OAAN,EAAAA,MAAM,SAAN,QAAAA,MAAM,CAAEI,UAAR,GAAsB,EAFtC,CAGI,OAAO,CAAE,CAACN,OAAD,EAAY,CAAC,EAACE,MAAD,SAACA,MAAD,iBAACA,MAAM,CAAEK,IAAT,CAH1B,CAII,MAAM,cAAE,qDAJZ,CAKI,gBAAgB,CAAC,eALrB,EAQQ,CAAAN,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEO,MAAN,EAAe,CAAf,EAAoB,CAAAP,IAAI,OAAJ,EAAAA,IAAI,SAAJ,QAAAA,IAAI,CAAEO,MAAN,EAAe,CAAnC,EAAwCP,IAAI,CAACQ,GAAL,CAAS,SAACL,IAAD,qBAC7C,oBAAC,eAAD,EACI,GAAG,CAAEA,IAAI,CAACM,EADd,CAEI,OAAO,CAAE,yBAAMP,CAAAA,WAAW,CAACC,IAAD,CAAjB,EAFb,EAKQA,IAAI,CAACC,QAAL,eACI,oBAAC,OAAD,mBACI,oBAAC,gBAAD,MADJ,CANZ,cAWI,oBAAC,mBAAD,MACKD,IAAI,CAACO,IADV,CAGQ,CAACP,IAAI,CAACC,QAAN,eACI,oBAAC,YAAD,EAAc,OAAO,CAAEN,QAAQ,EAAIA,QAAQ,CAACW,EAAT,GAAgBN,IAAI,CAACM,EAAxD,EAJZ,CAXJ,CAD6C,EAAT,CARhD,CAThB,CADJ,CA8CH,CAzDM","sourcesContent":["import React from 'react'\r\nimport {ArrowIosRightSvg} from '../../../Icons/Arrow'\r\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\r\nimport {BodyItemWrapper, ItemCheckBox, ItemCheckBoxWrapper, LoadingSpinWrapper, SelectionListBody} from '../style'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {Spin} from 'antd'\r\n\r\nexport const ListBody = ({loadMore, list, getChildren, onSelect, selected}) => {\r\n    const {loading, data, result} = list\r\n    \r\n    const handleClick = (item) => {\r\n        if (item.has_subs) {\r\n            getChildren(item)\r\n        } else {\r\n            onSelect(item)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <SelectionListBody id='scrollableDiv'>\r\n            {\r\n                loading\r\n                    ? (\r\n                        <LoadingSpinWrapper>\r\n                            <Spin/>\r\n                        </LoadingSpinWrapper>\r\n                    )\r\n                    : (\r\n                        <InfiniteScroll\r\n                            next={loadMore}\r\n                            dataLength={result?.nextOffset || 10}\r\n                            hasMore={!loading && !!result?.next}\r\n                            loader={<>...loading</>}\r\n                            scrollableTarget='scrollableDiv'\r\n                        >\r\n                            {\r\n                                data?.length > 0 && data?.length > 0 && data.map((item) => (\r\n                                    <BodyItemWrapper\r\n                                        key={item.id}\r\n                                        onClick={() => handleClick(item)}\r\n                                    >\r\n                                        {\r\n                                            item.has_subs && (\r\n                                                <IconBox>\r\n                                                    <ArrowIosRightSvg/>\r\n                                                </IconBox>\r\n                                            )\r\n                                        }\r\n                                        <ItemCheckBoxWrapper>\r\n                                            {item.name}\r\n                                            {\r\n                                                !item.has_subs && (\r\n                                                    <ItemCheckBox checked={selected && selected.id === item.id}/>\r\n                                                )\r\n                                            }\r\n                                        </ItemCheckBoxWrapper>\r\n                                    </BodyItemWrapper>\r\n                                ))\r\n                            }\r\n                        </InfiniteScroll>\r\n                    )\r\n            }\r\n        </SelectionListBody>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}