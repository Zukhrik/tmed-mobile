{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar react_1 = tslib_1.__importStar(require(\"react\"));\n\nvar SlideDownContent = function (_super) {\n  tslib_1.__extends(SlideDownContent, _super);\n\n  function SlideDownContent(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.outerRef = null;\n\n    _this.handleRef = function (ref) {\n      _this.outerRef = ref;\n\n      if (_this.props.forwardedRef) {\n        if (typeof _this.props.forwardedRef === 'function') {\n          _this.props.forwardedRef(ref);\n        } else if (typeof _this.props.forwardedRef === 'object') {\n          var forwardedRef = _this.props.forwardedRef;\n          forwardedRef.current = ref;\n        } else {\n          throw new Error(\"Invalid forwardedRef \" + _this.props.forwardedRef);\n        }\n      }\n    };\n\n    _this.handleTransitionEnd = function (evt) {\n      if (evt.target === _this.outerRef && evt.propertyName === 'height') {\n        if (_this.state.childrenLeaving) {\n          _this.setState({\n            children: null,\n            childrenLeaving: false\n          }, function () {\n            return _this.endTransition();\n          });\n        } else {\n          _this.endTransition();\n        }\n      }\n    };\n\n    _this.state = {\n      children: props.children,\n      childrenLeaving: false\n    };\n    return _this;\n  }\n\n  SlideDownContent.prototype.componentDidMount = function () {\n    if (this.outerRef) {\n      if (this.props.closed || !this.props.children) {\n        this.outerRef.classList.add('closed');\n        this.outerRef.style.height = '0px';\n      } else if (this.props.transitionOnAppear) {\n        this.startTransition('0px');\n      } else {\n        this.outerRef.style.height = 'auto';\n      }\n    }\n  };\n\n  SlideDownContent.prototype.getSnapshotBeforeUpdate = function () {\n    return this.outerRef ? this.outerRef.getBoundingClientRect().height + 'px' : null;\n  };\n\n  SlideDownContent.getDerivedStateFromProps = function (props, state) {\n    if (props.children) {\n      return {\n        children: props.children,\n        childrenLeaving: false\n      };\n    } else if (state.children) {\n      return {\n        children: state.children,\n        childrenLeaving: true\n      };\n    } else {\n      return null;\n    }\n  };\n\n  SlideDownContent.prototype.componentDidUpdate = function (_prevProps, _prevState, snapshot) {\n    if (this.outerRef) {\n      this.startTransition(snapshot);\n    }\n  };\n\n  SlideDownContent.prototype.startTransition = function (prevHeight) {\n    var endHeight = '0px';\n\n    if (!this.props.closed && !this.state.childrenLeaving && this.state.children) {\n      this.outerRef.classList.remove('closed');\n      this.outerRef.style.height = 'auto';\n      endHeight = getComputedStyle(this.outerRef).height;\n    }\n\n    if (parseFloat(endHeight).toFixed(2) !== parseFloat(prevHeight).toFixed(2)) {\n      this.outerRef.classList.add('transitioning');\n      this.outerRef.style.height = prevHeight;\n      this.outerRef.offsetHeight;\n      this.outerRef.style.transitionProperty = 'height';\n      this.outerRef.style.height = endHeight;\n    }\n  };\n\n  SlideDownContent.prototype.endTransition = function () {\n    this.outerRef.classList.remove('transitioning');\n    this.outerRef.style.transitionProperty = 'none';\n    this.outerRef.style.height = this.props.closed ? '0px' : 'auto';\n\n    if (this.props.closed || !this.state.children) {\n      this.outerRef.classList.add('closed');\n    }\n  };\n\n  SlideDownContent.prototype.render = function () {\n    var _a = this.props,\n        _b = _a.as,\n        as = _b === void 0 ? 'div' : _b,\n        children = _a.children,\n        className = _a.className,\n        closed = _a.closed,\n        transitionOnAppear = _a.transitionOnAppear,\n        forwardedRef = _a.forwardedRef,\n        rest = tslib_1.__rest(_a, [\"as\", \"children\", \"className\", \"closed\", \"transitionOnAppear\", \"forwardedRef\"]);\n\n    var containerClassName = className ? 'react-slidedown ' + className : 'react-slidedown';\n    return react_1.default.createElement(as, tslib_1.__assign({\n      ref: this.handleRef,\n      className: containerClassName,\n      onTransitionEnd: this.handleTransitionEnd\n    }, rest), this.state.children);\n  };\n\n  SlideDownContent.defaultProps = {\n    transitionOnAppear: true,\n    closed: false\n  };\n  return SlideDownContent;\n}(react_1.Component);\n\nexports.SlideDown = react_1.forwardRef(function (props, ref) {\n  return react_1.default.createElement(SlideDownContent, tslib_1.__assign({}, props, {\n    forwardedRef: ref\n  }));\n});\nexports.default = exports.SlideDown;","map":null,"metadata":{},"sourceType":"script"}