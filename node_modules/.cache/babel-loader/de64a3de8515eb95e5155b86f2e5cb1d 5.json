{"ast":null,"code":"import{useCallback,useEffect}from'react';import{idbGet}from'../../Config/db';import{onlineUserMountFromIDB}from'../../Models/user-model';import{useStore}from'effector-react';import{$appModel}from'../../Models/app';export function useAppDb(){var _useStore=useStore($appModel),token=_useStore.$app.token;var getOnlineAccounts=useCallback(function(){if(token){idbGet('online_accounts','online_accounts').then(function(res){if(res){var data=JSON.parse(res);onlineUserMountFromIDB(data);}});}},[token]);useEffect(function(){getOnlineAccounts();},[getOnlineAccounts]);var setStyleProperty=useCallback(function(){var vh=window.innerHeight*0.01;document.documentElement.style.setProperty('--vh',\"\".concat(vh,\"px\"));},[]);useEffect(function(){setStyleProperty();window.addEventListener('resize',setStyleProperty);return function(){window.removeEventListener('resize',setStyleProperty);};},[setStyleProperty]);}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/app/use-app-db.js"],"names":["useCallback","useEffect","idbGet","onlineUserMountFromIDB","useStore","$appModel","useAppDb","token","$app","getOnlineAccounts","then","res","data","JSON","parse","setStyleProperty","vh","window","innerHeight","document","documentElement","style","setProperty","addEventListener","removeEventListener"],"mappings":"AAAA,OAAQA,WAAR,CAAqBC,SAArB,KAAqC,OAArC,CACA,OAAQC,MAAR,KAAqB,iBAArB,CACA,OAAQC,sBAAR,KAAqC,yBAArC,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,KAAwB,kBAAxB,CAEA,MAAO,SAASC,CAAAA,QAAT,EAAoB,CACvB,cAAwBF,QAAQ,CAACC,SAAD,CAAhC,CAAcE,KAAd,WAAOC,IAAP,CAAcD,KAAd,CACA,GAAME,CAAAA,iBAAiB,CAAGT,WAAW,CAAC,UAAM,CACxC,GAAIO,KAAJ,CAAW,CACPL,MAAM,CAAC,iBAAD,CAAoB,iBAApB,CAAN,CACKQ,IADL,CACU,SAACC,GAAD,CAAS,CACX,GAAIA,GAAJ,CAAS,CACL,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAb,CACAR,sBAAsB,CAACS,IAAD,CAAtB,CACH,CACJ,CANL,EAOH,CACJ,CAVoC,CAUlC,CAACL,KAAD,CAVkC,CAArC,CAYAN,SAAS,CAAC,UAAM,CACZQ,iBAAiB,GACpB,CAFQ,CAEN,CAACA,iBAAD,CAFM,CAAT,CAIA,GAAMM,CAAAA,gBAAgB,CAAGf,WAAW,CAAC,UAAM,CACvC,GAAIgB,CAAAA,EAAE,CAAGC,MAAM,CAACC,WAAP,CAAqB,IAA9B,CACAC,QAAQ,CAACC,eAAT,CAAyBC,KAAzB,CAA+BC,WAA/B,CAA2C,MAA3C,WAAsDN,EAAtD,QACH,CAHmC,CAGjC,EAHiC,CAApC,CAMAf,SAAS,CAAC,UAAM,CACZc,gBAAgB,GAChBE,MAAM,CAACM,gBAAP,CAAwB,QAAxB,CAAkCR,gBAAlC,EAEA,MAAO,WAAM,CACTE,MAAM,CAACO,mBAAP,CAA2B,QAA3B,CAAqCT,gBAArC,EACH,CAFD,CAGH,CAPQ,CAON,CAACA,gBAAD,CAPM,CAAT,CAQH","sourcesContent":["import {useCallback, useEffect} from 'react'\nimport {idbGet} from '../../Config/db'\nimport {onlineUserMountFromIDB} from '../../Models/user-model'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../Models/app'\n\nexport function useAppDb() {\n    const {$app: {token}} = useStore($appModel)\n    const getOnlineAccounts = useCallback(() => {\n        if (token) {\n            idbGet('online_accounts', 'online_accounts')\n                .then((res) => {\n                    if (res) {\n                        const data = JSON.parse(res)\n                        onlineUserMountFromIDB(data)\n                    }\n                })\n        }\n    }, [token])\n\n    useEffect(() => {\n        getOnlineAccounts()\n    }, [getOnlineAccounts])\n\n    const setStyleProperty = useCallback(() => {\n        let vh = window.innerHeight * 0.01\n        document.documentElement.style.setProperty('--vh', `${vh}px`)\n    }, [])\n\n\n    useEffect(() => {\n        setStyleProperty()\n        window.addEventListener('resize', setStyleProperty)\n\n        return () => {\n            window.removeEventListener('resize', setStyleProperty)\n        }\n    }, [setStyleProperty])\n}"]},"metadata":{},"sourceType":"module"}