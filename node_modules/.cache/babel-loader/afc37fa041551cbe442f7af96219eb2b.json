{"ast":null,"code":"import * as Yup from 'yup';\nimport Cookies from 'js-cookie';\nimport { useFormik } from 'formik';\nimport jwtDecode from 'jwt-decode';\nimport auth from '../../Service/auth';\nimport { useCallback, useState } from 'react';\nimport { tokenMount } from '../../Models/app';\nimport { useTranslation } from 'react-i18next';\nimport { isValidPhoneNumber } from 'libphonenumber-js';\nimport { getCurrentAccount } from '../../Models/account-model';\nimport { queryClient } from '../../App';\nconst values = {\n  phone: null,\n  activation_code: ''\n};\nexport function useFastAuth({\n  onClose,\n  action\n}) {\n  const {\n    t\n  } = useTranslation();\n  const [initialValues] = useState(values);\n  const [nextStep, setNextStep] = useState(false);\n  const [showResend, setShowResend] = useState(false);\n  const [deadline, setDeadline] = useState(Date.now() + 1000 * 120);\n  const validationSchema = Yup.object().shape({\n    phone: Yup.mixed().test('phoneValidation', t('invalid_phone_number'), data => {\n      if (data) {\n        const {\n          value,\n          countryCode\n        } = data;\n        return isValidPhoneNumber(value, countryCode);\n      }\n\n      return true;\n    }).required(t('required_field'))\n  });\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      const data = {\n        phone: `${values.phone.value}`\n      };\n\n      if (nextStep && values.activation_code) {\n        data.activation_code = values.activation_code.replace(/\\s/g, '');\n      }\n\n      auth.createFastAuth(data).then(res => {\n        if (res) {\n          if (res.data.phone) {\n            setNextStep(true);\n          }\n\n          if (res.data.access) {\n            let users = {};\n\n            if (Cookies.get('users')) {\n              const oldUsers = JSON.parse(Cookies.get('users'));\n              users = { ...oldUsers\n              };\n            }\n\n            users[jwtDecode(res.data.access).username] = res.data;\n            tokenMount(res.data.access);\n            Cookies.set('users', JSON.stringify(users));\n            Cookies.set('token', res.data.access);\n            Cookies.set('refresh-token', res.data.refresh);\n            getCurrentAccount(); // queryClient.clear()\n\n            onClose();\n\n            if (action) {\n              action();\n            }\n          }\n        }\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => setSubmitting(false));\n    }\n\n  });\n  const disabledButton = useCallback(() => {\n    return formik.isSubmitting || formik.touched.phone && !!formik.errors.phone;\n  }, [formik]);\n\n  const handleChange = (key, value) => {\n    formik.setFieldValue(key, value);\n  };\n\n  const onFinish = () => {\n    setShowResend(true);\n  };\n\n  const resend = useCallback(() => {\n    auth.createFastAuth({\n      phone: `+${formik.values.phone.value}`\n    }).then(res => {\n      if (res) {\n        setDeadline(Date.now() + 1000 * 120);\n        setShowResend(false);\n      }\n    });\n  }, [formik]);\n  let phone = formik.values.phone;\n  return {\n    formik,\n    handleChange,\n    disabledButton,\n    nextStep,\n    deadline,\n    showResend,\n    onFinish,\n    phone,\n    resend\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/auth/use-fast-auth.js"],"names":["Yup","Cookies","useFormik","jwtDecode","auth","useCallback","useState","tokenMount","useTranslation","isValidPhoneNumber","getCurrentAccount","queryClient","values","phone","activation_code","useFastAuth","onClose","action","t","initialValues","nextStep","setNextStep","showResend","setShowResend","deadline","setDeadline","Date","now","validationSchema","object","shape","mixed","test","data","value","countryCode","required","formik","onSubmit","setSubmitting","replace","createFastAuth","then","res","access","users","get","oldUsers","JSON","parse","username","set","stringify","refresh","catch","error","console","log","finally","disabledButton","isSubmitting","touched","errors","handleChange","key","setFieldValue","onFinish","resend"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\nimport Cookies from 'js-cookie'\nimport {useFormik} from 'formik'\nimport jwtDecode from 'jwt-decode'\nimport auth from '../../Service/auth'\nimport {useCallback, useState} from 'react'\nimport {tokenMount} from '../../Models/app'\nimport {useTranslation} from 'react-i18next'\nimport {isValidPhoneNumber} from 'libphonenumber-js'\nimport {getCurrentAccount} from '../../Models/account-model'\nimport {queryClient} from '../../App'\n\nconst values = {\n    phone: null,\n    activation_code: ''\n}\n\nexport function useFastAuth({onClose, action}) {\n    const {t} = useTranslation()\n    const [initialValues] = useState(values)\n    const [nextStep, setNextStep] = useState(false)\n    const [showResend, setShowResend] = useState(false)\n    const [deadline, setDeadline] = useState(Date.now() + 1000 * 120)\n    \n    const validationSchema = Yup.object().shape({\n        phone: Yup.mixed()\n            .test('phoneValidation', t('invalid_phone_number'), (data) => {\n                if (data) {\n                    const {value, countryCode} = data\n                    return isValidPhoneNumber(value, countryCode)\n                }\n                return true\n            })\n            .required(t('required_field'))\n    })\n    \n    const formik = useFormik({\n        initialValues,\n        validationSchema,\n        onSubmit(values, {setSubmitting}) {\n            setSubmitting(true)\n            const data = {phone: `${values.phone.value}`}\n            \n            if (nextStep && values.activation_code) {\n                data.activation_code = values.activation_code.replace(/\\s/g, '')\n            }\n            \n            auth.createFastAuth(data)\n                .then((res) => {\n                    if (res) {\n                        if (res.data.phone) {\n                            setNextStep(true)\n                        }\n                        \n                        if (res.data.access) {\n                            let users = {}\n                            if (Cookies.get('users')) {\n                                const oldUsers = JSON.parse(Cookies.get('users'))\n                                users = {...oldUsers}\n                            }\n                            users[jwtDecode(res.data.access).username] = res.data\n                            tokenMount(res.data.access)\n                            Cookies.set('users', JSON.stringify(users))\n                            Cookies.set('token', res.data.access)\n                            Cookies.set('refresh-token', res.data.refresh)\n                            getCurrentAccount()\n                            // queryClient.clear()\n                            onClose()\n                            if (action) {\n                                action()\n                            }\n                        }\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n                .finally(() => setSubmitting(false))\n        }\n    })\n    \n    const disabledButton = useCallback(() => {\n        return (\n            formik.isSubmitting\n            || (formik.touched.phone && !!formik.errors.phone)\n        )\n    }, [formik])\n    \n    const handleChange = (key, value) => {\n        formik.setFieldValue(key, value)\n    }\n    \n    const onFinish = () => {\n        setShowResend(true)\n    }\n    \n    const resend = useCallback(() => {\n        auth.createFastAuth({phone: `+${formik.values.phone.value}`})\n            .then((res) => {\n                if (res) {\n                    setDeadline(Date.now() + 1000 * 120)\n                    setShowResend(false)\n                }\n            })\n    }, [formik])\n    let phone = formik.values.phone\n    \n    return {\n        formik,\n        handleChange,\n        disabledButton,\n        nextStep,\n        deadline,\n        showResend,\n        onFinish,\n        phone,\n        resend\n    }\n}"]},"metadata":{},"sourceType":"module"}