{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/SelectionList/ListBody/index.jsx\";\nimport React from 'react';\nimport { ArrowIosRightSvg } from '../../../Icons/Arrow';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { BodyItemWrapper, ItemCheckBox, ItemCheckBoxWrapper, LoadingSpinWrapper, SelectionListBody } from '../style';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { Spin } from 'antd';\nexport const ListBody = ({\n  loadMore,\n  list,\n  getChildren,\n  onSelect,\n  selected\n}) => {\n  const {\n    loading,\n    data,\n    result\n  } = list;\n\n  const handleClick = item => {\n    if (item.has_subs) {\n      getChildren(item);\n    } else {\n      onSelect(item);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(SelectionListBody, {\n    id: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, loading ? /*#__PURE__*/React.createElement(LoadingSpinWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Spin, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 29\n    }\n  })) : /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    dataLength: (result === null || result === void 0 ? void 0 : result.nextOffset) || 10,\n    hasMore: !loading && !!(result === null || result === void 0 ? void 0 : result.next),\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 25\n    }\n  }, (data === null || data === void 0 ? void 0 : data.length) > 0 && (data === null || data === void 0 ? void 0 : data.length) > 0 && data.map(item => /*#__PURE__*/React.createElement(BodyItemWrapper, {\n    key: item.id,\n    onClick: () => handleClick(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 37\n    }\n  }, item.has_subs && /*#__PURE__*/React.createElement(IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 49\n    }\n  }, /*#__PURE__*/React.createElement(ArrowIosRightSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 53\n    }\n  })), /*#__PURE__*/React.createElement(ItemCheckBoxWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 41\n    }\n  }, item.name, !item.has_subs && /*#__PURE__*/React.createElement(ItemCheckBox, {\n    checked: selected && selected.id === item.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 53\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/SelectionList/ListBody/index.jsx"],"names":["React","ArrowIosRightSvg","IconBox","BodyItemWrapper","ItemCheckBox","ItemCheckBoxWrapper","LoadingSpinWrapper","SelectionListBody","InfiniteScroll","Spin","ListBody","loadMore","list","getChildren","onSelect","selected","loading","data","result","handleClick","item","has_subs","nextOffset","next","length","map","id","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,gBAAR,QAA+B,sBAA/B;AACA,SAAQC,OAAR,QAAsB,oCAAtB;AACA,SAAQC,eAAR,EAAyBC,YAAzB,EAAuCC,mBAAvC,EAA4DC,kBAA5D,EAAgFC,iBAAhF,QAAwG,UAAxG;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAAQC,IAAR,QAAmB,MAAnB;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA,QAAD;AAAWC,EAAAA,IAAX;AAAiBC,EAAAA,WAAjB;AAA8BC,EAAAA,QAA9B;AAAwCC,EAAAA;AAAxC,CAAD,KAAuD;AAC3E,QAAM;AAACC,IAAAA,OAAD;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,MAA0BN,IAAhC;;AAEA,QAAMO,WAAW,GAAIC,IAAD,IAAU;AAC1B,QAAIA,IAAI,CAACC,QAAT,EAAmB;AACfR,MAAAA,WAAW,CAACO,IAAD,CAAX;AACH,KAFD,MAEO;AACHN,MAAAA,QAAQ,CAACM,IAAD,CAAR;AACH;AACJ,GAND;;AAQA,sBACI,oBAAC,iBAAD;AAAmB,IAAA,EAAE,EAAC,eAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQJ,OAAO,gBAEC,oBAAC,kBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CAFD,gBAOC,oBAAC,cAAD;AACI,IAAA,IAAI,EAAEL,QADV;AAEI,IAAA,UAAU,EAAE,CAAAO,MAAM,SAAN,IAAAA,MAAM,WAAN,YAAAA,MAAM,CAAEI,UAAR,KAAsB,EAFtC;AAGI,IAAA,OAAO,EAAE,CAACN,OAAD,IAAY,CAAC,EAACE,MAAD,aAACA,MAAD,uBAACA,MAAM,CAAEK,IAAT,CAH1B;AAII,IAAA,MAAM,eAAE,uDAJZ;AAKI,IAAA,gBAAgB,EAAC,eALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQQ,CAAAN,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,MAAN,IAAe,CAAf,IAAoB,CAAAP,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEO,MAAN,IAAe,CAAnC,IAAwCP,IAAI,CAACQ,GAAL,CAAUL,IAAD,iBAC7C,oBAAC,eAAD;AACI,IAAA,GAAG,EAAEA,IAAI,CAACM,EADd;AAEI,IAAA,OAAO,EAAE,MAAMP,WAAW,CAACC,IAAD,CAF9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKQA,IAAI,CAACC,QAAL,iBACI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANZ,eAWI,oBAAC,mBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKD,IAAI,CAACO,IADV,EAGQ,CAACP,IAAI,CAACC,QAAN,iBACI,oBAAC,YAAD;AAAc,IAAA,OAAO,EAAEN,QAAQ,IAAIA,QAAQ,CAACW,EAAT,KAAgBN,IAAI,CAACM,EAAxD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJZ,CAXJ,CADoC,CARhD,CAThB,CADJ;AA8CH,CAzDM","sourcesContent":["import React from 'react'\r\nimport {ArrowIosRightSvg} from '../../../Icons/Arrow'\r\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\r\nimport {BodyItemWrapper, ItemCheckBox, ItemCheckBoxWrapper, LoadingSpinWrapper, SelectionListBody} from '../style'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {Spin} from 'antd'\r\n\r\nexport const ListBody = ({loadMore, list, getChildren, onSelect, selected}) => {\r\n    const {loading, data, result} = list\r\n    \r\n    const handleClick = (item) => {\r\n        if (item.has_subs) {\r\n            getChildren(item)\r\n        } else {\r\n            onSelect(item)\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <SelectionListBody id='scrollableDiv'>\r\n            {\r\n                loading\r\n                    ? (\r\n                        <LoadingSpinWrapper>\r\n                            <Spin/>\r\n                        </LoadingSpinWrapper>\r\n                    )\r\n                    : (\r\n                        <InfiniteScroll\r\n                            next={loadMore}\r\n                            dataLength={result?.nextOffset || 10}\r\n                            hasMore={!loading && !!result?.next}\r\n                            loader={<>...loading</>}\r\n                            scrollableTarget='scrollableDiv'\r\n                        >\r\n                            {\r\n                                data?.length > 0 && data?.length > 0 && data.map((item) => (\r\n                                    <BodyItemWrapper\r\n                                        key={item.id}\r\n                                        onClick={() => handleClick(item)}\r\n                                    >\r\n                                        {\r\n                                            item.has_subs && (\r\n                                                <IconBox>\r\n                                                    <ArrowIosRightSvg/>\r\n                                                </IconBox>\r\n                                            )\r\n                                        }\r\n                                        <ItemCheckBoxWrapper>\r\n                                            {item.name}\r\n                                            {\r\n                                                !item.has_subs && (\r\n                                                    <ItemCheckBox checked={selected && selected.id === item.id}/>\r\n                                                )\r\n                                            }\r\n                                        </ItemCheckBoxWrapper>\r\n                                    </BodyItemWrapper>\r\n                                ))\r\n                            }\r\n                        </InfiniteScroll>\r\n                    )\r\n            }\r\n        </SelectionListBody>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}