{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { POST_ACTIONS } from '../../Constants';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { $accountModel } from '../../Models/account-model';\nimport { tapeLikeMount, tapeRemoveLikesMount } from '../../Models/tape-model';\nimport { useTranslation } from 'react-i18next';\nexport function usePostActions(data) {\n  const {\n    t\n  } = useTranslation();\n  const {\n    username\n  } = useParams();\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const {\n    push,\n    location: {\n      pathname\n    }\n  } = useHistory();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const [openOverlay, setOpenOverlay] = useState(false);\n  const addMethod = useCallback(type => {\n    if (currentProfile && !!token) {\n      let author = data.author.slug_name;\n\n      if (data.author.type === 'user') {\n        author = `@${data.author.slug_name}`;\n      }\n\n      const params = {\n        post_id: data.id,\n        author\n      };\n\n      if (type === POST_ACTIONS.LIKES_COUNT) {\n        tapeLikeMount(params);\n      }\n    } else {\n      setOpenOverlay(true);\n    }\n  }, [currentProfile, token, data]);\n  const deleteMethod = useCallback(type => {\n    if (currentProfile && !!token) {\n      let author = data.author.slug_name;\n\n      if (data.author.type === 'user') {\n        author = `@${data.author.slug_name}`;\n      }\n\n      const params = {\n        post_id: data.id,\n        author\n      };\n\n      if (type === POST_ACTIONS.LIKES_COUNT) {\n        tapeRemoveLikesMount(params);\n      }\n    }\n  }, [currentProfile, token, data]);\n  const postCommentMethod = useCallback(type => {\n    if (currentProfile && !!token) {\n      const params = {\n        post_id: data.id\n      };\n\n      if (type === POST_ACTIONS.COMMENTS_COUNT) {\n        push(`/tape/${params.post_id}`);\n      }\n\n      saveURLMount(pathname);\n    } else {\n      setOpenOverlay(true);\n    }\n  }, [currentProfile, token, data, push, pathname]);\n  const handleClick = useCallback(type => {\n    var _data$author;\n\n    if (type === POST_ACTIONS.LIKES_COUNT) {\n      if (data.is_liked) {\n        deleteMethod(type);\n      } else {\n        addMethod(type);\n      }\n    }\n\n    if (type === POST_ACTIONS.COMMENTS_COUNT) {\n      postCommentMethod(type);\n    }\n\n    if (type === POST_ACTIONS.REPOST_COUNT && (data === null || data === void 0 ? void 0 : (_data$author = data.author) === null || _data$author === void 0 ? void 0 : _data$author.slug_name) !== (currentProfile === null || currentProfile === void 0 ? void 0 : currentProfile.slug_name) && !!token) {\n      push(`/repost/${data.id}`) && saveURLMount(pathname);\n    } else {\n      setOpenOverlay(true);\n    }\n  }, [addMethod, data, deleteMethod, postCommentMethod, push, currentProfile, token, pathname]);\n\n  const getStyle = item => {\n    currentProfile && (currentProfile.slug_name = username && item.title === 'reply' && {\n      display: 'none'\n    });\n  };\n\n  const generatePostIndicators = item => {\n    switch (item.title) {\n      case 'like':\n        return `${data.likes_count > 0 ? data.likes_count : ''} ${t('likes')}`;\n\n      case 'comment':\n        return `${data.comments_count > 0 ? data.comments_count : ''} ${t('comments')}`;\n\n      case 'share':\n        return `${data.repost_count > 0 ? data.repost_count : ''} ${t('shares')}`;\n\n      default:\n        return '';\n    }\n  };\n\n  return {\n    handleClick,\n    getStyle,\n    generatePostIndicators,\n    setOpenOverlay,\n    openOverlay\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/post/use-post-actions.js"],"names":["useCallback","useState","useStore","$appModel","saveURLMount","POST_ACTIONS","useHistory","useParams","$accountModel","tapeLikeMount","tapeRemoveLikesMount","useTranslation","usePostActions","data","t","username","$app","token","push","location","pathname","$profiles","currentProfile","openOverlay","setOpenOverlay","addMethod","type","author","slug_name","params","post_id","id","LIKES_COUNT","deleteMethod","postCommentMethod","COMMENTS_COUNT","handleClick","is_liked","REPOST_COUNT","getStyle","item","title","display","generatePostIndicators","likes_count","comments_count","repost_count"],"mappings":"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","sourcesContent":["import {useCallback, useState} from 'react'\nimport {useStore} from 'effector-react'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {POST_ACTIONS} from '../../Constants'\nimport {useHistory, useParams} from 'react-router-dom'\nimport {$accountModel} from '../../Models/account-model'\nimport {tapeLikeMount, tapeRemoveLikesMount} from '../../Models/tape-model'\nimport {useTranslation} from 'react-i18next'\n\n\nexport function usePostActions(data) {\n    const {t} = useTranslation()\n    const {username} = useParams()\n    const {$app: {token}} = useStore($appModel)\n    const {push, location: {pathname}} = useHistory()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const [openOverlay, setOpenOverlay] = useState(false)\n    \n    const addMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            let author = data.author.slug_name\n            if (data.author.type === 'user') {\n                author = `@${data.author.slug_name}`\n            }\n            const params = {\n                post_id: data.id,\n                author\n            }\n            if (type === POST_ACTIONS.LIKES_COUNT) {\n                tapeLikeMount(params)\n            }\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [currentProfile, token, data])\n    \n    const deleteMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            let author = data.author.slug_name\n            if (data.author.type === 'user') {\n                author = `@${data.author.slug_name}`\n            }\n            const params = {\n                post_id: data.id,\n                author\n            }\n            if (type === POST_ACTIONS.LIKES_COUNT) {\n                tapeRemoveLikesMount(params)\n            }\n        }\n    }, [currentProfile, token, data])\n    \n    const postCommentMethod = useCallback((type) => {\n        if (currentProfile && !!token) {\n            const params = {\n                post_id: data.id\n            }\n            if (type === POST_ACTIONS.COMMENTS_COUNT) {\n                push(`/tape/${params.post_id}`)\n            }\n            saveURLMount(pathname)\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [currentProfile, token, data, push, pathname])\n    \n    const handleClick = useCallback((type) => {\n        if (type === POST_ACTIONS.LIKES_COUNT) {\n            if (data.is_liked) {\n                deleteMethod(type)\n            } else {\n                addMethod(type)\n            }\n        }\n        \n        if (type === POST_ACTIONS.COMMENTS_COUNT) {\n            postCommentMethod(type)\n        }\n        \n        if (type === POST_ACTIONS.REPOST_COUNT && data?.author?.slug_name !== currentProfile?.slug_name && !!token) {\n            push(`/repost/${data.id}`) && saveURLMount(pathname)\n        } else {\n            setOpenOverlay(true)\n        }\n    }, [addMethod, data, deleteMethod, postCommentMethod, push, currentProfile, token, pathname])\n    \n    const getStyle = (item) => {\n        currentProfile && (\n            currentProfile.slug_name = username\n                && item.title === 'reply' && {display: 'none'}\n        )\n    }\n    \n    const generatePostIndicators = (item) => {\n        switch (item.title) {\n            case 'like':\n                return `${data.likes_count > 0 ? data.likes_count : ''} ${t('likes')}`\n            case 'comment':\n                return `${data.comments_count > 0 ? data.comments_count : ''} ${t('comments')}`\n            case 'share':\n                return `${data.repost_count > 0 ? data.repost_count : ''} ${t('shares')}`\n            default:\n                return ''\n        }\n    }\n    \n    return {handleClick, getStyle, generatePostIndicators, setOpenOverlay, openOverlay}\n}"]},"metadata":{},"sourceType":"module"}