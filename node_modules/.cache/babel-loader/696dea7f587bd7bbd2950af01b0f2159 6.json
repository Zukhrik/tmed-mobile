{"ast":null,"code":"import _toConsumableArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{createStore,combine}from'effector';import{fetchUserRegion}from'./effects';var $userRegion=createStore({loading:false,data:[],result:{},error:false}).on(fetchUserRegion.pending,function(state,loading){return _objectSpread(_objectSpread({},state),{},{loading:loading});}).on(fetchUserRegion.fail,function(state,_ref){var error=_ref.error;return _objectSpread(_objectSpread({},state),{},{error:error,data:[],result:{}});}).on(fetchUserRegion.done,function(state,res){var clear=res.params.clear;var newData=clear?res.result.data.results:[].concat(_toConsumableArray(state.data),_toConsumableArray(res.result.data.results));return _objectSpread(_objectSpread({},state),{},{result:res.result.data,data:newData});});export var $regionModel=combine({$userRegion:$userRegion});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/region-model/stores.js"],"names":["createStore","combine","fetchUserRegion","$userRegion","loading","data","result","error","on","pending","state","fail","done","res","clear","params","newData","results","$regionModel"],"mappings":"iVAAA,OAAQA,WAAR,CAAqBC,OAArB,KAAmC,UAAnC,CACA,OAAQC,eAAR,KAA8B,WAA9B,CAEA,GAAMC,CAAAA,WAAW,CAAGH,WAAW,CAAC,CAACI,OAAO,CAAE,KAAV,CAAiBC,IAAI,CAAE,EAAvB,CAA2BC,MAAM,CAAE,EAAnC,CAAuCC,KAAK,CAAE,KAA9C,CAAD,CAAX,CAChBC,EADgB,CACbN,eAAe,CAACO,OADH,CACY,SAACC,KAAD,CAAQN,OAAR,wCAAyBM,KAAzB,MAAgCN,OAAO,CAAPA,OAAhC,IADZ,EAEhBI,EAFgB,CAEbN,eAAe,CAACS,IAFH,CAES,SAACD,KAAD,UAASH,CAAAA,KAAT,MAASA,KAAT,uCACrBG,KADqB,MACdH,KAAK,CAALA,KADc,CACPF,IAAI,CAAE,EADC,CACGC,MAAM,CAAE,EADX,IAFT,EAKhBE,EALgB,CAKbN,eAAe,CAACU,IALH,CAKS,SAACF,KAAD,CAAQG,GAAR,CAAgB,CACxC,GAAgBC,CAAAA,KAAhB,CAA0BD,GAA1B,CAAOE,MAAP,CAAgBD,KAAhB,CACA,GAAME,CAAAA,OAAO,CAAGF,KAAK,CAAGD,GAAG,CAACP,MAAJ,CAAWD,IAAX,CAAgBY,OAAnB,8BAAiCP,KAAK,CAACL,IAAvC,qBAAgDQ,GAAG,CAACP,MAAJ,CAAWD,IAAX,CAAgBY,OAAhE,EAArB,CACA,sCACKP,KADL,MACYJ,MAAM,CAAEO,GAAG,CAACP,MAAJ,CAAWD,IAD/B,CACqCA,IAAI,CAAEW,OAD3C,GAGD,CAXgB,CAApB,CAaA,MAAO,IAAME,CAAAA,YAAY,CAAGjB,OAAO,CAAC,CAClCE,WAAW,CAAXA,WADkC,CAAD,CAA5B","sourcesContent":["import {createStore, combine} from 'effector';\r\nimport {fetchUserRegion} from './effects';\r\n\r\nconst $userRegion = createStore({loading: false, data: [], result: {}, error: false})\r\n   .on(fetchUserRegion.pending, (state, loading) => ({...state, loading}))\r\n   .on(fetchUserRegion.fail, (state, {error}) => ({\r\n     ...state, error, data: [], result: {}\r\n   }))\r\n   .on(fetchUserRegion.done, (state, res) => {\r\n     const {params: {clear}} = res\r\n     const newData = clear ? res.result.data.results : [...state.data, ...res.result.data.results]\r\n     return {\r\n       ...state, result: res.result.data, data: newData\r\n     }\r\n   })\r\n\r\nexport const $regionModel = combine({\r\n  $userRegion\r\n})"]},"metadata":{},"sourceType":"module"}