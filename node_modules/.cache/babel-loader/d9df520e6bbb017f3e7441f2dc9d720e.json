{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessageInput/index.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { ChatReplyWrapper, MessageInputContainer, MessageSendButton } from '../style';\nimport { Col, Row } from 'antd';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { AttachSvg } from '../../../Icons/Attach';\nimport { SmileSvg } from '../../../Icons/Smile';\nimport { ArrowUpSvg } from '../../../Icons/Arrow';\nimport { useTranslation } from 'react-i18next';\nimport { SearchMicSvg } from '../../../Icons/SearchMic';\nimport { useStore } from 'effector-react';\nimport { $chatModel } from '../../../Models/chat-model';\nimport { Title } from '../../../UIComponents/Typography/Title';\nimport { Text } from '../../../UIComponents/Typography/Text';\nimport { CloseSvg } from '../../../Icons/Close';\nimport { AudioMessage } from './AudioMessage';\nexport const MessageInput = ({\n  inputRef,\n  uploadRef,\n  formik,\n  inputWrapperRef,\n  handleFocus,\n  handleCancelEditAndReply,\n  handleGetFile\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    $temporaryMessage: tmpMsg\n  } = useStore($chatModel);\n  const msgTxt = formik.values.text;\n  const [showAudio, setShowAudio] = useState(false);\n\n  const handleClick = () => {\n    if (msgTxt.length === 0 && !showAudio) {\n      setShowAudio(true);\n    }\n  };\n\n  useEffect(() => {\n    if (inputRef.current) {\n      inputRef.current.addEventListener('touchmove', e => {\n        e.preventDefault();\n      });\n    }\n  }, [inputRef]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }\n  }, tmpMsg && /*#__PURE__*/React.createElement(ChatReplyWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 21\n    }\n  }, tmpMsg.type === 'reply' && /*#__PURE__*/React.createElement(Title, {\n    level: 5,\n    weight: 500,\n    color: \"var(--primary-dwed)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 33\n    }\n  }, tmpMsg.sender.full_name), tmpMsg.type === 'edit' && /*#__PURE__*/React.createElement(Text, {\n    level: 5,\n    color: \"var(--primary-dwed)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 33\n    }\n  }, t('editing')), /*#__PURE__*/React.createElement(Title, {\n    weight: 400,\n    level: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 29\n    }\n  }, tmpMsg.text)), /*#__PURE__*/React.createElement(IconBox, {\n    onClick: handleCancelEditAndReply,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CloseSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }))), /*#__PURE__*/React.createElement(MessageInputContainer, {\n    ref: inputWrapperRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 8,\n    wrap: false,\n    align: \"bottom\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"file-input\",\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IconBox, {\n    onClick: () => uploadRef.current.click(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(AttachSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    ref: uploadRef,\n    onChange: e => handleGetFile(e.target.files[0]),\n    style: {\n      display: 'none'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 29\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    flex: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-input\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"text\",\n    ref: inputRef,\n    onFocus: handleFocus,\n    placeholder: t('message'),\n    value: formik.values.text,\n    onChange: formik.handleChange,\n    style: {\n      height: inputRef.current ? `${inputRef.current.scrollHeight}px` : '25px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(SmileSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  })))), /*#__PURE__*/React.createElement(Col, {\n    span: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(MessageSendButton, {\n    type: msgTxt.length === 0 && !showAudio ? 'button' : 'submit',\n    isVoice: msgTxt.length === 0 && !showAudio,\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 29\n    }\n  }, msgTxt.length === 0 && !showAudio ? /*#__PURE__*/React.createElement(SearchMicSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 43\n    }\n  }) : /*#__PURE__*/React.createElement(ArrowUpSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 43\n    }\n  })), showAudio && /*#__PURE__*/React.createElement(AudioMessage, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 37\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Chat/MessageInput/index.jsx"],"names":["React","useEffect","useState","ChatReplyWrapper","MessageInputContainer","MessageSendButton","Col","Row","IconBox","AttachSvg","SmileSvg","ArrowUpSvg","useTranslation","SearchMicSvg","useStore","$chatModel","Title","Text","CloseSvg","AudioMessage","MessageInput","inputRef","uploadRef","formik","inputWrapperRef","handleFocus","handleCancelEditAndReply","handleGetFile","t","$temporaryMessage","tmpMsg","msgTxt","values","text","showAudio","setShowAudio","handleClick","length","current","addEventListener","e","preventDefault","handleSubmit","type","sender","full_name","click","target","files","display","handleChange","height","scrollHeight"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\nimport {ChatReplyWrapper, MessageInputContainer, MessageSendButton} from '../style'\nimport {Col, Row} from 'antd'\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\nimport {AttachSvg} from '../../../Icons/Attach'\nimport {SmileSvg} from '../../../Icons/Smile'\nimport {ArrowUpSvg} from '../../../Icons/Arrow'\nimport {useTranslation} from 'react-i18next'\nimport {SearchMicSvg} from '../../../Icons/SearchMic'\nimport {useStore} from 'effector-react'\nimport {$chatModel} from '../../../Models/chat-model'\nimport {Title} from '../../../UIComponents/Typography/Title'\nimport {Text} from '../../../UIComponents/Typography/Text'\nimport {CloseSvg} from '../../../Icons/Close'\nimport {AudioMessage} from './AudioMessage'\n\nexport const MessageInput = (\n    {\n        inputRef,\n        uploadRef,\n        formik,\n        inputWrapperRef,\n        handleFocus,\n        handleCancelEditAndReply,\n        handleGetFile\n    }\n) => {\n    const {t} = useTranslation()\n    const {$temporaryMessage: tmpMsg} = useStore($chatModel)\n    const msgTxt = formik.values.text\n    const [showAudio, setShowAudio] = useState(false)\n\n    const handleClick = () => {\n        if(msgTxt.length === 0 && !showAudio) {\n            setShowAudio(true)\n        }\n    }\n\n    useEffect(() => {\n        if (inputRef.current) {\n            inputRef.current.addEventListener('touchmove', (e) => {\n                e.preventDefault();\n            });\n        }\n    }, [inputRef])\n\n    return (\n        <>\n            <form onSubmit={formik.handleSubmit}>\n                {\n                    tmpMsg &&\n                    <ChatReplyWrapper>\n                        {\n                            tmpMsg.type === 'reply' && (\n                                <Title level={5} weight={500} color='var(--primary-dwed)'>\n                                    {tmpMsg.sender.full_name}\n                                </Title>\n                            )\n                        }\n                        {\n                            tmpMsg.type === 'edit' && (\n                                <Text level={5} color='var(--primary-dwed)'>\n                                    {t('editing')}\n                                </Text>\n                            )\n                        }\n                        <Title weight={400} level={5}>\n                            <span>{tmpMsg.text}</span>\n                        </Title>\n                        <IconBox onClick={handleCancelEditAndReply}>\n                            <CloseSvg/>\n                        </IconBox>\n                    </ChatReplyWrapper>\n                }\n                <MessageInputContainer ref={inputWrapperRef}>\n                    <Row gutter={8} wrap={false} align='bottom'>\n                        <Col className='file-input' span='auto'>\n                            <IconBox onClick={() => uploadRef.current.click()}>\n                                <AttachSvg/>\n                            </IconBox>\n                            <input\n                                type='file'\n                                ref={uploadRef}\n                                onChange={(e) => handleGetFile(e.target.files[0])}\n                                style={{display: 'none'}}\n                            />\n                        </Col>\n                        <Col span='auto' flex={1}>\n                            <div className='text-input'>\n                        <textarea\n                            name='text'\n                            ref={inputRef}\n                            onFocus={handleFocus}\n                            placeholder={t('message')}\n                            value={formik.values.text}\n                            onChange={formik.handleChange}\n                            style={{height: inputRef.current ? `${(inputRef.current.scrollHeight)}px` : '25px'}}\n                        />\n                                <IconBox>\n                                    <SmileSvg/>\n                                </IconBox>\n                            </div>\n                        </Col>\n                        <Col span='auto'>\n                            <MessageSendButton\n                                type={msgTxt.length === 0 && !showAudio ? 'button' : 'submit'}\n                                isVoice={msgTxt.length === 0 && !showAudio}\n                                onClick={handleClick}\n                            >\n                                {\n                                    msgTxt.length === 0 && !showAudio\n                                        ? <SearchMicSvg/>\n                                        : <ArrowUpSvg/>\n                                }\n                            </MessageSendButton>\n                            {\n                                showAudio && (\n                                    <AudioMessage />\n                                )\n                            }\n                        </Col>\n                    </Row>\n                </MessageInputContainer>\n            </form>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}