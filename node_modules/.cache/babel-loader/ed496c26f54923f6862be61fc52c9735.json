{"ast":null,"code":"import { useCallback } from 'react';\nimport { useListQuery, useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useParams } from 'react-router-dom';\nimport { $appModel } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { useMutation } from 'react-query';\nimport { queryClient } from '../../App';\nimport cart from '../../Service-v2/cart';\nexport function useOrgOrder() {\n  const {\n    query\n  } = useListQuery();\n  const {\n    organization\n  } = useParams();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''; // const checkoutOffering = useCallback((event) => {\n  //     const orgSpecList = event.responsible\n  //\n  //     if (!event.loading) {\n  //         changeLoadingStatusOffering({id: event.id, status: true})\n  //         if (!event.inCart) {\n  //             const params = {\n  //                 org_slug_name: event.organization,\n  //                 data: {\n  //                     offering_id: event.id,\n  //                     responsible_id: specId ? specId : orgSpecList[0].id\n  //                 }\n  //             }\n  //             order.postOrgOrderCart(params)\n  //                 .then((res) => {\n  //                     if (res) {\n  //                         saveURLMount(pathname)\n  //                         changeOrgOfferingStatus({\n  //                             offering_id: params.data.offering_id,\n  //                             status: true,\n  //                             loadingStatus: false\n  //                         })\n  //                         getOrgOrderCartsMount({\n  //                             org_slug_name: event.organization,\n  //                             params: {limit: 1, offset: 0},\n  //                             clear: true\n  //                         })\n  //                     }\n  //                 })\n  //                 .catch((e) => {\n  //                     console.log(e.response)\n  //                 })\n  //         } else {\n  //             order.deleteOrderCart({offering_id: event.id})\n  //                 .then((res) => {\n  //                     if (res) {\n  //                         changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n  //                         getOrgOrderCartsMount({\n  //                             org_slug_name: event.organization,\n  //                             params: {limit: 1, offset: 0},\n  //                             clear: true\n  //                         })\n  //                     }\n  //                 })\n  //                 .catch((e) => {\n  //                     console.log(e.response)\n  //                 })\n  //         }\n  //     }\n  //\n  // }, [specId, pathname])\n\n  const create = useMutation(cart.createCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const {\n        pages\n      } = queryClient.getQueryData(['/org/offerings', organization, query]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization], pages);\n    },\n    onSuccess: () => {\n      getOrgOrderCartsMount({\n        org_slug_name: organization,\n        params: {\n          limit: 1,\n          offset: 0\n        },\n        clear: true\n      });\n    },\n    onError: (err, itemId, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization]);\n    }\n  });\n  const remove = useMutation(order.deleteOrderCart, {\n    onMutate: itemInfo => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo);\n    },\n    onSuccess: () => {\n      getOrgOrderCartsMount({\n        org_slug_name: organization,\n        params: {\n          limit: 1,\n          offset: 0\n        },\n        clear: true\n      });\n    },\n    onError: (err, newData, rollback) => rollback(),\n    onSettled: itemInfo => {\n      queryClient.invalidateQueries(['/org/offerings', organization, query]).then(res => {\n        if (res) {\n          getOrgOrderCartsMount({\n            org_slug_name: organization,\n            params: {\n              limit: 1,\n              offset: 0\n            },\n            clear: true\n          });\n        }\n      });\n    }\n  });\n  const onCreatingCartItem = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (event.inCart) {\n      remove.mutate({\n        offering_id: event.id\n      });\n    } else {\n      const data = {\n        offering_id: event.id,\n        responsible_id: specId ? specId : orgSpecList[0].id,\n        qty: event.qty ? event.qty : 1\n      };\n      create.mutate(params);\n    }\n  }, [create, specId, remove]);\n  const getIsLoading = useCallback(id => {\n    var _create$variables, _create$variables$dat, _remove$variables;\n\n    if (create.isLoading && (create === null || create === void 0 ? void 0 : (_create$variables = create.variables) === null || _create$variables === void 0 ? void 0 : (_create$variables$dat = _create$variables.data) === null || _create$variables$dat === void 0 ? void 0 : _create$variables$dat.offering_id) === id) {\n      return true;\n    } else if (remove.isLoading && (remove === null || remove === void 0 ? void 0 : (_remove$variables = remove.variables) === null || _remove$variables === void 0 ? void 0 : _remove$variables.offering_id) === id) {\n      return true;\n    }\n\n    return false;\n  }, [create, remove]);\n  return {\n    currency,\n    create,\n    remove,\n    getIsLoading,\n    onCreatingCartItem\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useListQuery","useUrlParams","useStore","order","useParams","$appModel","$accountModel","getOrgOrderCartsMount","useMutation","queryClient","cart","useOrgOrder","query","organization","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","create","createCart","onMutate","itemInfo","cancelQueries","pages","getQueryData","setQueryData","onSuccess","org_slug_name","params","limit","offset","clear","onError","err","itemId","rollback","onSettled","invalidateQueries","remove","deleteOrderCart","previousTodo","newData","then","res","onCreatingCartItem","event","orgSpecList","responsible","inCart","mutate","offering_id","id","data","responsible_id","qty","getIsLoading","isLoading","variables"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport {useListQuery, useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useParams} from 'react-router-dom'\nimport {$appModel} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {useMutation} from 'react-query'\nimport {queryClient} from '../../App'\nimport cart from '../../Service-v2/cart'\n\nexport function useOrgOrder() {\n    const {query} = useListQuery()\n    const {organization} = useParams()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    // const checkoutOffering = useCallback((event) => {\n    //     const orgSpecList = event.responsible\n    //\n    //     if (!event.loading) {\n    //         changeLoadingStatusOffering({id: event.id, status: true})\n    //         if (!event.inCart) {\n    //             const params = {\n    //                 org_slug_name: event.organization,\n    //                 data: {\n    //                     offering_id: event.id,\n    //                     responsible_id: specId ? specId : orgSpecList[0].id\n    //                 }\n    //             }\n    //             order.postOrgOrderCart(params)\n    //                 .then((res) => {\n    //                     if (res) {\n    //                         saveURLMount(pathname)\n    //                         changeOrgOfferingStatus({\n    //                             offering_id: params.data.offering_id,\n    //                             status: true,\n    //                             loadingStatus: false\n    //                         })\n    //                         getOrgOrderCartsMount({\n    //                             org_slug_name: event.organization,\n    //                             params: {limit: 1, offset: 0},\n    //                             clear: true\n    //                         })\n    //                     }\n    //                 })\n    //                 .catch((e) => {\n    //                     console.log(e.response)\n    //                 })\n    //         } else {\n    //             order.deleteOrderCart({offering_id: event.id})\n    //                 .then((res) => {\n    //                     if (res) {\n    //                         changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n    //                         getOrgOrderCartsMount({\n    //                             org_slug_name: event.organization,\n    //                             params: {limit: 1, offset: 0},\n    //                             clear: true\n    //                         })\n    //                     }\n    //                 })\n    //                 .catch((e) => {\n    //                     console.log(e.response)\n    //                 })\n    //         }\n    //     }\n    //\n    // }, [specId, pathname])\n    \n    const create = useMutation(cart.createCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const {pages} = queryClient.getQueryData(['/org/offerings', organization, query])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization], pages)\n        },\n        onSuccess: () => {\n            getOrgOrderCartsMount({\n                org_slug_name: organization,\n                params: {limit: 1, offset: 0},\n                clear: true\n            })\n        },\n        onError: (err, itemId, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization])\n        }\n    })\n    \n    const remove = useMutation(order.deleteOrderCart, {\n        onMutate: itemInfo => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const previousTodo = queryClient.getQueryData(['/org/offerings', organization, query])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization, query], previousTodo)\n        },\n        onSuccess: () => {\n            getOrgOrderCartsMount({\n                org_slug_name: organization,\n                params: {limit: 1, offset: 0},\n                clear: true\n            })\n        },\n        onError: (err, newData, rollback) => rollback(),\n        onSettled: itemInfo => {\n            queryClient.invalidateQueries(['/org/offerings', organization, query])\n                .then(res => {\n                    if (res) {\n                        getOrgOrderCartsMount({\n                            org_slug_name: organization,\n                            params: {limit: 1, offset: 0},\n                            clear: true\n                        })\n                    }\n                })\n        }\n    })\n    \n    const onCreatingCartItem = useCallback((event) => {\n        const orgSpecList = event.responsible\n        if (event.inCart) {\n            remove.mutate({offering_id: event.id})\n        } else {\n            const data = {\n                offering_id: event.id,\n                responsible_id: specId ? specId : orgSpecList[0].id,\n                qty: event.qty ? event.qty : 1\n            }\n            \n            create.mutate(params)\n        }\n    }, [create, specId, remove])\n    \n    const getIsLoading = useCallback((id) => {\n        if (create.isLoading && create?.variables?.data?.offering_id === id) {\n            return true\n        } else if (remove.isLoading && remove?.variables?.offering_id === id) {\n            return true\n        }\n        \n        return false\n    }, [create, remove])\n    \n    return {\n        currency,\n        create,\n        remove,\n        getIsLoading,\n        onCreatingCartItem\n    }\n}"]},"metadata":{},"sourceType":"module"}