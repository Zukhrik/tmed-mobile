{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Col,Row}from'antd';import{useStore}from'effector-react';import{SlideDown}from'react-slidedown';import{useTranslation}from'react-i18next';import{postControlData}from'../../../data';import{OverlaySettings}from'../../Overlay';import{POST_ACTIONS}from'../../../Constants';import{usePostActions}from'../../../Hooks/post';import{IconBox}from'../../../UIComponents/GlobalStyles';import{Text}from'../../../UIComponents/Typography/Text';import{$accountModel}from'../../../Models/account-model';import{OverlayAuth}from'../../../UIComponents/OverlayAuth';import{CardControlWrapper,IconItemWrapper,PostIndicatorItem}from'../style';export var PostActions=function PostActions(_ref){var data=_ref.data;var _useTranslation=useTranslation(),t=_useTranslation.t;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),auth=_useState2[0],setAuth=_useState2[1];var _useStore=useStore($accountModel),currentProfile=_useStore.$profiles.currentProfile;var _usePostActions=usePostActions(data),getStyle=_usePostActions.getStyle,handleClick=_usePostActions.handleClick,generatePostIndicators=_usePostActions.generatePostIndicators,openOverlay=_usePostActions.openOverlay,setOpenOverlay=_usePostActions.setOpenOverlay;var handleClose=function handleClose(){if(auth){setAuth(false);}setOpenOverlay(false);};return/*#__PURE__*/React.createElement(CardControlWrapper,null,!currentProfile&&/*#__PURE__*/React.createElement(OverlaySettings,{openSettings:openOverlay,onClose:handleClose,content:/*#__PURE__*/React.createElement(OverlayAuth,{auth:auth,setAuth:setAuth,onClose:handleClose})}),/*#__PURE__*/React.createElement(Row,null,/*#__PURE__*/React.createElement(SlideDown,{style:{width:'100%'}},(data.likes_count>0||data.comments_count>0||data.repost_count>0)&&/*#__PURE__*/React.createElement(Col,{span:24,className:\"post-indicator-wrapper\"},postControlData.map(function(item){var Icon=item.icon();return/*#__PURE__*/React.createElement(PostIndicatorItem,{key:item.icon},/*#__PURE__*/React.createElement(Icon,null),/*#__PURE__*/React.createElement(Text,null,generatePostIndicators(item)));}))),/*#__PURE__*/React.createElement(Col,{span:24},/*#__PURE__*/React.createElement(Row,{justify:\"space-around\"},postControlData.map(function(item){var Icon=item.icon(data.is_liked);return/*#__PURE__*/React.createElement(Col,{key:item.icon,style:getStyle},/*#__PURE__*/React.createElement(IconItemWrapper,{onClick:function onClick(){return handleClick(item.count);}},/*#__PURE__*/React.createElement(IconBox,{color:item.count===POST_ACTIONS.LIKES_COUNT&&!!data.is_liked?'var(--danger-dwed)':'var(--grey-dwed)'},/*#__PURE__*/React.createElement(Icon,null),/*#__PURE__*/React.createElement(Text,null,t(item.title)))));})))));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Post/PostActions/index.jsx"],"names":["React","useState","Col","Row","useStore","SlideDown","useTranslation","postControlData","OverlaySettings","POST_ACTIONS","usePostActions","IconBox","Text","$accountModel","OverlayAuth","CardControlWrapper","IconItemWrapper","PostIndicatorItem","PostActions","data","t","auth","setAuth","currentProfile","$profiles","getStyle","handleClick","generatePostIndicators","openOverlay","setOpenOverlay","handleClose","width","likes_count","comments_count","repost_count","map","item","Icon","icon","is_liked","count","LIKES_COUNT","title"],"mappings":"qKAAA,MAAOA,CAAAA,KAAP,EAAeC,QAAf,KAA8B,OAA9B,CACA,OAAQC,GAAR,CAAaC,GAAb,KAAuB,MAAvB,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,KAAwB,iBAAxB,CACA,OAAQC,cAAR,KAA6B,eAA7B,CACA,OAAQC,eAAR,KAA8B,eAA9B,CACA,OAAQC,eAAR,KAA8B,eAA9B,CACA,OAAQC,YAAR,KAA2B,oBAA3B,CACA,OAAQC,cAAR,KAA6B,qBAA7B,CACA,OAAQC,OAAR,KAAsB,oCAAtB,CACA,OAAQC,IAAR,KAAmB,uCAAnB,CACA,OAAQC,aAAR,KAA4B,+BAA5B,CACA,OAAQC,WAAR,KAA0B,mCAA1B,CACA,OAAQC,kBAAR,CAA4BC,eAA5B,CAA6CC,iBAA7C,KAAqE,UAArE,CAGA,MAAO,IAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,MAAY,IAAVC,CAAAA,IAAU,MAAVA,IAAU,CACnC,oBAAYb,cAAc,EAA1B,CAAOc,CAAP,iBAAOA,CAAP,CACA,cAAwBnB,QAAQ,CAAC,KAAD,CAAhC,wCAAOoB,IAAP,eAAaC,OAAb,eACA,cAAsClB,QAAQ,CAACS,aAAD,CAA9C,CAAmBU,cAAnB,WAAOC,SAAP,CAAmBD,cAAnB,CACA,oBAAqFb,cAAc,CAACS,IAAD,CAAnG,CAAOM,QAAP,iBAAOA,QAAP,CAAiBC,WAAjB,iBAAiBA,WAAjB,CAA8BC,sBAA9B,iBAA8BA,sBAA9B,CAAsDC,WAAtD,iBAAsDA,WAAtD,CAAmEC,cAAnE,iBAAmEA,cAAnE,CAEA,GAAMC,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,EAAM,CACtB,GAAIT,IAAJ,CAAU,CACNC,OAAO,CAAC,KAAD,CAAP,CACH,CACDO,cAAc,CAAC,KAAD,CAAd,CACH,CALD,CAOA,mBACI,oBAAC,kBAAD,MAEQ,CAACN,cAAD,eACI,oBAAC,eAAD,EACI,YAAY,CAAEK,WADlB,CAEI,OAAO,CAAEE,WAFb,CAGI,OAAO,cAAE,oBAAC,WAAD,EACL,IAAI,CAAET,IADD,CAEL,OAAO,CAAEC,OAFJ,CAGL,OAAO,CAAEQ,WAHJ,EAHb,EAHZ,cAcI,oBAAC,GAAD,mBACI,oBAAC,SAAD,EAAW,KAAK,CAAE,CAACC,KAAK,CAAE,MAAR,CAAlB,EAEQ,CAACZ,IAAI,CAACa,WAAL,CAAmB,CAAnB,EAAwBb,IAAI,CAACc,cAAL,CAAsB,CAA9C,EAAmDd,IAAI,CAACe,YAAL,CAAoB,CAAxE,gBACA,oBAAC,GAAD,EAAK,IAAI,CAAE,EAAX,CAAe,SAAS,CAAC,wBAAzB,EAEQ3B,eAAe,CAAC4B,GAAhB,CAAoB,SAAAC,IAAI,CAAI,CACxB,GAAMC,CAAAA,IAAI,CAAGD,IAAI,CAACE,IAAL,EAAb,CACA,mBACI,oBAAC,iBAAD,EAAmB,GAAG,CAAEF,IAAI,CAACE,IAA7B,eACI,oBAAC,IAAD,MADJ,cAEI,oBAAC,IAAD,MACKX,sBAAsB,CAACS,IAAD,CAD3B,CAFJ,CADJ,CAQH,CAVD,CAFR,CAHR,CADJ,cAqBI,oBAAC,GAAD,EAAK,IAAI,CAAE,EAAX,eACI,oBAAC,GAAD,EAAK,OAAO,CAAC,cAAb,EAEQ7B,eAAe,CAAC4B,GAAhB,CAAoB,SAACC,IAAD,CAAU,CAC1B,GAAMC,CAAAA,IAAI,CAAGD,IAAI,CAACE,IAAL,CAAUnB,IAAI,CAACoB,QAAf,CAAb,CACA,mBACI,oBAAC,GAAD,EACI,GAAG,CAAEH,IAAI,CAACE,IADd,CAEI,KAAK,CAAEb,QAFX,eAII,oBAAC,eAAD,EAAiB,OAAO,CAAE,yBAAMC,CAAAA,WAAW,CAACU,IAAI,CAACI,KAAN,CAAjB,EAA1B,eACI,oBAAC,OAAD,EACI,KAAK,CACDJ,IAAI,CAACI,KAAL,GAAe/B,YAAY,CAACgC,WAA5B,EAA2C,CAAC,CAACtB,IAAI,CAACoB,QAAlD,CACM,oBADN,CAEM,kBAJd,eAOI,oBAAC,IAAD,MAPJ,cAQI,oBAAC,IAAD,MACKnB,CAAC,CAACgB,IAAI,CAACM,KAAN,CADN,CARJ,CADJ,CAJJ,CADJ,CAqBH,CAvBD,CAFR,CADJ,CArBJ,CAdJ,CADJ,CAqEH,CAlFM","sourcesContent":["import React, {useState} from 'react'\r\nimport {Col, Row} from 'antd'\r\nimport {useStore} from 'effector-react'\r\nimport {SlideDown} from 'react-slidedown'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {postControlData} from '../../../data'\r\nimport {OverlaySettings} from '../../Overlay'\r\nimport {POST_ACTIONS} from '../../../Constants'\r\nimport {usePostActions} from '../../../Hooks/post'\r\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\r\nimport {Text} from '../../../UIComponents/Typography/Text'\r\nimport {$accountModel} from '../../../Models/account-model'\r\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\r\nimport {CardControlWrapper, IconItemWrapper, PostIndicatorItem} from '../style'\r\n\r\n\r\nexport const PostActions = ({data}) => {\r\n    const {t} = useTranslation()\r\n    const [auth, setAuth] = useState(false)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {getStyle, handleClick, generatePostIndicators, openOverlay, setOpenOverlay} = usePostActions(data)\r\n    \r\n    const handleClose = () => {\r\n        if (auth) {\r\n            setAuth(false)\r\n        }\r\n        setOpenOverlay(false)\r\n    }\r\n    \r\n    return (\r\n        <CardControlWrapper>\r\n            {\r\n                !currentProfile && (\r\n                    <OverlaySettings\r\n                        openSettings={openOverlay}\r\n                        onClose={handleClose}\r\n                        content={<OverlayAuth\r\n                            auth={auth}\r\n                            setAuth={setAuth}\r\n                            onClose={handleClose}\r\n                        />}\r\n                    />\r\n                )\r\n            }\r\n            <Row>\r\n                <SlideDown style={{width: '100%'}}>\r\n                    {\r\n                        (data.likes_count > 0 || data.comments_count > 0 || data.repost_count > 0) &&\r\n                        <Col span={24} className='post-indicator-wrapper'>\r\n                            {\r\n                                postControlData.map(item => {\r\n                                    const Icon = item.icon()\r\n                                    return (\r\n                                        <PostIndicatorItem key={item.icon}>\r\n                                            <Icon/>\r\n                                            <Text>\r\n                                                {generatePostIndicators(item)}\r\n                                            </Text>\r\n                                        </PostIndicatorItem>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Col>\r\n                    }\r\n                </SlideDown>\r\n                <Col span={24}>\r\n                    <Row justify='space-around'>\r\n                        {\r\n                            postControlData.map((item) => {\r\n                                const Icon = item.icon(data.is_liked)\r\n                                return (\r\n                                    <Col\r\n                                        key={item.icon}\r\n                                        style={getStyle}\r\n                                    >\r\n                                        <IconItemWrapper onClick={() => handleClick(item.count)}>\r\n                                            <IconBox\r\n                                                color={\r\n                                                    item.count === POST_ACTIONS.LIKES_COUNT && !!data.is_liked\r\n                                                        ? 'var(--danger-dwed)'\r\n                                                        : 'var(--grey-dwed)'\r\n                                                }\r\n                                            >\r\n                                                <Icon/>\r\n                                                <Text>\r\n                                                    {t(item.title)}\r\n                                                </Text>\r\n                                            </IconBox>\r\n                                        </IconItemWrapper>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </CardControlWrapper>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}