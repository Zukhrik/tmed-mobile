{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchCatsOfferCats, fetchCatsOrgCats } from './effects';\nimport { commonStoreList } from '../../utils/store-utils';\nconst $catsOfferCats = createStore({\n  loading: false,\n  data: [],\n  error: false,\n  result: {},\n  forceLoading: 0\n}).on(fetchCatsOfferCats.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchCatsOfferCats.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchCatsOfferCats.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nconst $catsOrgCats = createStore({\n  loading: false,\n  data: [],\n  error: false,\n  result: {}\n}).on(fetchCatsOrgCats.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchCatsOrgCats.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {}\n})).on(fetchCatsOrgCats.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed\n  };\n});\nexport const $catsModel = combine({\n  $catsOfferCats,\n  $catsOrgCats\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/cats-model/stores.js"],"names":["combine","createStore","fetchCatsOfferCats","fetchCatsOrgCats","commonStoreList","$catsOfferCats","loading","data","error","result","forceLoading","on","pending","state","fail","done","params","processed","response","clear","$catsOrgCats","$catsModel"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,WAAjB,QAAmC,UAAnC;AACA,SAAQC,kBAAR,EAA4BC,gBAA5B,QAAmD,WAAnD;AACA,SAAQC,eAAR,QAA8B,yBAA9B;AAGA,MAAMC,cAAc,GAAGJ,WAAW,CAAC;AAACK,EAAAA,OAAO,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE,EAAvB;AAA2BC,EAAAA,KAAK,EAAE,KAAlC;AAAyCC,EAAAA,MAAM,EAAE,EAAjD;AAAqDC,EAAAA,YAAY,EAAE;AAAnE,CAAD,CAAX,CAClBC,EADkB,CACfT,kBAAkB,CAACU,OADJ,EACa,CAACC,KAAD,EAAQP,OAAR,MAAqB,EAAC,GAAGO,KAAJ;AAAWP,EAAAA;AAAX,CAArB,CADb,EAElBK,EAFkB,CAEfT,kBAAkB,CAACY,IAFJ,EAEU,CAACD,KAAD,EAAQ;AAACL,EAAAA;AAAD,CAAR,MAAqB,EAC9C,GAAGK,KAD2C;AACpCL,EAAAA,KADoC;AAC7BD,EAAAA,IAAI,EAAE,EADuB;AACnBE,EAAAA,MAAM,EAAE,EADW;AACPC,EAAAA,YAAY,EAAEG,KAAK,CAACH,YAAN,KAAuB,CAAvB,GAA2BG,KAAK,CAACH,YAAjC,GAAgD;AADvD,CAArB,CAFV,EAKlBC,EALkB,CAKfT,kBAAkB,CAACa,IALJ,EAKU,CAACF,KAAD,EAAQ;AAACJ,EAAAA,MAAD;AAASO,EAAAA;AAAT,CAAR,KAA6B;AACtD,QAAMC,SAAS,GAAGb,eAAe,CAAC;AAC9Bc,IAAAA,QAAQ,EAAET,MAAM,CAACF,IADa;AACPM,IAAAA,KADO;AACAM,IAAAA,KAAK,EAAEH,MAAM,CAACG,KADd;AACqB,OAAGH,MAAM,CAACA;AAD/B,GAAD,CAAjC;AAGA,SAAO,EAAC,GAAGH,KAAJ;AAAW,OAAGI,SAAd;AAAyBP,IAAAA,YAAY,EAAE;AAAvC,GAAP;AACH,CAVkB,CAAvB;AAYA,MAAMU,YAAY,GAAGnB,WAAW,CAAC;AAACK,EAAAA,OAAO,EAAE,KAAV;AAAiBC,EAAAA,IAAI,EAAE,EAAvB;AAA2BC,EAAAA,KAAK,EAAE,KAAlC;AAAyCC,EAAAA,MAAM,EAAE;AAAjD,CAAD,CAAX,CAChBE,EADgB,CACbR,gBAAgB,CAACS,OADJ,EACa,CAACC,KAAD,EAAQP,OAAR,MAAqB,EAAC,GAAGO,KAAJ;AAAWP,EAAAA;AAAX,CAArB,CADb,EAEhBK,EAFgB,CAEbR,gBAAgB,CAACW,IAFJ,EAEU,CAACD,KAAD,EAAQ;AAACL,EAAAA;AAAD,CAAR,MAAqB,EAC5C,GAAGK,KADyC;AAClCL,EAAAA,KADkC;AAC3BD,EAAAA,IAAI,EAAE,EADqB;AACjBE,EAAAA,MAAM,EAAE;AADS,CAArB,CAFV,EAKhBE,EALgB,CAKbR,gBAAgB,CAACY,IALJ,EAKU,CAACF,KAAD,EAAQ;AAACJ,EAAAA,MAAD;AAASO,EAAAA;AAAT,CAAR,KAA6B;AACpD,QAAMC,SAAS,GAAGb,eAAe,CAAC;AAC9Bc,IAAAA,QAAQ,EAAET,MAAM,CAACF,IADa;AACPM,IAAAA,KADO;AACAM,IAAAA,KAAK,EAAEH,MAAM,CAACG,KADd;AACqB,OAAGH,MAAM,CAACA;AAD/B,GAAD,CAAjC;AAGA,SAAO,EAAC,GAAGH,KAAJ;AAAW,OAAGI;AAAd,GAAP;AACH,CAVgB,CAArB;AAYA,OAAO,MAAMI,UAAU,GAAGrB,OAAO,CAAC;AAC9BK,EAAAA,cAD8B;AAE9Be,EAAAA;AAF8B,CAAD,CAA1B","sourcesContent":["import {combine, createStore} from 'effector'\nimport {fetchCatsOfferCats, fetchCatsOrgCats} from './effects'\nimport {commonStoreList} from '../../utils/store-utils'\n\n\nconst $catsOfferCats = createStore({loading: false, data: [], error: false, result: {}, forceLoading: 0})\n    .on(fetchCatsOfferCats.pending, (state, loading) => ({...state, loading}))\n    .on(fetchCatsOfferCats.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchCatsOfferCats.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            response: result.data, state, clear: params.clear, ...params.params\n        })\n        return {...state, ...processed, forceLoading: 2}\n    })\n\nconst $catsOrgCats = createStore({loading: false, data: [], error: false, result: {}})\n    .on(fetchCatsOrgCats.pending, (state, loading) => ({...state, loading}))\n    .on(fetchCatsOrgCats.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}\n    }))\n    .on(fetchCatsOrgCats.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            response: result.data, state, clear: params.clear, ...params.params\n        })\n        return {...state, ...processed}\n    })\n\nexport const $catsModel = combine({\n    $catsOfferCats,\n    $catsOrgCats\n})"]},"metadata":{},"sourceType":"module"}