{"ast":null,"code":"import { useEffect } from 'react';\nimport { useStore } from 'effector-react';\nimport { useInView } from 'react-intersection-observer';\nimport { $postModel, postOfferingMount } from '../../Models/post-model';\nexport function useTapeInView() {\n  const {\n    $postOfferings: {\n      data\n    }\n  } = useStore($postModel);\n  const {\n    ref,\n    inView,\n    entry\n  } = useInView({\n    threshold: 0.25,\n    delay: 300\n  });\n  useEffect(() => {\n    if (inView) {\n      const id = entry.target.getAttribute('data-id');\n\n      if (id && data[id] === undefined) {\n        const data = {\n          post_id: id,\n          clear: true,\n          params: {\n            params: {\n              limit: 10,\n              offset: 0\n            }\n          }\n        };\n        postOfferingMount(data);\n      }\n    }\n  }, [entry, data, inView]);\n  return {\n    ref\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/tape/use-tape-in-view.js"],"names":["useEffect","useStore","useInView","$postModel","postOfferingMount","useTapeInView","$postOfferings","data","ref","inView","entry","threshold","delay","id","target","getAttribute","undefined","post_id","clear","params","limit","offset"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,OAAxB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,6BAAxB;AACA,SAAQC,UAAR,EAAoBC,iBAApB,QAA4C,yBAA5C;AAEA,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAM;AAACC,IAAAA,cAAc,EAAE;AAACC,MAAAA;AAAD;AAAjB,MAA2BN,QAAQ,CAACE,UAAD,CAAzC;AACA,QAAM;AAACK,IAAAA,GAAD;AAAMC,IAAAA,MAAN;AAAcC,IAAAA;AAAd,MAAuBR,SAAS,CAAC;AACnCS,IAAAA,SAAS,EAAE,IADwB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CAAtC;AAKAZ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIS,MAAJ,EAAY;AACR,YAAMI,EAAE,GAAGH,KAAK,CAACI,MAAN,CAAaC,YAAb,CAA0B,SAA1B,CAAX;;AACA,UAAIF,EAAE,IAAIN,IAAI,CAACM,EAAD,CAAJ,KAAaG,SAAvB,EAAkC;AAC9B,cAAMT,IAAI,GAAG;AACTU,UAAAA,OAAO,EAAEJ,EADA;AAETK,UAAAA,KAAK,EAAE,IAFE;AAGTC,UAAAA,MAAM,EAAE;AACJA,YAAAA,MAAM,EAAE;AACJC,cAAAA,KAAK,EAAE,EADH;AAEJC,cAAAA,MAAM,EAAE;AAFJ;AADJ;AAHC,SAAb;AAUAjB,QAAAA,iBAAiB,CAACG,IAAD,CAAjB;AACH;AACJ;AACJ,GAjBQ,EAiBN,CAACG,KAAD,EAAQH,IAAR,EAAcE,MAAd,CAjBM,CAAT;AAmBA,SAAO;AAACD,IAAAA;AAAD,GAAP;AACH","sourcesContent":["import {useEffect} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {useInView} from 'react-intersection-observer'\r\nimport {$postModel, postOfferingMount} from '../../Models/post-model'\r\n\r\nexport function useTapeInView() {\r\n    const {$postOfferings: {data}} = useStore($postModel)\r\n    const {ref, inView, entry} = useInView({\r\n        threshold: 0.25,\r\n        delay: 300\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (inView) {\r\n            const id = entry.target.getAttribute('data-id')\r\n            if (id && data[id] === undefined) {\r\n                const data = {\r\n                    post_id: id,\r\n                    clear: true,\r\n                    params: {\r\n                        params: {\r\n                            limit: 10,\r\n                            offset: 0\r\n                        }\r\n                    }\r\n                }\r\n                postOfferingMount(data)\r\n            }\r\n        }\r\n    }, [entry, data, inView])\r\n\r\n    return {ref}\r\n}"]},"metadata":{},"sourceType":"module"}