{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Tape/pages/tape.jsx\";\nimport React, { useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../../Models/app';\nimport { useAllTape } from '../../../Hooks/tape';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { $tapeModel } from '../../../Models/tape-model';\nimport { TapeItems } from '../../../Components/TapeTypes';\nimport { FixedHeader } from '../../../Components/FixedHeader';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { RootContent } from '../../../UIComponents/GlobalStyles';\nimport { TapeFixedHeader } from '../molecules/tape-fixed-header';\nimport { PostSkeleton } from '../../../Components/Post/PostSkeleton';\nimport { AllScreenModal } from '../../../UIComponents/AllScreenModal';\nimport { CreateModalPost } from '../../../Components/Post/CreateModalPost';\nconst skeleton = generateSkeleton(10);\nexport const TapePage = () => {\n  const {\n    loadMore\n  } = useAllTape();\n  const {\n    $device\n  } = useStore($appModel);\n  const [createPost, setCreatePost] = useState(false);\n  const {\n    $allTape: {\n      data,\n      forceLoading,\n      result,\n      loading\n    }\n  } = useStore($tapeModel);\n  return /*#__PURE__*/React.createElement(RootContent, {\n    paddingTop: $device && $device === INFO_MAT ? '80px' : '50px',\n    paddingBottom: $device && $device === INFO_MAT ? '' : '60px' // background='#F2F2F2'\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(AllScreenModal, {\n    title: \"search\",\n    modalIsOpen: createPost,\n    onCancel: () => setCreatePost(false),\n    content: /*#__PURE__*/React.createElement(CreateModalPost, {\n      setCreatePost: setCreatePost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(FixedHeader, {\n    component: /*#__PURE__*/React.createElement(TapeFixedHeader, {\n      setCreatePost: setCreatePost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 28\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), forceLoading === 2 ? /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    style: {\n      overflow: 'visible',\n      background: '#F2F2F2'\n    },\n    hasMore: !loading && !!result.next,\n    dataLength: result.nextOffset || 10,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }\n  }, data && data.length > 0 && data.map((item, idx) => /*#__PURE__*/React.createElement(TapeItems, {\n    key: `${idx + 1}`,\n    data: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 37\n    }\n  }))) : /*#__PURE__*/React.createElement(Row, {\n    gutter: [0, 12],\n    style: {\n      paddingTop: 12\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 23\n    }\n  }, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: `${idx + 1}`,\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(PostSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 37\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Tape/pages/tape.jsx"],"names":["React","useState","Col","Row","useStore","$appModel","useAllTape","INFO_MAT","$tapeModel","TapeItems","FixedHeader","InfiniteScroll","generateSkeleton","RootContent","TapeFixedHeader","PostSkeleton","AllScreenModal","CreateModalPost","skeleton","TapePage","loadMore","$device","createPost","setCreatePost","$allTape","data","forceLoading","result","loading","overflow","background","next","nextOffset","length","map","item","idx","paddingTop"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,MAAvB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,UAAR,QAAyB,qBAAzB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;AACA,SAAQC,UAAR,QAAyB,4BAAzB;AACA,SAAQC,SAAR,QAAwB,+BAAxB;AACA,SAAQC,WAAR,QAA0B,iCAA1B;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAAQC,gBAAR,QAA+B,+BAA/B;AACA,SAAQC,WAAR,QAA0B,oCAA1B;AACA,SAAQC,eAAR,QAA8B,gCAA9B;AACA,SAAQC,YAAR,QAA2B,uCAA3B;AACA,SAAQC,cAAR,QAA6B,sCAA7B;AACA,SAAQC,eAAR,QAA8B,0CAA9B;AAGA,MAAMC,QAAQ,GAAGN,gBAAgB,CAAC,EAAD,CAAjC;AACA,OAAO,MAAMO,QAAQ,GAAG,MAAM;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAad,UAAU,EAA7B;AACA,QAAM;AAACe,IAAAA;AAAD,MAAYjB,QAAQ,CAACC,SAAD,CAA1B;AACA,QAAM,CAACiB,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,KAAD,CAA5C;AACA,QAAM;AAACuB,IAAAA,QAAQ,EAAE;AAACC,MAAAA,IAAD;AAAOC,MAAAA,YAAP;AAAqBC,MAAAA,MAArB;AAA6BC,MAAAA;AAA7B;AAAX,MAAoDxB,QAAQ,CAACI,UAAD,CAAlE;AAEA,sBACI,oBAAC,WAAD;AACI,IAAA,UAAU,EAAEa,OAAO,IAAIA,OAAO,KAAKd,QAAvB,GAAkC,MAAlC,GAA2C,MAD3D;AAEI,IAAA,aAAa,EAAEc,OAAO,IAAIA,OAAO,KAAKd,QAAvB,GAAkC,EAAlC,GAAuC,MAF1D,CAGI;AAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKI,oBAAC,cAAD;AACI,IAAA,KAAK,EAAC,QADV;AAEI,IAAA,WAAW,EAAEe,UAFjB;AAGI,IAAA,QAAQ,EAAE,MAAMC,aAAa,CAAC,KAAD,CAHjC;AAII,IAAA,OAAO,eAAE,oBAAC,eAAD;AAAiB,MAAA,aAAa,EAAEA,aAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,eAWI,oBAAC,WAAD;AACI,IAAA,SAAS,eAAE,oBAAC,eAAD;AACP,MAAA,aAAa,EAAEA,aADR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,EAgBQG,YAAY,KAAK,CAAjB,gBAEQ,oBAAC,cAAD;AACI,IAAA,IAAI,EAAEN,QADV;AAEI,IAAA,KAAK,EAAE;AAACS,MAAAA,QAAQ,EAAE,SAAX;AAAsBC,MAAAA,UAAU,EAAE;AAAlC,KAFX;AAGI,IAAA,OAAO,EAAE,CAACF,OAAD,IAAY,CAAC,CAACD,MAAM,CAACI,IAHlC;AAII,IAAA,UAAU,EAAEJ,MAAM,CAACK,UAAP,IAAqB,EAJrC;AAKI,IAAA,MAAM,eAAE,uDALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQQP,IAAI,IAAIA,IAAI,CAACQ,MAAL,GAAc,CAAtB,IAA2BR,IAAI,CAACS,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,kBAChC,oBAAC,SAAD;AACI,IAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EADpB;AAEI,IAAA,IAAI,EAAED,IAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADuB,CARnC,CAFR,gBAmBM,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,CAAD,EAAI,EAAJ,CAAb;AAAsB,IAAA,KAAK,EAAE;AAACE,MAAAA,UAAU,EAAE;AAAb,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEMnB,QAAQ,CAACgB,GAAT,CAAa,CAACC,IAAD,EAAOC,GAAP,kBACT,oBAAC,GAAD;AACI,IAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EADpB;AAEI,IAAA,IAAI,EAAE,EAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAII,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,CADJ,CAFN,CAnCd,CADJ;AAmDH,CAzDM","sourcesContent":["import React, {useState} from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../../Models/app'\nimport {useAllTape} from '../../../Hooks/tape'\nimport {INFO_MAT} from '../../../Constants/app'\nimport {$tapeModel} from '../../../Models/tape-model'\nimport {TapeItems} from '../../../Components/TapeTypes'\nimport {FixedHeader} from '../../../Components/FixedHeader'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\nimport {RootContent} from '../../../UIComponents/GlobalStyles'\nimport {TapeFixedHeader} from '../molecules/tape-fixed-header'\nimport {PostSkeleton} from '../../../Components/Post/PostSkeleton'\nimport {AllScreenModal} from '../../../UIComponents/AllScreenModal'\nimport {CreateModalPost} from '../../../Components/Post/CreateModalPost'\n\n\nconst skeleton = generateSkeleton(10)\nexport const TapePage = () => {\n    const {loadMore} = useAllTape()\n    const {$device} = useStore($appModel)\n    const [createPost, setCreatePost] = useState(false)\n    const {$allTape: {data, forceLoading, result, loading}} = useStore($tapeModel)\n    \n    return (\n        <RootContent\n            paddingTop={$device && $device === INFO_MAT ? '80px' : '50px'}\n            paddingBottom={$device && $device === INFO_MAT ? '' : '60px'}\n            // background='#F2F2F2'\n        >\n            <AllScreenModal\n                title='search'\n                modalIsOpen={createPost}\n                onCancel={() => setCreatePost(false)}\n                content={<CreateModalPost setCreatePost={setCreatePost}/>}\n            />\n            <FixedHeader\n                component={<TapeFixedHeader\n                    setCreatePost={setCreatePost}/>}\n            />\n            {\n                forceLoading === 2\n                    ? (\n                        <InfiniteScroll\n                            next={loadMore}\n                            style={{overflow: 'visible', background: '#F2F2F2'}}\n                            hasMore={!loading && !!result.next}\n                            dataLength={result.nextOffset || 10}\n                            loader={<>...loading</>}\n                        >\n                            {\n                                data && data.length > 0 && data.map((item, idx) => (\n                                    <TapeItems\n                                        key={`${idx + 1}`}\n                                        data={item}\n                                    />\n                                ))\n                            }\n                        </InfiniteScroll>\n                    )\n                    : <Row gutter={[0, 12]} style={{paddingTop: 12}}>\n                        {\n                            skeleton.map((item, idx) => (\n                                <Col\n                                    key={`${idx + 1}`}\n                                    span={24}\n                                >\n                                    <PostSkeleton/>\n                                </Col>\n                            ))\n                        }\n                    </Row>\n            }\n        </RootContent>\n    )\n}"]},"metadata":{},"sourceType":"module"}