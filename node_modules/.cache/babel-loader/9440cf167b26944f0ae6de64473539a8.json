{"ast":null,"code":"import * as Yup from 'yup';\nimport { useFormik } from 'formik';\nimport debounce from 'lodash.debounce';\nimport account from '../../Service/account';\nimport { useTranslation } from 'react-i18next';\nimport { slugify } from '../../utils/stringUtils';\nimport { URL_KEYS, URL_VALUES } from '../../Constants';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nconst errors_by_field = {\n  phone: '',\n  username: '',\n  password: ''\n};\nconst values = {\n  name: '',\n  phone: '',\n  lastname: '',\n  username: '',\n  password: '',\n  checkbox: false,\n  confirmPassword: ''\n};\nexport function useCreateAccount() {\n  const {\n    push\n  } = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const {\n    state\n  } = useLocation();\n  const [initialValues, setInitialValues] = useState(values);\n  const [usernameStatus, setUsernameStatus] = useState(-1);\n  const [fetchedErrors, setFetchedError] = useState(errors_by_field);\n  const validationSchema = Yup.object().shape({\n    name: Yup.string().required(t('required_field')),\n    lastname: Yup.string().required(t('required_field')),\n    username: Yup.string().required(t('required_field')).test('usernameValidation', t(fetchedErrors.username), () => fetchedErrors.username.length === 0),\n    phone: Yup.string().required(t('required_field')).test('phoneError', t(fetchedErrors.phone), () => fetchedErrors['phone'].length === 0),\n    password: Yup.string().min(8, t('at_least_eight_symbols')).required(t('required_field')).test('passwordError', t(fetchedErrors.password), () => fetchedErrors['password'].length === 0),\n    confirmPassword: Yup.string().oneOf([Yup.ref('password'), null], t('password_mismatch')).required(t('required_field'))\n  });\n  const formik = useFormik({\n    initialValues,\n    validationSchema,\n    enableReinitialize: true,\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      const {\n        checkbox,\n        confirmPassword,\n        ...data\n      } = values;\n      push({\n        pathname: '/sign-up',\n        search: `${URL_KEYS.STEP}=${URL_VALUES.PHONE_VERIFY}`,\n        state: formik.values\n      });\n      account.createAccount({ ...data,\n        phone: `+${data.phone}`\n      }).then(() => {\n        push({\n          pathname: '/sign-up',\n          search: `${URL_KEYS.STEP}=${URL_VALUES.PHONE_VERIFY}`,\n          state: formik.values\n        });\n      }).catch(error => {\n        const errorData = error.response.data.errors || [];\n        const touched = {};\n        const data = {};\n\n        if (errorData) {\n          for (let i = 0; i < errorData.length; i++) {\n            touched[errorData[i].field] = true;\n            data[errorData[i].field] = errorData[i].message.replace(/[[\\]']+/g, '');\n          }\n\n          formik.setTouched({ ...touched\n          });\n          formik.setErrors({ ...data\n          });\n          setFetchedError({ ...errors_by_field,\n            ...data\n          });\n        }\n      }).finally(() => setSubmitting(false));\n    }\n\n  });\n\n  const validateUsername = data => {\n    const value = data.toLowerCase();\n    formik.setFieldValue('username', slugify(value.toLowerCase()));\n    const touched = formik.touched;\n    const errors = formik.errors;\n\n    if (value.trim().length > 2) {\n      account.validateUsername({\n        username: slugify(value.toLowerCase())\n      }).then(res => {\n        if (res.data.status) {\n          setUsernameStatus(1);\n          setFetchedError(errors_by_field);\n          delete touched['username'];\n          delete errors['username'];\n          formik.setErrors(errors);\n          formik.setTouched(touched);\n        } else {\n          formik.setTouched({ ...touched,\n            username: true\n          });\n          formik.setErrors({ ...errors,\n            username: res.data.error.message\n          });\n          setUsernameStatus(0);\n          setFetchedError({ ...errors_by_field,\n            username: res.data.error.message\n          });\n        }\n      });\n    } else {\n      setUsernameStatus(-1);\n    }\n  };\n\n  const disabledButton = useCallback(() => {\n    return formik.isSubmitting || formik.values.name.trim().length === 0 || formik.values.lastname.trim().length === 0 || formik.values.username.trim().length === 0 || formik.touched.username && !!formik.errors.username || formik.values.phone.trim().length === 0 || formik.values.password.trim().length === 0 || formik.values.confirmPassword.trim().length === 0 || formik.touched.confirmPassword && !!formik.errors.confirmPassword || !formik.values.checkbox || fetchedErrors['phone'].length > 0;\n  }, [formik, fetchedErrors]);\n  const handleUsernameChange = debounce(validateUsername, 50);\n\n  const handleChange = (key, value) => {\n    setFetchedError(errors_by_field);\n    formik.setFieldValue(key, value);\n  };\n\n  useEffect(() => {\n    if (state) {\n      setInitialValues(state);\n    }\n  }, [state]);\n  return {\n    formik,\n    handleChange,\n    usernameStatus,\n    disabledButton,\n    handleUsernameChange\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/auth/use-create-account.js"],"names":["Yup","useFormik","debounce","account","useTranslation","slugify","URL_KEYS","URL_VALUES","useCallback","useEffect","useState","useHistory","useLocation","errors_by_field","phone","username","password","values","name","lastname","checkbox","confirmPassword","useCreateAccount","push","t","state","initialValues","setInitialValues","usernameStatus","setUsernameStatus","fetchedErrors","setFetchedError","validationSchema","object","shape","string","required","test","length","min","oneOf","ref","formik","enableReinitialize","onSubmit","setSubmitting","data","pathname","search","STEP","PHONE_VERIFY","createAccount","then","catch","error","errorData","response","errors","touched","i","field","message","replace","setTouched","setErrors","finally","validateUsername","value","toLowerCase","setFieldValue","trim","res","status","disabledButton","isSubmitting","handleUsernameChange","handleChange","key"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport debounce from 'lodash.debounce'\r\nimport account from '../../Service/account'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {slugify} from '../../utils/stringUtils'\r\nimport {URL_KEYS, URL_VALUES} from '../../Constants'\r\nimport {useCallback, useEffect, useState} from 'react'\r\nimport {useHistory, useLocation} from 'react-router-dom'\r\n\r\nconst errors_by_field = {\r\n    phone: '',\r\n    username: '',\r\n    password: ''\r\n}\r\n\r\nconst values = {\r\n    name: '',\r\n    phone: '',\r\n    lastname: '',\r\n    username: '',\r\n    password: '',\r\n    checkbox: false,\r\n    confirmPassword: ''\r\n}\r\n\r\nexport function useCreateAccount() {\r\n    const {push} = useHistory()\r\n    const {t} = useTranslation()\r\n    const {state} = useLocation()\r\n    const [initialValues, setInitialValues] = useState(values)\r\n    const [usernameStatus, setUsernameStatus] = useState(-1)\r\n    const [fetchedErrors, setFetchedError] = useState(errors_by_field)\r\n    \r\n    const validationSchema = Yup.object().shape({\r\n        name: Yup.string()\r\n            .required(t('required_field')),\r\n        lastname: Yup.string()\r\n            .required(t('required_field')),\r\n        username: Yup.string()\r\n            .required(t('required_field'))\r\n            .test('usernameValidation', t(fetchedErrors.username), () => fetchedErrors.username.length === 0),\r\n        phone: Yup.string()\r\n            .required(t('required_field'))\r\n            .test('phoneError', t(fetchedErrors.phone), () => fetchedErrors['phone'].length === 0),\r\n        password: Yup.string()\r\n            .min(8, t('at_least_eight_symbols'))\r\n            .required(t('required_field'))\r\n            .test('passwordError', t(fetchedErrors.password), () => fetchedErrors['password'].length === 0),\r\n        confirmPassword: Yup.string()\r\n            .oneOf([Yup.ref('password'), null], t('password_mismatch'))\r\n            .required(t('required_field'))\r\n    })\r\n    \r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema,\r\n        enableReinitialize: true,\r\n        onSubmit(values, {setSubmitting}) {\r\n            setSubmitting(true)\r\n            const {checkbox, confirmPassword, ...data} = values\r\n    \r\n            push({\r\n                pathname: '/sign-up',\r\n                search: `${URL_KEYS.STEP}=${URL_VALUES.PHONE_VERIFY}`,\r\n                state: formik.values\r\n            })\r\n    \r\n            account.createAccount({...data, phone: `+${data.phone}`})\r\n                .then(() => {\r\n                    push({\r\n                        pathname: '/sign-up',\r\n                        search: `${URL_KEYS.STEP}=${URL_VALUES.PHONE_VERIFY}`,\r\n                        state: formik.values\r\n                    })\r\n                })\r\n                .catch((error) => {\r\n                    const errorData = error.response.data.errors || []\r\n                    const touched = {}\r\n                    const data = {}\r\n                    if (errorData) {\r\n                        for (let i = 0; i < errorData.length; i++) {\r\n                            touched[errorData[i].field] = true\r\n                            data[errorData[i].field] = errorData[i].message.replace(/[[\\]']+/g, '')\r\n                    \r\n                        }\r\n                        formik.setTouched({...touched})\r\n                        formik.setErrors({...data})\r\n                        setFetchedError({...errors_by_field, ...data})\r\n                    }\r\n                })\r\n                .finally(() => setSubmitting(false))\r\n        }\r\n    })\r\n    \r\n    const validateUsername = (data) => {\r\n        const value = data.toLowerCase()\r\n        formik.setFieldValue('username', slugify(value.toLowerCase()))\r\n        const touched = formik.touched\r\n        const errors = formik.errors\r\n        if (value.trim().length > 2) {\r\n            account.validateUsername({username: slugify(value.toLowerCase())})\r\n                .then(res => {\r\n                    if (res.data.status) {\r\n                        setUsernameStatus(1)\r\n                        setFetchedError(errors_by_field)\r\n                        delete touched['username']\r\n                        delete errors['username']\r\n                        formik.setErrors(errors)\r\n                        formik.setTouched(touched)\r\n                    } else {\r\n                        formik.setTouched({...touched, username: true})\r\n                        formik.setErrors({...errors, username: res.data.error.message})\r\n                        setUsernameStatus(0)\r\n                        setFetchedError({...errors_by_field, username: res.data.error.message})\r\n                    }\r\n                })\r\n        } else {\r\n            setUsernameStatus(-1)\r\n        }\r\n    }\r\n    \r\n    const disabledButton = useCallback(() => {\r\n        return (\r\n            formik.isSubmitting\r\n            || (formik.values.name.trim().length === 0)\r\n            || (formik.values.lastname.trim().length === 0)\r\n            || (formik.values.username.trim().length === 0)\r\n            || (formik.touched.username && !!formik.errors.username)\r\n            || (formik.values.phone.trim().length === 0)\r\n            || (formik.values.password.trim().length === 0)\r\n            || (formik.values.confirmPassword.trim().length === 0)\r\n            || (formik.touched.confirmPassword && !!formik.errors.confirmPassword)\r\n            || (!formik.values.checkbox)\r\n            || (fetchedErrors['phone'].length > 0)\r\n        )\r\n    }, [formik, fetchedErrors])\r\n    \r\n    const handleUsernameChange = debounce(validateUsername, 50)\r\n    \r\n    const handleChange = (key, value) => {\r\n        setFetchedError(errors_by_field)\r\n        formik.setFieldValue(key, value)\r\n    }\r\n    \r\n    useEffect(() => {\r\n        if (state) {\r\n            setInitialValues(state)\r\n        }\r\n    }, [state])\r\n    \r\n    return {formik, handleChange, usernameStatus, disabledButton, handleUsernameChange}\r\n}"]},"metadata":{},"sourceType":"module"}