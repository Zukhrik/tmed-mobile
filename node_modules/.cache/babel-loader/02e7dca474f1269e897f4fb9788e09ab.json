{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Checkout/InfoCard/CheckoutDetail/CreditCardDetail/PaymentMethod.jsx\";\nimport React, { useCallback } from 'react';\nimport { useStore } from 'effector-react';\nimport { Col, Radio, Row, Space } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport payment from '../../../../../Service/payment';\nimport { PlusFillSvg } from '../../../../../Icons/Plus';\nimport { HUMOSvg, UZCARDSvg } from '../../../../../Icons/Cards';\nimport { $paymentModel } from '../../../../../Models/payment-model';\nimport { Title } from '../../../../../UIComponents/Typography/Title';\nimport { CardInfoWrapper, PaymentMethodsWrapper, VerifyCardLink } from '../../style';\nimport { PAYMENT_METHOD } from '../../../../../Constants/payment';\nimport { $orgModel } from '../../../../../Models/org-model';\nexport const PaymentMethod = ({\n  onClose,\n  setCardId,\n  setPayment,\n  handleAddCard,\n  setCardWrapper,\n  payment: paymentType\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    $accountCard: {\n      data\n    }\n  } = useStore($paymentModel);\n  const {\n    $orgPaymentMethods: {\n      data: orgPayments\n    }\n  } = useStore($orgModel);\n  const cardStyle = useCallback(number => {\n    let tmp = '';\n\n    for (let i = 0; i < number.length; i++) {\n      if (i % 4 === 0) {\n        tmp += ' ' + number[i];\n      } else {\n        tmp += number[i];\n      }\n    }\n\n    return tmp;\n  }, []);\n\n  const handleChange = (value, item = undefined) => {\n    if (item) {\n      setPayment({\n        id: item.id,\n        title: `${cardStyle(item.card_number)} ${item.name}`,\n        extraId: value\n      });\n    } else {\n      setPayment({\n        id: PAYMENT_METHOD[value].title,\n        title: PAYMENT_METHOD[value].title,\n        extraId: value\n      });\n    }\n\n    onClose();\n  };\n\n  const handleActivateCard = item => {\n    const params = {\n      id: item.id\n    };\n    payment.resendPayMeCode(params).then(res => {\n      if (res) {\n        setCardWrapper(true);\n      }\n    }).finally(() => {\n      setCardId(item.id);\n    });\n  };\n\n  const generateCardType = item => {\n    if (Number(item.card_number.substr(0, 4)) === 8600) {\n      return /*#__PURE__*/React.createElement(UZCARDSvg, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 20\n        }\n      });\n    } else {\n      return /*#__PURE__*/React.createElement(HUMOSvg, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 20\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Row, {\n    gutter: [0, 12],\n    className: \"select-card-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, t('payment_method'))), data && /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PaymentMethodsWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    defaultValue: \"1\",\n    value: paymentType.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Space, {\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 33\n    }\n  }, orgPayments.find(item => item.method === 1 && item.status) && /*#__PURE__*/React.createElement(Radio, {\n    value: \"cash\",\n    onClick: e => handleChange(1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 45\n    }\n  }, t('cash')), orgPayments.find(item => item.method === 2 && item.status) && /*#__PURE__*/React.createElement(Radio, {\n    value: \"terminal\",\n    onClick: e => handleChange(2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 45\n    }\n  }, t('terminal')), data.map((item, idx) => /*#__PURE__*/React.createElement(Radio, {\n    key: `${idx + 1}`,\n    disabled: !item.verified,\n    value: item.id,\n    onClick: e => handleChange(3, item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 45\n    }\n  }, generateCardType(item), /*#__PURE__*/React.createElement(CardInfoWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 49\n    }\n  }, `${item.card_number.replace(/\\d{4}(?=.)/g, '$& ')} ${item.name && item.name}`, !item.verified && /*#__PURE__*/React.createElement(VerifyCardLink, {\n    onClick: () => handleActivateCard(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 61\n    }\n  }, t('activate'))))))))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    onClick: handleAddCard,\n    className: \"add-card-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 0],\n    align: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    className: \"plus-svg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(PlusFillSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 25\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 21\n    }\n  }, t('add_card')))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Checkout/InfoCard/CheckoutDetail/CreditCardDetail/PaymentMethod.jsx"],"names":["React","useCallback","useStore","Col","Radio","Row","Space","useTranslation","payment","PlusFillSvg","HUMOSvg","UZCARDSvg","$paymentModel","Title","CardInfoWrapper","PaymentMethodsWrapper","VerifyCardLink","PAYMENT_METHOD","$orgModel","PaymentMethod","onClose","setCardId","setPayment","handleAddCard","setCardWrapper","paymentType","t","$accountCard","data","$orgPaymentMethods","orgPayments","cardStyle","number","tmp","i","length","handleChange","value","item","undefined","id","title","card_number","name","extraId","handleActivateCard","params","resendPayMeCode","then","res","finally","generateCardType","Number","substr","find","method","status","e","map","idx","verified","replace"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react'\nimport {useStore} from 'effector-react'\nimport {Col, Radio, Row, Space} from 'antd'\nimport {useTranslation} from 'react-i18next'\nimport payment from '../../../../../Service/payment'\nimport {PlusFillSvg} from '../../../../../Icons/Plus'\nimport {HUMOSvg, UZCARDSvg} from '../../../../../Icons/Cards'\nimport {$paymentModel} from '../../../../../Models/payment-model'\nimport {Title} from '../../../../../UIComponents/Typography/Title'\nimport {CardInfoWrapper, PaymentMethodsWrapper, VerifyCardLink} from '../../style'\nimport {PAYMENT_METHOD} from '../../../../../Constants/payment'\nimport {$orgModel} from '../../../../../Models/org-model'\n\nexport const PaymentMethod = (\n    {\n        onClose,\n        setCardId,\n        setPayment,\n        handleAddCard,\n        setCardWrapper,\n        payment: paymentType\n    }\n) => {\n    const {t} = useTranslation()\n    const {$accountCard: {data}} = useStore($paymentModel)\n    const {$orgPaymentMethods: {data: orgPayments}} = useStore($orgModel)\n    \n    const cardStyle = useCallback((number) => {\n        let tmp = ''\n        for (let i = 0; i < number.length; i++) {\n            if (i % 4 === 0) {\n                tmp += ' ' + number[i]\n            } else {\n                tmp += number[i]\n            }\n        }\n        return tmp\n    }, [])\n    \n    const handleChange = (value, item = undefined) => {\n        if (item) {\n            setPayment({\n                id: item.id,\n                title: `${cardStyle(item.card_number)} ${item.name}`,\n                extraId: value\n            })\n        } else {\n            setPayment({\n                id: PAYMENT_METHOD[value].title,\n                title: PAYMENT_METHOD[value].title,\n                extraId: value\n            })\n        }\n        \n        onClose()\n    }\n    \n    \n    const handleActivateCard = (item) => {\n        const params = {\n            id: item.id\n        }\n        \n        payment.resendPayMeCode(params)\n            .then(res => {\n                if (res) {\n                    setCardWrapper(true)\n                }\n            })\n            .finally(() => {\n                setCardId(item.id)\n            })\n    }\n    \n    const generateCardType = (item) => {\n        if (Number(item.card_number.substr(0, 4)) === 8600) {\n            return <UZCARDSvg/>\n        } else {\n            return <HUMOSvg/>\n        }\n    }\n    \n    \n    return (\n        <Row gutter={[0, 12]} className='select-card-wrapper'>\n            <Col span={24}>\n                <Title>{t('payment_method')}</Title>\n            </Col>\n            {\n                data && (\n                    <Col span={24}>\n                        <PaymentMethodsWrapper>\n                            <Radio.Group\n                                defaultValue='1'\n                                value={paymentType.id}\n                            >\n                                <Space direction='vertical'>\n                                    {\n                                        orgPayments.find(item => item.method === 1 && item.status) && (\n                                            <Radio\n                                                value='cash'\n                                                onClick={(e) => handleChange(1)}\n                                            >\n                                                {t('cash')}\n                                            </Radio>\n                                        )\n                                    }\n                                    {\n                                        orgPayments.find(item => item.method === 2 && item.status) && (\n                                            <Radio\n                                                value='terminal'\n                                                onClick={(e) => handleChange(2)}\n                                            >\n                                                {t('terminal')}\n                                            </Radio>\n                                        )\n                                    }\n                                    {\n                                        data.map((item, idx) => (\n                                            <Radio\n                                                key={`${idx + 1}`}\n                                                disabled={!item.verified}\n                                                value={item.id}\n                                                onClick={(e) => handleChange(3, item)}\n                                            >\n                                                {generateCardType(item)}\n                                                <CardInfoWrapper>\n                                                    {`${item.card_number.replace(/\\d{4}(?=.)/g, '$& ')} ${item.name && item.name}`}\n                                                    {\n                                                        !item.verified && (\n                                                            <VerifyCardLink onClick={() => handleActivateCard(item)}>\n                                                                {t('activate')}\n                                                            </VerifyCardLink>\n                                                        )\n                                                    }\n                                                </CardInfoWrapper>\n                                            </Radio>\n                                        ))\n                                    }\n                                </Space>\n                            </Radio.Group>\n                        </PaymentMethodsWrapper>\n                    </Col>\n                )\n            }\n            <Col span={24} onClick={handleAddCard} className='add-card-wrapper'>\n                <Row gutter={[12, 0]} align='middle'>\n                    <Col className='plus-svg'>\n                        <PlusFillSvg/>\n                    </Col>\n                    <Col>\n                        {t('add_card')}\n                    </Col>\n                </Row>\n            </Col>\n        </Row>\n    )\n}"]},"metadata":{},"sourceType":"module"}