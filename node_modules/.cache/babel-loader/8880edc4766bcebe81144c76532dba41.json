{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Settings/organisms/cards.jsx\";\nimport React, { useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { ChangeCard } from './change-card';\nimport payment from '../../../Service/payment';\nimport { cardImages } from '../../../data/card-bg-images';\nimport { OverlaySettings } from '../../../Components/Overlay';\nimport { $paymentModel } from '../../../Models/payment-model';\nimport { CreditCardItem } from '../../../Components/Cards/CreditCard';\nexport const Cards = ({\n  cardId,\n  setCardId,\n  setCreateCard\n}) => {\n  const [openOverlay, setOpenOverlay] = useState(false);\n  const {\n    $accountCard: {\n      data\n    }\n  } = useStore($paymentModel);\n  const [cardName, setCardName] = useState('');\n\n  const handleClickOnCard = item => {\n    setOpenOverlay(true);\n    setCardName(item.name);\n    setCardId(item.id);\n  };\n\n  const handleActivate = item => {\n    payment.resendPayMeCode({\n      id: item.id\n    }).then(res => {\n      if (res) {\n        setCreateCard(true);\n        setCardId(null);\n      }\n    }).finally(() => {\n      setCardId(item.id);\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    onClose: () => setOpenOverlay(false),\n    openSettings: openOverlay,\n    content: /*#__PURE__*/React.createElement(ChangeCard, {\n      cardId: cardId,\n      setCardId: setCardId,\n      cardName: cardName,\n      setCardName: setCardName,\n      setOpenOverlay: setOpenOverlay,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 26\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }\n  }, data === null || data === void 0 ? void 0 : data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(CreditCardItem, {\n    valid: item.verified,\n    name: item.name,\n    bgImage: cardImages[idx],\n    number: item.card_number,\n    handleClick: () => handleClickOnCard(item),\n    expireDate: item.expire,\n    handleActivate: () => handleActivate(item),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Settings/organisms/cards.jsx"],"names":["React","useState","Col","Row","useStore","ChangeCard","payment","cardImages","OverlaySettings","$paymentModel","CreditCardItem","Cards","cardId","setCardId","setCreateCard","openOverlay","setOpenOverlay","$accountCard","data","cardName","setCardName","handleClickOnCard","item","name","id","handleActivate","resendPayMeCode","then","res","finally","map","idx","verified","card_number","expire"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {ChangeCard} from './change-card'\nimport payment from '../../../Service/payment'\nimport {cardImages} from '../../../data/card-bg-images'\nimport {OverlaySettings} from '../../../Components/Overlay'\nimport {$paymentModel} from '../../../Models/payment-model'\nimport {CreditCardItem} from '../../../Components/Cards/CreditCard'\n\n\nexport const Cards = ({cardId, setCardId, setCreateCard}) => {\n    const [openOverlay, setOpenOverlay] = useState(false)\n    const {$accountCard: {data}} = useStore($paymentModel)\n    const [cardName, setCardName] = useState('')\n    \n    \n    const handleClickOnCard = (item) => {\n        setOpenOverlay(true)\n        setCardName(item.name)\n        setCardId(item.id)\n    }\n    \n    const handleActivate = (item) => {\n        payment.resendPayMeCode({id: item.id})\n            .then(res => {\n                if (res) {\n                    setCreateCard(true)\n                    setCardId(null)\n                }\n            })\n            .finally(() => {\n                setCardId(item.id)\n            })\n    }\n    \n    return (\n        <>\n            <OverlaySettings\n                onClose={() => setOpenOverlay(false)}\n                openSettings={openOverlay}\n                content={<ChangeCard\n                    cardId={cardId}\n                    setCardId={setCardId}\n                    cardName={cardName}\n                    setCardName={setCardName}\n                    setOpenOverlay={setOpenOverlay}\n                />}\n            />\n            <Row gutter={[12, 12]}>\n                {\n                    data?.map((item, idx) => (\n                        <Col\n                            span={24}\n                            key={`${idx + 1}`}\n                        >\n                            <CreditCardItem\n                                valid={item.verified}\n                                name={item.name}\n                                bgImage={cardImages[idx]}\n                                number={item.card_number}\n                                handleClick={() => handleClickOnCard(item)}\n                                expireDate={item.expire}\n                                handleActivate={() => handleActivate(item)}\n                            />\n                        </Col>\n                    ))\n                }\n            </Row>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}