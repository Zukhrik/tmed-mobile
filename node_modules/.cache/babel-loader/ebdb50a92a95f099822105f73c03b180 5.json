{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { commonStoreList, storeListWithKey, storeWithKey } from '../../utils/store-utils';\nimport { fetchDeleteOrderCart, fetchOrder, fetchOrderCartList, fetchOrderIdOffers, fetchOrderList, fetchOrderOffersConclusions, fetchOrgOrderCarts, fetchOrgOrderResponsible } from './effects';\nimport { resetOrderCartList, resetOrderDetail, resetOrderIdOffers, resetOrderListMount, resetOrgOrderCart } from './events';\nconst $orgOrderCartList = createStore({\n  loading: false,\n  error: false,\n  result: {},\n  data: [],\n  forceLoading: 0\n}).on(fetchOrgOrderCarts.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgOrderCarts.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrgOrderCarts.done, (state, {\n  params,\n  result\n}) => {\n  const processed = storeListWithKey({\n    key: params.org_slug_name,\n    response: result.data,\n    state,\n    clear: params.clear,\n    limit: params.params.limit\n  });\n\n  if (params.action && result.data.results.length === 0) {\n    params.action();\n  }\n\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).on(fetchDeleteOrderCart.done, (state, {\n  params\n}) => {\n  var _dataItem$offering;\n\n  const id = params.offering_id;\n  const organization = params.organization;\n  const data = { ...state.data\n  };\n  const dataItem = data[organization].find(item => {\n    var _item$offering;\n\n    return ((_item$offering = item.offering) === null || _item$offering === void 0 ? void 0 : _item$offering.id) === id;\n  });\n  const total_cost = { ...state.result\n  }.total_cost - (dataItem === null || dataItem === void 0 ? void 0 : (_dataItem$offering = dataItem.offering) === null || _dataItem$offering === void 0 ? void 0 : _dataItem$offering.cost);\n  const count = { ...state.result\n  }.count - 1;\n  data[organization] = data[organization].filter(item => item.offering.id !== id);\n\n  if (params.action) {\n    console.log(params);\n    params.action();\n  }\n\n  return { ...state,\n    data,\n    ...(state.result.total_cost = total_cost),\n    ...(state.result.count = count)\n  };\n}).reset(resetOrgOrderCart);\nconst $orderCartList = createStore({\n  loading: false,\n  data: [],\n  forceLoading: 0,\n  result: {},\n  error: false\n}).on(fetchOrderCartList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrderCartList.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1,\n  result: {}\n})).on(fetchOrderCartList.done, (state, {\n  result,\n  params\n}) => {\n  const isNoData = (params === null || params === void 0 ? void 0 : params.organization) && result.data.findIndex(item => item.seller.slug_name === params.organization) === -1;\n\n  if ((params === null || params === void 0 ? void 0 : params.isRedirect) && (params === null || params === void 0 ? void 0 : params.action) && isNoData) {\n    params.action();\n  }\n\n  return { ...state,\n    data: result.data,\n    forceLoading: 2,\n    result: result.data\n  };\n}).reset(resetOrderCartList);\nconst $orgOrderResponsible = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false\n}).on(fetchOrgOrderResponsible.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrgOrderResponsible.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {}\n})).on(fetchOrgOrderResponsible.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear\n  });\n  return { ...state,\n    ...processed\n  };\n});\nconst $orderDetail = createStore({\n  data: {},\n  loading: false,\n  error: false,\n  forceLoading: 0\n}).on(fetchOrder.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrder.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrder.done, (state, {\n  result,\n  params\n}) => {\n  const processed = storeWithKey({\n    response: result.data,\n    state,\n    key: params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).reset(resetOrderDetail);\nconst $orderList = createStore({\n  data: [],\n  loading: false,\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchOrderList.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrderList.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrderList.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    state,\n    clear: params.clear,\n    response: result.data,\n    limit: params.params.limit\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).reset(resetOrderListMount);\nconst $orderIdOffers = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchOrderIdOffers.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrderIdOffers.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrderIdOffers.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n}).reset(resetOrderIdOffers);\nconst $orderOffersConclusions = createStore({\n  loading: false,\n  data: [],\n  result: {},\n  error: false,\n  forceLoading: 0\n}).on(fetchOrderOffersConclusions.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchOrderOffersConclusions.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {},\n  forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n})).on(fetchOrderOffersConclusions.done, (state, {\n  result,\n  params\n}) => {\n  const processed = commonStoreList({\n    response: result.data,\n    state,\n    clear: params.clear,\n    ...params.params\n  });\n  return { ...state,\n    ...processed,\n    forceLoading: 2\n  };\n});\nexport const $orderModel = combine({\n  $orgOrderResponsible,\n  $orgOrderCartList,\n  $orderIdOffers,\n  $orderCartList,\n  $orderDetail,\n  $orderList,\n  $orderOffersConclusions\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Models/order-model/store.js"],"names":["combine","createStore","commonStoreList","storeListWithKey","storeWithKey","fetchDeleteOrderCart","fetchOrder","fetchOrderCartList","fetchOrderIdOffers","fetchOrderList","fetchOrderOffersConclusions","fetchOrgOrderCarts","fetchOrgOrderResponsible","resetOrderCartList","resetOrderDetail","resetOrderIdOffers","resetOrderListMount","resetOrgOrderCart","$orgOrderCartList","loading","error","result","data","forceLoading","on","pending","state","fail","done","params","processed","key","org_slug_name","response","clear","limit","action","results","length","id","offering_id","organization","dataItem","find","item","offering","total_cost","cost","count","filter","console","log","reset","$orderCartList","isNoData","findIndex","seller","slug_name","isRedirect","$orgOrderResponsible","$orderDetail","$orderList","$orderIdOffers","$orderOffersConclusions","$orderModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\nimport {commonStoreList, storeListWithKey, storeWithKey} from '../../utils/store-utils'\nimport {\n    fetchDeleteOrderCart,\n    fetchOrder,\n    fetchOrderCartList,\n    fetchOrderIdOffers,\n    fetchOrderList,\n    fetchOrderOffersConclusions,\n    fetchOrgOrderCarts,\n    fetchOrgOrderResponsible\n} from './effects'\nimport {\n    resetOrderCartList,\n    resetOrderDetail,\n    resetOrderIdOffers,\n    resetOrderListMount,\n    resetOrgOrderCart\n} from './events'\n\nconst $orgOrderCartList = createStore({loading: false, error: false, result: {}, data: [], forceLoading: 0})\n    .on(fetchOrgOrderCarts.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrgOrderCarts.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchOrgOrderCarts.done, (state, {params, result}) => {\n        const processed = storeListWithKey({\n            key: params.org_slug_name,\n            response: result.data,\n            state,\n            clear: params.clear,\n            limit: params.params.limit\n        })\n        if (params.action && result.data.results.length === 0) {\n            params.action()\n        }\n        \n        return {...state, ...processed, forceLoading: 2}\n    })\n    .on(fetchDeleteOrderCart.done, (state, {params}) => {\n        const id = params.offering_id\n        const organization = params.organization\n        const data = {...state.data}\n        const dataItem = data[organization].find(item => item.offering?.id === id)\n        \n        const total_cost = {...state.result}.total_cost - dataItem?.offering?.cost\n        const count = {...state.result}.count - 1\n        data[organization] = data[organization].filter(item => item.offering.id !== id)\n        \n        if (params.action) {\n            console.log(params)\n            params.action()\n        }\n        \n        return {\n            ...state, data, ...state.result.total_cost = total_cost, ...state.result.count = count\n        }\n    })\n    .reset(resetOrgOrderCart)\n\n\nconst $orderCartList = createStore({loading: false, data: [], forceLoading: 0, result: {}, error: false})\n    .on(fetchOrderCartList.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrderCartList.fail, (state, {error}) => ({\n        ...state, error, data: [], forceLoading: state.forceLoading === 2 ? state.forceLoading : 1, result: {}\n    }))\n    .on(fetchOrderCartList.done, (state, {result, params}) => {\n        const isNoData = params?.organization &&\n            result.data.findIndex(item => item.seller.slug_name === params.organization) === -1\n        \n        if (params?.isRedirect && params?.action && isNoData) {\n            params.action()\n        }\n        \n        return {...state, data: result.data, forceLoading: 2, result: result.data}\n    })\n    .reset(resetOrderCartList)\n\nconst $orgOrderResponsible = createStore({loading: false, data: [], result: {}, error: false})\n    .on(fetchOrgOrderResponsible.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrgOrderResponsible.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}\n    }))\n    .on(fetchOrgOrderResponsible.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            response: result.data, state, clear: params.clear\n        })\n        return {...state, ...processed}\n    })\n\nconst $orderDetail = createStore({data: {}, loading: false, error: false, forceLoading: 0})\n    .on(fetchOrder.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrder.fail, (state, {error}) => ({\n        ...state, error, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchOrder.done, (state, {result, params}) => {\n        const processed = storeWithKey({\n            response: result.data,\n            state,\n            key: params\n        })\n        \n        return {...state, ...processed, forceLoading: 2}\n    })\n    .reset(resetOrderDetail)\n\nconst $orderList = createStore({data: [], loading: false, result: {}, error: false, forceLoading: 0})\n    .on(fetchOrderList.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrderList.fail, (state, {error}) => ({\n        ...state, error, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchOrderList.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            state,\n            clear: params.clear,\n            response: result.data,\n            limit: params.params.limit\n        })\n        \n        return {\n            ...state,\n            ...processed,\n            forceLoading: 2\n        }\n    })\n    .reset(resetOrderListMount)\n\nconst $orderIdOffers = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\n    .on(fetchOrderIdOffers.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrderIdOffers.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchOrderIdOffers.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            response: result.data, state, clear: params.clear, ...params.params\n        })\n        return {...state, ...processed, forceLoading: 2}\n    })\n    .reset(resetOrderIdOffers)\n\nconst $orderOffersConclusions = createStore({loading: false, data: [], result: {}, error: false, forceLoading: 0})\n    .on(fetchOrderOffersConclusions.pending, (state, loading) => ({...state, loading}))\n    .on(fetchOrderOffersConclusions.fail, (state, {error}) => ({\n        ...state, error, data: [], result: {}, forceLoading: state.forceLoading === 2 ? state.forceLoading : 1\n    }))\n    .on(fetchOrderOffersConclusions.done, (state, {result, params}) => {\n        const processed = commonStoreList({\n            response: result.data, state, clear: params.clear, ...params.params\n        })\n        return {...state, ...processed, forceLoading: 2}\n    })\n\n\nexport const $orderModel = combine({\n    $orgOrderResponsible,\n    $orgOrderCartList,\n    $orderIdOffers,\n    $orderCartList,\n    $orderDetail,\n    $orderList,\n    $orderOffersConclusions\n})"]},"metadata":{},"sourceType":"module"}