{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createOrJoinSocket = void 0;\n\nvar globals_1 = require(\"./globals\");\n\nvar constants_1 = require(\"./constants\");\n\nvar attach_listener_1 = require(\"./attach-listener\");\n\nvar attach_shared_listeners_1 = require(\"./attach-shared-listeners\");\n\nvar manage_subscribers_1 = require(\"./manage-subscribers\"); //TODO ensure that all onClose callbacks are called\n\n\nvar cleanSubscribers = function cleanSubscribers(url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval) {\n  return function () {\n    manage_subscribers_1.removeSubscriber(url, subscriber);\n\n    if (!manage_subscribers_1.hasSubscribers(url)) {\n      try {\n        var socketLike = globals_1.sharedWebSockets[url];\n\n        if (socketLike instanceof WebSocket) {\n          socketLike.onclose = function (event) {\n            if (optionsRef.current.onClose) {\n              optionsRef.current.onClose(event);\n            }\n\n            setReadyState(constants_1.ReadyState.CLOSED);\n          };\n        }\n\n        socketLike.close();\n      } catch (e) {}\n\n      if (clearSocketIoPingInterval) clearSocketIoPingInterval();\n      delete globals_1.sharedWebSockets[url];\n    }\n  };\n};\n\nexports.createOrJoinSocket = function (webSocketRef, url, setReadyState, optionsRef, setLastMessage, startRef, reconnectCount, sendMessage) {\n  if (!constants_1.isEventSourceSupported && optionsRef.current.eventSourceOptions) {\n    if (constants_1.isReactNative) {\n      throw new Error('EventSource is not supported in ReactNative');\n    } else {\n      throw new Error('EventSource is not supported');\n    }\n  }\n\n  if (optionsRef.current.share) {\n    var clearSocketIoPingInterval = null;\n\n    if (globals_1.sharedWebSockets[url] === undefined) {\n      setReadyState(constants_1.ReadyState.CONNECTING);\n      globals_1.sharedWebSockets[url] = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);\n      clearSocketIoPingInterval = attach_shared_listeners_1.attachSharedListeners(globals_1.sharedWebSockets[url], url, optionsRef, sendMessage);\n    } else {\n      setReadyState(globals_1.sharedWebSockets[url].readyState);\n    }\n\n    var subscriber = {\n      setLastMessage: setLastMessage,\n      setReadyState: setReadyState,\n      optionsRef: optionsRef,\n      reconnectCount: reconnectCount,\n      reconnect: startRef\n    };\n    manage_subscribers_1.addSubscriber(url, subscriber);\n    webSocketRef.current = globals_1.sharedWebSockets[url];\n    return cleanSubscribers(url, subscriber, optionsRef, setReadyState, clearSocketIoPingInterval);\n  } else {\n    setReadyState(constants_1.ReadyState.CONNECTING);\n    webSocketRef.current = optionsRef.current.eventSourceOptions ? new EventSource(url, optionsRef.current.eventSourceOptions) : new WebSocket(url, optionsRef.current.protocols);\n\n    if (!webSocketRef.current) {\n      throw new Error('WebSocket failed to be created');\n    }\n\n    return attach_listener_1.attachListeners(webSocketRef.current, {\n      setLastMessage: setLastMessage,\n      setReadyState: setReadyState\n    }, optionsRef, startRef.current, reconnectCount, sendMessage);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}