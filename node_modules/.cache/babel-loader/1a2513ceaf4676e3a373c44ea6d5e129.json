{"ast":null,"code":"import { useCallback } from 'react';\nimport { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useLocation } from 'react-router-dom';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { changeLoadingStatusOffering, changeOrgOfferingStatus } from '../../Models/offerings-model';\nexport function useOrgOrder() {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n  const checkoutOffering = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    const isInCart = e => {\n      const queryList = useQuery([], () => {});\n    };\n\n    if (!event.loading) {\n      changeLoadingStatusOffering({\n        id: event.id,\n        status: true\n      });\n\n      if (!event.inCart) {\n        const params = {\n          org_slug_name: event.organization,\n          data: {\n            offering_id: event.id,\n            responsible_id: specId ? specId : orgSpecList[0].id\n          }\n        };\n        order.postOrgOrderCart(params).then(res => {\n          if (res) {\n            saveURLMount(pathname);\n            changeOrgOfferingStatus({\n              offering_id: params.data.offering_id,\n              status: true,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      } else {\n        order.deleteOrderCart({\n          offering_id: event.id\n        }).then(res => {\n          if (res) {\n            changeOrgOfferingStatus({\n              offering_id: event.id,\n              status: false,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      }\n    }\n  }, [specId, pathname]);\n  return {\n    currency,\n    checkoutOffering\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useUrlParams","useStore","order","useLocation","$appModel","saveURLMount","$accountModel","getOrgOrderCartsMount","changeLoadingStatusOffering","changeOrgOfferingStatus","useOrgOrder","pathname","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","checkoutOffering","event","orgSpecList","responsible","isInCart","e","queryList","useQuery","loading","id","status","inCart","params","org_slug_name","organization","data","offering_id","responsible_id","postOrgOrderCart","then","res","loadingStatus","limit","offset","clear","catch","console","log","response","deleteOrderCart"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport {useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useLocation} from 'react-router-dom'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {changeLoadingStatusOffering, changeOrgOfferingStatus} from '../../Models/offerings-model'\n\nexport function useOrgOrder() {\n    const {pathname} = useLocation()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    const checkoutOffering = useCallback((event) => {\n        const orgSpecList = event.responsible\n    \n        const isInCart = (e) => {\n            const queryList = useQuery([],() => {\n                \n            })\n        }\n    \n        if (!event.loading) {\n            changeLoadingStatusOffering({id: event.id, status: true})\n            if (!event.inCart) {\n                const params = {\n                    org_slug_name: event.organization,\n                    data: {\n                        offering_id: event.id,\n                        responsible_id: specId ? specId : orgSpecList[0].id\n                    }\n                }\n                order.postOrgOrderCart(params)\n                    .then((res) => {\n                        if (res) {\n                            saveURLMount(pathname)\n                            changeOrgOfferingStatus({\n                                offering_id: params.data.offering_id,\n                                status: true,\n                                loadingStatus: false\n                            })\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            } else {\n                order.deleteOrderCart({offering_id: event.id})\n                    .then((res) => {\n                        if (res) {\n                            changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            }\n        }\n        \n    }, [specId, pathname])\n    \n    return {\n        currency, checkoutOffering\n    }\n}"]},"metadata":{},"sourceType":"module"}