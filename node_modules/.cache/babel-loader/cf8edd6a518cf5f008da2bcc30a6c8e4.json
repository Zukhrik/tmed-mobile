{"ast":null,"code":"import axios from 'axios';\nimport Cookies from 'js-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { tokenMount } from '../Models/app';\nimport { showMessage } from '../UIComponents/MessageNotification';\nlet isRefreshing = false;\nlet refreshSubscribers = [];\nlet devMode = null;\n\nconst axiosHeaders = (config = {}) => {\n  var _config$headers;\n\n  config.headers = (_config$headers = config.headers) !== null && _config$headers !== void 0 ? _config$headers : {};\n\n  if (devMode) {\n    config['headers']['dev-mode'] = devMode;\n  }\n\n  return config;\n};\n\nconst addSuffixToRequest = config => {\n  if (!config.headers.hideSuffix) {\n    config.url = config.url.indexOf('/v1.0/api') === -1 ? `/v1.0/api${config.url}` : config.url;\n  }\n\n  delete config.headers.hideSuffix;\n  return config;\n};\n\nexport const httpClient = axios.create({});\n\nfunction subscribeTokenRefresh(cb) {\n  refreshSubscribers.push(cb);\n}\n\nfunction onRefreshed(token) {\n  refreshSubscribers.map(cb => cb(token));\n  refreshSubscribers = [];\n}\n\nhttpClient.interceptors.response.use(response => {\n  return response;\n}, error => {\n  const {\n    config,\n    response: {\n      status,\n      data\n    }\n  } = error;\n  const originalRequest = config;\n  const refreshToken = Cookies.get('refresh-token');\n\n  if (status === 401) {\n    if (refreshToken) {\n      if (!isRefreshing) {\n        isRefreshing = true;\n        axios.post(`/v1.0/api/account/token-refresh/`, {\n          refresh: refreshToken\n        }, { ...axiosHeaders(config)\n        }).then(res => {\n          isRefreshing = false;\n          onRefreshed(res.data.access);\n          const tokens = Cookies.get('users') ? JSON.parse(Cookies.get('users')) : {};\n\n          if (tokens) {\n            tokens[jwtDecode(res.data.access).username] = {\n              access: res.data.access,\n              refresh: res.data.refresh\n            };\n            Cookies.set('users', JSON.stringify(tokens));\n          }\n\n          Cookies.set('token', res.data.access);\n          tokenMount(res.data.access);\n          Cookies.set('refresh-token', res.data.refresh);\n        }).catch(() => {\n          tokenMount(null);\n          Cookies.remove('token');\n          Cookies.remove('refresh-token');\n          Cookies.remove('users');\n          isRefreshing = false;\n        });\n      }\n\n      return new Promise((resolve, reject) => {\n        subscribeTokenRefresh(token => {\n          originalRequest.headers['Authorization'] = 'Bearer ' + token;\n          resolve(axios(originalRequest));\n        });\n      });\n    }\n  } else if (status === 400) {\n    const errorData = data.errors;\n\n    for (let i = 0; i < errorData.length; i++) {\n      showMessage(errorData[i].message, 'danger');\n    }\n  } else {\n    return Promise.reject(error);\n  }\n});\nhttpClient.interceptors.request.use(config => {\n  let token = Cookies.get('token');\n  let configParams = axiosHeaders(config);\n  configParams = addSuffixToRequest(configParams);\n\n  if (window.innerWidth === 1080) {\n    configParams.headers['x-device-id'] = '4';\n  } else {\n    configParams.headers['x-device-id'] = '3';\n  }\n\n  if (token) {\n    if (configParams.headers.notAuth === undefined) {\n      configParams.headers = Object.assign(configParams.headers, {\n        Authorization: 'Token ' + token\n      });\n    } else {\n      delete configParams.headers.notAuth;\n    }\n\n    return configParams;\n  } else {\n    delete configParams.headers['Authorization'];\n    let lang = localStorage.getItem('lang') ? JSON.parse(localStorage.getItem('lang')) : 'ru';\n\n    if (lang) {\n      configParams.headers['lang'] = lang;\n    }\n\n    return configParams;\n  }\n});\nexport const httpGet = params => httpClient({\n  method: 'get',\n  ...params\n});\nexport const httpPost = params => httpClient({\n  method: 'post',\n  ...params\n});\nexport const httpPut = params => httpClient({\n  method: 'put',\n  ...params\n});\nexport const httpPatch = params => httpClient({\n  method: 'patch',\n  ...params\n});\nexport const httpDelete = params => httpClient({\n  method: 'delete',\n  ...params\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Service/index.js"],"names":["axios","Cookies","jwtDecode","tokenMount","showMessage","isRefreshing","refreshSubscribers","devMode","axiosHeaders","config","headers","addSuffixToRequest","hideSuffix","url","indexOf","httpClient","create","subscribeTokenRefresh","cb","push","onRefreshed","token","map","interceptors","response","use","error","status","data","originalRequest","refreshToken","get","post","refresh","then","res","access","tokens","JSON","parse","username","set","stringify","catch","remove","Promise","resolve","reject","errorData","errors","i","length","message","request","configParams","window","innerWidth","notAuth","undefined","Object","assign","Authorization","lang","localStorage","getItem","httpGet","params","method","httpPost","httpPut","httpPatch","httpDelete"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport Cookies from 'js-cookie'\nimport jwtDecode from 'jwt-decode'\nimport {tokenMount} from '../Models/app'\nimport {showMessage} from '../UIComponents/MessageNotification'\n\nlet isRefreshing = false\nlet refreshSubscribers = []\nlet devMode = null\n\nconst axiosHeaders = (config = {}) => {\n    config.headers = config.headers ?? {}\n    if (devMode) {\n        config['headers']['dev-mode'] = devMode\n    }\n    return config\n}\n\nconst addSuffixToRequest = (config) => {\n    if (!config.headers.hideSuffix) {\n        config.url = config.url.indexOf('/v1.0/api') === -1 ? `/v1.0/api${config.url}` : config.url\n    }\n    delete config.headers.hideSuffix\n    return config\n}\n\nexport const httpClient = axios.create({})\n\nfunction subscribeTokenRefresh(cb) {\n    refreshSubscribers.push(cb)\n}\n\nfunction onRefreshed(token) {\n    refreshSubscribers.map(cb => cb(token))\n    refreshSubscribers = []\n}\n\nhttpClient.interceptors.response.use(response => {\n    return response\n}, error => {\n    const {config, response: {status, data}} = error\n    const originalRequest = config\n    const refreshToken = Cookies.get('refresh-token')\n    if (status === 401) {\n        if (refreshToken) {\n            if (!isRefreshing) {\n                isRefreshing = true\n                axios.post(`/v1.0/api/account/token-refresh/`, {refresh: refreshToken}, {...axiosHeaders(config)})\n                    .then(res => {\n                        isRefreshing = false\n                        onRefreshed(res.data.access)\n                        const tokens = Cookies.get('users') ? JSON.parse(Cookies.get('users')) : {}\n                        if (tokens) {\n                            tokens[jwtDecode(res.data.access).username] = {\n                                access: res.data.access,\n                                refresh: res.data.refresh\n                            }\n                            \n                            Cookies.set('users', JSON.stringify(tokens))\n                        }\n                        Cookies.set('token', res.data.access)\n                        tokenMount(res.data.access)\n                        Cookies.set('refresh-token', res.data.refresh)\n                    })\n                    .catch(() => {\n                        tokenMount(null)\n                        Cookies.remove('token')\n                        Cookies.remove('refresh-token')\n                        Cookies.remove('users')\n                        isRefreshing = false\n                    })\n            }\n            \n            return new Promise((resolve, reject) => {\n                subscribeTokenRefresh(token => {\n                    originalRequest.headers['Authorization'] = 'Bearer ' + token\n                    resolve(axios(originalRequest))\n                })\n            })\n        }\n    } else if (status === 400) {\n        const errorData = data.errors\n        for (let i = 0; i < errorData.length; i++) {\n            showMessage(errorData[i].message, 'danger')\n        }\n        \n    } else {\n        return Promise.reject(error)\n    }\n})\n\nhttpClient.interceptors.request.use(config => {\n    let token = Cookies.get('token')\n    let configParams = axiosHeaders(config)\n    configParams = addSuffixToRequest(configParams)\n    if (window.innerWidth === 1080) {\n        configParams.headers['x-device-id'] = '4'\n    } else {\n        configParams.headers['x-device-id'] = '3'\n    }\n    \n    if (token) {\n        if (configParams.headers.notAuth === undefined) {\n            configParams.headers = Object.assign(configParams.headers, {Authorization: 'Token ' + token})\n        } else {\n            delete configParams.headers.notAuth\n        }\n        return configParams\n    } else {\n        delete configParams.headers['Authorization']\n        let lang = localStorage.getItem('lang') ? JSON.parse(localStorage.getItem('lang')) : 'ru'\n        if (lang) {\n            configParams.headers['lang'] = lang\n        }\n        return configParams\n    }\n})\n\nexport const httpGet = params =>\n    httpClient({\n        method: 'get',\n        ...params\n    })\n\nexport const httpPost = params =>\n    httpClient({\n        method: 'post',\n        ...params\n    })\n\nexport const httpPut = params =>\n    httpClient({\n        method: 'put',\n        ...params\n    })\n\nexport const httpPatch = params =>\n    httpClient({\n        method: 'patch',\n        ...params\n    })\n\nexport const httpDelete = params =>\n    httpClient({\n        method: 'delete',\n        ...params\n    })"]},"metadata":{},"sourceType":"module"}