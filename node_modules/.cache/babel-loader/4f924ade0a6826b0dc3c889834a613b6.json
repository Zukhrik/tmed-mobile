{"ast":null,"code":"import { httpGet, httpPatch, httpPost, httpPut } from './index';\nexport default {\n  getAccount: () => httpGet({\n    url: '/account/'\n  }),\n  getAccountPData: () => httpGet({\n    url: '/account/pdata/'\n  }),\n  accountCoupons: () => httpGet({\n    url: '/account/mycoupons/'\n  }),\n  updateAccount: ({\n    data\n  }) => httpPatch({\n    url: '/account/',\n    data\n  }),\n  getAvatars: params => httpGet({\n    url: '/account/avatars/',\n    params\n  }),\n  createAccount: data => httpPost({\n    url: '/account/create/',\n    data,\n    headers: {\n      notAuth: true\n    }\n  }),\n  validateUsername: data => httpPost({\n    url: '/account/validate/',\n    data,\n    headers: {\n      notAuth: true\n    }\n  }),\n  createAvatar: data => httpPost({\n    url: '/account/avatars/',\n    data,\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  updateAvatar: ({\n    data,\n    id\n  }) => httpPatch({\n    url: `/account/avatars/${id}/`,\n    data,\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  updatePData: data => httpPut({\n    data,\n    url: '/account/pdata/',\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  getVideoVerify: () => httpGet({\n    url: '/account/video_verify/'\n  }),\n  createVideoVerify: data => httpPost({\n    url: '/account/video_verify/',\n    data,\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    }\n  }),\n  refreshToken: data => httpPost({\n    url: '/account/token-refresh/',\n    data,\n    headers: {\n      notAuth: true\n    }\n  })\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Service/account.js"],"names":["httpGet","httpPatch","httpPost","httpPut","getAccount","url","getAccountPData","accountCoupons","updateAccount","data","getAvatars","params","createAccount","headers","notAuth","validateUsername","createAvatar","updateAvatar","id","updatePData","getVideoVerify","createVideoVerify","refreshToken"],"mappings":"AAAA,SAAQA,OAAR,EAAiBC,SAAjB,EAA4BC,QAA5B,EAAsCC,OAAtC,QAAoD,SAApD;AAEA,eAAe;AACXC,EAAAA,UAAU,EAAE,MAAMJ,OAAO,CAAC;AAACK,IAAAA,GAAG,EAAE;AAAN,GAAD,CADd;AAEXC,EAAAA,eAAe,EAAE,MAAMN,OAAO,CAAC;AAACK,IAAAA,GAAG,EAAE;AAAN,GAAD,CAFnB;AAGXE,EAAAA,cAAc,EAAE,MAAMP,OAAO,CAAC;AAACK,IAAAA,GAAG,EAAE;AAAN,GAAD,CAHlB;AAIXG,EAAAA,aAAa,EAAE,CAAC;AAACC,IAAAA;AAAD,GAAD,KAAYR,SAAS,CAAC;AAACI,IAAAA,GAAG,EAAE,WAAN;AAAmBI,IAAAA;AAAnB,GAAD,CAJzB;AAKXC,EAAAA,UAAU,EAAGC,MAAD,IAAYX,OAAO,CAAC;AAACK,IAAAA,GAAG,EAAE,mBAAN;AAA2BM,IAAAA;AAA3B,GAAD,CALpB;AAMXC,EAAAA,aAAa,EAAGH,IAAD,IAAUP,QAAQ,CAAC;AAACG,IAAAA,GAAG,EAAE,kBAAN;AAA0BI,IAAAA,IAA1B;AAAgCI,IAAAA,OAAO,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAAzC,GAAD,CANtB;AAOXC,EAAAA,gBAAgB,EAAGN,IAAD,IAAUP,QAAQ,CAAC;AAACG,IAAAA,GAAG,EAAE,oBAAN;AAA4BI,IAAAA,IAA5B;AAAkCI,IAAAA,OAAO,EAAE;AAACC,MAAAA,OAAO,EAAE;AAAV;AAA3C,GAAD,CAPzB;AAQXE,EAAAA,YAAY,EAAGP,IAAD,IAAUP,QAAQ,CAAC;AAC7BG,IAAAA,GAAG,EAAE,mBADwB;AACHI,IAAAA,IADG;AAE7BI,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAFoB,GAAD,CARrB;AAcXI,EAAAA,YAAY,EAAE,CAAC;AAACR,IAAAA,IAAD;AAAOS,IAAAA;AAAP,GAAD,KAAgBjB,SAAS,CAAC;AACpCI,IAAAA,GAAG,EAAG,oBAAmBa,EAAG,GADQ;AACJT,IAAAA,IADI;AAEpCI,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAF2B,GAAD,CAd5B;AAoBXM,EAAAA,WAAW,EAAGV,IAAD,IAAUN,OAAO,CAAC;AAC3BM,IAAAA,IAD2B;AAE3BJ,IAAAA,GAAG,EAAE,iBAFsB;AAG3BQ,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAHkB,GAAD,CApBnB;AAyBXO,EAAAA,cAAc,EAAE,MAAMpB,OAAO,CAAC;AAACK,IAAAA,GAAG,EAAE;AAAN,GAAD,CAzBlB;AA0BXgB,EAAAA,iBAAiB,EAAGZ,IAAD,IAAUP,QAAQ,CAAC;AAClCG,IAAAA,GAAG,EAAE,wBAD6B;AAElCI,IAAAA,IAFkC;AAGlCI,IAAAA,OAAO,EAAE;AAAC,sBAAgB;AAAjB;AAHyB,GAAD,CA1B1B;AA+BXS,EAAAA,YAAY,EAAGb,IAAD,IAAUP,QAAQ,CAAC;AAC7BG,IAAAA,GAAG,EAAE,yBADwB;AACGI,IAAAA,IADH;AACSI,IAAAA,OAAO,EAAE;AAC3CC,MAAAA,OAAO,EAAE;AADkC;AADlB,GAAD;AA/BrB,CAAf","sourcesContent":["import {httpGet, httpPatch, httpPost, httpPut} from './index'\r\n\r\nexport default {\r\n    getAccount: () => httpGet({url: '/account/'}),\r\n    getAccountPData: () => httpGet({url: '/account/pdata/'}),\r\n    accountCoupons: () => httpGet({url: '/account/mycoupons/'}),\r\n    updateAccount: ({data}) => httpPatch({url: '/account/', data}),\r\n    getAvatars: (params) => httpGet({url: '/account/avatars/', params}),\r\n    createAccount: (data) => httpPost({url: '/account/create/', data, headers: {notAuth: true}}),\r\n    validateUsername: (data) => httpPost({url: '/account/validate/', data, headers: {notAuth: true}}),\r\n    createAvatar: (data) => httpPost({\r\n        url: '/account/avatars/', data,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }),\r\n    updateAvatar: ({data, id}) => httpPatch({\r\n        url: `/account/avatars/${id}/`, data,\r\n        headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n        }\r\n    }),\r\n    updatePData: (data) => httpPut({\r\n        data,\r\n        url: '/account/pdata/',\r\n        headers: {'Content-Type': 'multipart/form-data'}\r\n    }),\r\n    getVideoVerify: () => httpGet({url: '/account/video_verify/'}),\r\n    createVideoVerify: (data) => httpPost({\r\n        url: '/account/video_verify/',\r\n        data,\r\n        headers: {'Content-Type': 'multipart/form-data'}\r\n    }),\r\n    refreshToken: (data) => httpPost({\r\n        url: '/account/token-refresh/', data, headers: {\r\n            notAuth: true\r\n        }\r\n    })\r\n}"]},"metadata":{},"sourceType":"module"}