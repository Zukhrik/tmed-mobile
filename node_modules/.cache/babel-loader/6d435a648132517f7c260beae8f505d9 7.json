{"ast":null,"code":"import{useTranslation}from'react-i18next';import{showMessage}from'../../UIComponents/MessageNotification';import{subscribeToOrgMount,unsubscribeFromOrgMount}from'../../Models/org-model';import{subscribeToUserMount,unsubscribeFromUserMount}from'../../Models/user-model';export function useSubscription(_ref){var from=_ref.from;var _useTranslation=useTranslation(),t=_useTranslation.t;var subscribeToAccount=function subscribeToAccount(_ref2){var slug_name=_ref2.slug_name,name=_ref2.name;var option=function option(){var message=t('you_subscribed_to',{n:name});showMessage(message,'success',false);};if(from==='user_list'||from==='user_info'){subscribeToUserMount({username:slug_name,option:option});}if(from==='org_info'||from==='org_list'){subscribeToOrgMount({org_slug_name:slug_name,option:option});}};var unsubscribeFromAccount=function unsubscribeFromAccount(_ref3){var slug_name=_ref3.slug_name,name=_ref3.name;var option=function option(){var message=t('you_unsubscribed_from',{n:name});showMessage(message,'success',false);};if(from==='user_list'||from==='user_info'){unsubscribeFromUserMount({username:slug_name,option:option});}if(from==='org_info'){unsubscribeFromOrgMount({org_slug_name:slug_name,option:option});}};return{subscribeToAccount:subscribeToAccount,unsubscribeFromAccount:unsubscribeFromAccount};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/user/use-subscription.js"],"names":["useTranslation","showMessage","subscribeToOrgMount","unsubscribeFromOrgMount","subscribeToUserMount","unsubscribeFromUserMount","useSubscription","from","t","subscribeToAccount","slug_name","name","option","message","n","username","org_slug_name","unsubscribeFromAccount"],"mappings":"AAAA,OAAQA,cAAR,KAA6B,eAA7B,CACA,OAAQC,WAAR,KAA0B,wCAA1B,CACA,OAAQC,mBAAR,CAA6BC,uBAA7B,KAA2D,wBAA3D,CACA,OAAQC,oBAAR,CAA8BC,wBAA9B,KAA6D,yBAA7D,CAEA,MAAO,SAASC,CAAAA,eAAT,MAAiC,IAAPC,CAAAA,IAAO,MAAPA,IAAO,CACpC,oBAAYP,cAAc,EAA1B,CAAOQ,CAAP,iBAAOA,CAAP,CAEA,GAAMC,CAAAA,kBAAkB,CAAG,QAArBA,CAAAA,kBAAqB,OAAuB,IAArBC,CAAAA,SAAqB,OAArBA,SAAqB,CAAVC,IAAU,OAAVA,IAAU,CAC9C,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjB,GAAMC,CAAAA,OAAO,CAAGL,CAAC,CAAC,mBAAD,CAAsB,CAACM,CAAC,CAAEH,IAAJ,CAAtB,CAAjB,CACAV,WAAW,CAACY,OAAD,CAAU,SAAV,CAAqB,KAArB,CAAX,CACH,CAHD,CAKA,GAAIN,IAAI,GAAK,WAAT,EAAwBA,IAAI,GAAK,WAArC,CAAkD,CAC9CH,oBAAoB,CAAC,CAACW,QAAQ,CAAEL,SAAX,CAAsBE,MAAM,CAANA,MAAtB,CAAD,CAApB,CACH,CAED,GAAIL,IAAI,GAAK,UAAT,EAAuBA,IAAI,GAAK,UAApC,CAAgD,CAC5CL,mBAAmB,CAAC,CAACc,aAAa,CAAEN,SAAhB,CAA2BE,MAAM,CAANA,MAA3B,CAAD,CAAnB,CACH,CACJ,CAbD,CAeA,GAAMK,CAAAA,sBAAsB,CAAG,QAAzBA,CAAAA,sBAAyB,OAAuB,IAArBP,CAAAA,SAAqB,OAArBA,SAAqB,CAAVC,IAAU,OAAVA,IAAU,CAClD,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,EAAM,CACjB,GAAMC,CAAAA,OAAO,CAAGL,CAAC,CAAC,uBAAD,CAA0B,CAACM,CAAC,CAAEH,IAAJ,CAA1B,CAAjB,CACAV,WAAW,CAACY,OAAD,CAAU,SAAV,CAAqB,KAArB,CAAX,CACH,CAHD,CAKA,GAAIN,IAAI,GAAK,WAAT,EAAwBA,IAAI,GAAK,WAArC,CAAkD,CAC9CF,wBAAwB,CAAC,CAACU,QAAQ,CAAEL,SAAX,CAAsBE,MAAM,CAANA,MAAtB,CAAD,CAAxB,CACH,CAED,GAAIL,IAAI,GAAK,UAAb,CAAyB,CACrBJ,uBAAuB,CAAC,CAACa,aAAa,CAAEN,SAAhB,CAA2BE,MAAM,CAANA,MAA3B,CAAD,CAAvB,CACH,CACJ,CAbD,CAeA,MAAO,CACHH,kBAAkB,CAAlBA,kBADG,CAEHQ,sBAAsB,CAAtBA,sBAFG,CAAP,CAIH","sourcesContent":["import {useTranslation} from 'react-i18next'\nimport {showMessage} from '../../UIComponents/MessageNotification'\nimport {subscribeToOrgMount, unsubscribeFromOrgMount} from '../../Models/org-model'\nimport {subscribeToUserMount, unsubscribeFromUserMount} from '../../Models/user-model'\n\nexport function useSubscription({from}) {\n    const {t} = useTranslation()\n    \n    const subscribeToAccount = ({slug_name, name}) => {\n        const option = () => {\n            const message = t('you_subscribed_to', {n: name})\n            showMessage(message, 'success', false)\n        }\n        \n        if (from === 'user_list' || from === 'user_info') {\n            subscribeToUserMount({username: slug_name, option})\n        }\n        \n        if (from === 'org_info' || from === 'org_list') {\n            subscribeToOrgMount({org_slug_name: slug_name, option})\n        }\n    }\n    \n    const unsubscribeFromAccount = ({slug_name, name}) => {\n        const option = () => {\n            const message = t('you_unsubscribed_from', {n: name})\n            showMessage(message, 'success', false)\n        }\n        \n        if (from === 'user_list' || from === 'user_info') {\n            unsubscribeFromUserMount({username: slug_name, option})\n        }\n        \n        if (from === 'org_info') {\n            unsubscribeFromOrgMount({org_slug_name: slug_name, option})\n        }\n    }\n    \n    return {\n        subscribeToAccount,\n        unsubscribeFromAccount\n    }\n}"]},"metadata":{},"sourceType":"module"}