{"ast":null,"code":"import { useCallback } from 'react';\nimport { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useLocation } from 'react-router-dom';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { changeLoadingStatusOffering, changeOrgOfferingStatus } from '../../Models/offerings-model';\nimport { useMutation } from 'react-query';\nexport function useOrgOrder() {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n  const checkoutOffering = useCallback(event => {\n    const orgSpecList = event.responsible;\n    console.log(event);\n\n    if (!event.loading) {\n      changeLoadingStatusOffering({\n        id: event.id,\n        status: true\n      });\n\n      if (!event.inCart) {\n        // const params = {\n        //     org_slug_name: event.organization,\n        //     data: {\n        //         offering_id: event.id,\n        //         responsible_id: specId ? specId : orgSpecList[0].id\n        //     }\n        // }\n        // order.postOrgOrderCart(params)\n        //     .then((res) => {\n        //         if (res) {\n        //             saveURLMount(pathname)\n        //             changeOrgOfferingStatus({\n        //                 offering_id: params.data.offering_id,\n        //                 status: true,\n        //                 loadingStatus: false\n        //             })\n        //             getOrgOrderCartsMount({\n        //                 org_slug_name: event.organization,\n        //                 params: {limit: 1, offset: 0},\n        //                 clear: true\n        //             })\n        //         }\n        //     })\n        //     .catch((e) => {\n        //         console.log(e.response)\n        //     })\n        const [mutate] = useMutation();\n      } else {\n        order.deleteOrderCart({\n          offering_id: event.id\n        }).then(res => {\n          if (res) {\n            changeOrgOfferingStatus({\n              offering_id: event.id,\n              status: false,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      }\n    }\n  }, [specId, pathname]);\n  return {\n    currency,\n    checkoutOffering\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useUrlParams","useStore","order","useLocation","$appModel","saveURLMount","$accountModel","getOrgOrderCartsMount","changeLoadingStatusOffering","changeOrgOfferingStatus","useMutation","useOrgOrder","pathname","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","checkoutOffering","event","orgSpecList","responsible","console","log","loading","id","status","inCart","mutate","deleteOrderCart","offering_id","then","res","loadingStatus","org_slug_name","organization","params","limit","offset","clear","catch","e","response"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AACA,SAAQC,SAAR,EAAmBC,YAAnB,QAAsC,kBAAtC;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AACA,SAAQC,2BAAR,EAAqCC,uBAArC,QAAmE,8BAAnE;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAO,SAASC,WAAT,GAAuB;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAaT,WAAW,EAA9B;AACA,QAAM;AAACU,IAAAA;AAAD,MAAwBZ,QAAQ,CAACG,SAAD,CAAtC;AACA,QAAM;AAACU,IAAAA,OAAO,EAAE;AAACC,MAAAA,aAAa,EAAEC;AAAhB;AAAV,MAAqChB,YAAY,EAAvD;AACA,QAAM;AAACiB,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgCjB,QAAQ,CAACK,aAAD,CAA9C;AACA,QAAMa,QAAQ,GAAGD,cAAc,GAAGA,cAAc,CAACC,QAAf,CAAwBC,IAA3B,GAAkCP,mBAAmB,CAACM,QAApB,IAAgC,EAAjG;AAEA,QAAME,gBAAgB,GAAGtB,WAAW,CAAEuB,KAAD,IAAW;AAC5C,UAAMC,WAAW,GAAGD,KAAK,CAACE,WAA1B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AAEA,QAAI,CAACA,KAAK,CAACK,OAAX,EAAoB;AAChBnB,MAAAA,2BAA2B,CAAC;AAACoB,QAAAA,EAAE,EAAEN,KAAK,CAACM,EAAX;AAAeC,QAAAA,MAAM,EAAE;AAAvB,OAAD,CAA3B;;AACA,UAAI,CAACP,KAAK,CAACQ,MAAX,EAAmB;AAEf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,cAAM,CAACC,MAAD,IAAWrB,WAAW,EAA5B;AAEH,OA/BD,MA+BO;AACHR,QAAAA,KAAK,CAAC8B,eAAN,CAAsB;AAACC,UAAAA,WAAW,EAAEX,KAAK,CAACM;AAApB,SAAtB,EACKM,IADL,CACWC,GAAD,IAAS;AACX,cAAIA,GAAJ,EAAS;AACL1B,YAAAA,uBAAuB,CAAC;AAACwB,cAAAA,WAAW,EAAEX,KAAK,CAACM,EAApB;AAAwBC,cAAAA,MAAM,EAAE,KAAhC;AAAuCO,cAAAA,aAAa,EAAE;AAAtD,aAAD,CAAvB;AACA7B,YAAAA,qBAAqB,CAAC;AAClB8B,cAAAA,aAAa,EAAEf,KAAK,CAACgB,YADH;AAElBC,cAAAA,MAAM,EAAE;AAACC,gBAAAA,KAAK,EAAE,CAAR;AAAWC,gBAAAA,MAAM,EAAE;AAAnB,eAFU;AAGlBC,cAAAA,KAAK,EAAE;AAHW,aAAD,CAArB;AAKH;AACJ,SAVL,EAWKC,KAXL,CAWYC,CAAD,IAAO;AACVnB,UAAAA,OAAO,CAACC,GAAR,CAAYkB,CAAC,CAACC,QAAd;AACH,SAbL;AAcH;AACJ;AAEJ,GAvDmC,EAuDjC,CAAC7B,MAAD,EAASJ,QAAT,CAvDiC,CAApC;AAyDA,SAAO;AACHO,IAAAA,QADG;AACOE,IAAAA;AADP,GAAP;AAGH","sourcesContent":["import {useCallback} from 'react'\nimport {useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useLocation} from 'react-router-dom'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {changeLoadingStatusOffering, changeOrgOfferingStatus} from '../../Models/offerings-model'\nimport {useMutation} from 'react-query'\n\nexport function useOrgOrder() {\n    const {pathname} = useLocation()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    const checkoutOffering = useCallback((event) => {\n        const orgSpecList = event.responsible\n        console.log(event)\n    \n        if (!event.loading) {\n            changeLoadingStatusOffering({id: event.id, status: true})\n            if (!event.inCart) {\n                \n                // const params = {\n                //     org_slug_name: event.organization,\n                //     data: {\n                //         offering_id: event.id,\n                //         responsible_id: specId ? specId : orgSpecList[0].id\n                //     }\n                // }\n                // order.postOrgOrderCart(params)\n                //     .then((res) => {\n                //         if (res) {\n                //             saveURLMount(pathname)\n                //             changeOrgOfferingStatus({\n                //                 offering_id: params.data.offering_id,\n                //                 status: true,\n                //                 loadingStatus: false\n                //             })\n                //             getOrgOrderCartsMount({\n                //                 org_slug_name: event.organization,\n                //                 params: {limit: 1, offset: 0},\n                //                 clear: true\n                //             })\n                //         }\n                //     })\n                //     .catch((e) => {\n                //         console.log(e.response)\n                //     })\n    \n                const [mutate] = useMutation()\n                \n            } else {\n                order.deleteOrderCart({offering_id: event.id})\n                    .then((res) => {\n                        if (res) {\n                            changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            }\n        }\n        \n    }, [specId, pathname])\n    \n    return {\n        currency, checkoutOffering\n    }\n}"]},"metadata":{},"sourceType":"module"}