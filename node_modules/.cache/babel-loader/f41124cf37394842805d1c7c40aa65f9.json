{"ast":null,"code":"import { useState } from 'react';\nimport { useUrlParams } from '../app';\nimport order from '../../Service/order';\nimport { URL_KEYS } from '../../Constants';\nimport { saveURLMount } from '../../Models/app';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { useHistory, useLocation, useParams } from 'react-router-dom';\nimport { useOfferingDetail } from '../offerings';\nexport function useOfferingOrderInOfferPage() {\n  const {\n    push\n  } = useHistory();\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    organization,\n    offering_id\n  } = useParams();\n  const [openModal, setOpenModal] = useState(false);\n  const {\n    res\n  } = useOfferingDetail(offering_id);\n\n  const handleRequest = () => {\n    var _res$data, _res$data$responsible, _res$data2;\n\n    saveURLMount(pathname);\n    const specId = urlData[URL_KEYS.SPECIALIST_ID] ? urlData[URL_KEYS.SPECIALIST_ID] : res === null || res === void 0 ? void 0 : (_res$data = res.data) === null || _res$data === void 0 ? void 0 : (_res$data$responsible = _res$data.responsible[0]) === null || _res$data$responsible === void 0 ? void 0 : _res$data$responsible.id;\n\n    if (res === null || res === void 0 ? void 0 : (_res$data2 = res.data) === null || _res$data2 === void 0 ? void 0 : _res$data2.is_in_cart) {\n      push(`/records/unregistered/${organization}?${URL_KEYS.SPECIALIST_ID}=${offering_id}`);\n    } else {\n      const params = {\n        org_slug_name: organization,\n        data: {\n          offering_id,\n          responsible_id: specId\n        }\n      };\n      order.postOrgOrderCart(params).then(response => {\n        getOrgOrderCartsMount();\n\n        if (response) {\n          push(`/records/unregistered/${organization}?${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`);\n        }\n      });\n    }\n  };\n\n  return {\n    handleRequest,\n    openModal,\n    setOpenModal\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-offering-order-in-offer-page.js"],"names":["useState","useUrlParams","order","URL_KEYS","saveURLMount","getOrgOrderCartsMount","useHistory","useLocation","useParams","useOfferingDetail","useOfferingOrderInOfferPage","push","urlData","pathname","organization","offering_id","openModal","setOpenModal","res","handleRequest","specId","SPECIALIST_ID","data","responsible","id","is_in_cart","params","org_slug_name","responsible_id","postOrgOrderCart","then","response"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,OAAvB;AACA,SAAQC,YAAR,QAA2B,QAA3B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AACA,SAAQC,qBAAR,QAAoC,0BAApC;AACA,SAAQC,UAAR,EAAoBC,WAApB,EAAiCC,SAAjC,QAAiD,kBAAjD;AACA,SAAQC,iBAAR,QAAgC,cAAhC;AAEA,OAAO,SAASC,2BAAT,GAAuC;AAC1C,QAAM;AAACC,IAAAA;AAAD,MAASL,UAAU,EAAzB;AACA,QAAM;AAACM,IAAAA;AAAD,MAAYX,YAAY,EAA9B;AACA,QAAM;AAACY,IAAAA;AAAD,MAAaN,WAAW,EAA9B;AACA,QAAM;AAACO,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAA8BP,SAAS,EAA7C;AACA,QAAM,CAACQ,SAAD,EAAYC,YAAZ,IAA4BjB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAACkB,IAAAA;AAAD,MAAQT,iBAAiB,CAACM,WAAD,CAA/B;;AAGA,QAAMI,aAAa,GAAG,MAAM;AAAA;;AACxBf,IAAAA,YAAY,CAACS,QAAD,CAAZ;AACA,UAAMO,MAAM,GAAGR,OAAO,CAACT,QAAQ,CAACkB,aAAV,CAAP,GAAkCT,OAAO,CAACT,QAAQ,CAACkB,aAAV,CAAzC,GAAoEH,GAApE,aAAoEA,GAApE,oCAAoEA,GAAG,CAAEI,IAAzE,uEAAoE,UAAWC,WAAX,CAAuB,CAAvB,CAApE,0DAAoE,sBAA2BC,EAA9G;;AAEA,QAAIN,GAAJ,aAAIA,GAAJ,qCAAIA,GAAG,CAAEI,IAAT,+CAAI,WAAWG,UAAf,EAA2B;AACvBd,MAAAA,IAAI,CAAE,yBAAwBG,YAAa,IAAGX,QAAQ,CAACkB,aAAc,IAAGN,WAAY,EAAhF,CAAJ;AACH,KAFD,MAEO;AACH,YAAMW,MAAM,GAAG;AACXC,QAAAA,aAAa,EAAEb,YADJ;AAEXQ,QAAAA,IAAI,EAAE;AACFP,UAAAA,WADE;AAEFa,UAAAA,cAAc,EAAER;AAFd;AAFK,OAAf;AAOAlB,MAAAA,KAAK,CAAC2B,gBAAN,CAAuBH,MAAvB,EACKI,IADL,CACUC,QAAQ,IAAI;AACd1B,QAAAA,qBAAqB;;AACrB,YAAI0B,QAAJ,EAAc;AACVpB,UAAAA,IAAI,CAAE,yBAAwBG,YAAa,IAAGX,QAAQ,CAACkB,aAAc,IAAGT,OAAO,CAACT,QAAQ,CAACkB,aAAV,CAAyB,EAApG,CAAJ;AACH;AACJ,OANL;AAOH;AACJ,GAtBD;;AAwBA,SAAO;AAACF,IAAAA,aAAD;AAAgBH,IAAAA,SAAhB;AAA2BC,IAAAA;AAA3B,GAAP;AACH","sourcesContent":["import {useState} from 'react'\nimport {useUrlParams} from '../app'\nimport order from '../../Service/order'\nimport {URL_KEYS} from '../../Constants'\nimport {saveURLMount} from '../../Models/app'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {useHistory, useLocation, useParams} from 'react-router-dom'\nimport {useOfferingDetail} from '../offerings'\n\nexport function useOfferingOrderInOfferPage() {\n    const {push} = useHistory()\n    const {urlData} = useUrlParams()\n    const {pathname} = useLocation()\n    const {organization, offering_id} = useParams()\n    const [openModal, setOpenModal] = useState(false)\n    const {res} = useOfferingDetail(offering_id)\n    \n    \n    const handleRequest = () => {\n        saveURLMount(pathname)\n        const specId = urlData[URL_KEYS.SPECIALIST_ID] ? urlData[URL_KEYS.SPECIALIST_ID] : res?.data?.responsible[0]?.id\n        \n        if (res?.data?.is_in_cart) {\n            push(`/records/unregistered/${organization}?${URL_KEYS.SPECIALIST_ID}=${offering_id}`)\n        } else {\n            const params = {\n                org_slug_name: organization,\n                data: {\n                    offering_id,\n                    responsible_id: specId\n                }\n            }\n            order.postOrgOrderCart(params)\n                .then(response => {\n                    getOrgOrderCartsMount()\n                    if (response) {\n                        push(`/records/unregistered/${organization}?${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`)\n                    }\n                })\n        }\n    }\n    \n    return {handleRequest, openModal, setOpenModal}\n}"]},"metadata":{},"sourceType":"module"}