{"ast":null,"code":"import React,{useCallback}from'react';import moment from'moment';import{Tooltip}from'antd';import{URL_KEYS}from'../../../Constants';import{useLocation}from'react-router-dom';import{useUrlParams}from'../../../Hooks/app';import{MeetTimeItem,MeetTimeUIBox}from'./style';import{Title}from'../../../UIComponents/Typography/Title';export var MeetTimeInfo=function MeetTimeInfo(_ref){var _requestData$dateItem,_requestData$dateItem2,_requestData$dateItem3,_requestData$dateItem4;var requestData=_ref.requestData,dateItem=_ref.dateItem,meetDate=_ref.meetDate,activeDay=_ref.activeDay;var _useLocation=useLocation(),pathname=_useLocation.pathname;var time=moment(dateItem.dateTime).format('HH:mm');var _useUrlParams=useUrlParams(),urlData=_useUrlParams.urlData;var specId=urlData[URL_KEYS.SPECIALIST_ID];var generateMeetTimeLink=useCallback(function(time){var url=[];if(specId){url.push(\"\".concat(URL_KEYS.SPECIALIST_ID,\"=\").concat(specId));}url.push(\"\".concat(URL_KEYS.DATE,\"=\").concat(activeDay));url.push(\"\".concat(URL_KEYS.TIME,\"=\").concat(time));return{pathname:pathname,search:url.join('&')};},[activeDay,pathname,specId]);var currentTime=new Date().getTime();return/*#__PURE__*/React.createElement(React.Fragment,null,requestData[dateItem.dateTime]?/*#__PURE__*/React.createElement(React.Fragment,null,dateItem.dateTime>currentTime&&/*#__PURE__*/React.createElement(Tooltip,{title:\"\".concat((_requestData$dateItem=requestData[dateItem.dateTime])===null||_requestData$dateItem===void 0?void 0:(_requestData$dateItem2=_requestData$dateItem.user)===null||_requestData$dateItem2===void 0?void 0:_requestData$dateItem2.full_name,\" \").concat(dateItem.strDate)},/*#__PURE__*/React.createElement(MeetTimeUIBox,{imgUrl:(_requestData$dateItem3=requestData[dateItem.dateTime])===null||_requestData$dateItem3===void 0?void 0:(_requestData$dateItem4=_requestData$dateItem3.user)===null||_requestData$dateItem4===void 0?void 0:_requestData$dateItem4.avatar}))):/*#__PURE__*/React.createElement(React.Fragment,null,dateItem.dateTime>currentTime&&/*#__PURE__*/React.createElement(MeetTimeItem,{to:generateMeetTimeLink(time),isActive:function isActive(){return meetDate&&meetDate===dateItem.dateTime;}},/*#__PURE__*/React.createElement(Title,{weight:500},time))));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Checkout/InfoCard/MeetTimeInfo.jsx"],"names":["React","useCallback","moment","Tooltip","URL_KEYS","useLocation","useUrlParams","MeetTimeItem","MeetTimeUIBox","Title","MeetTimeInfo","requestData","dateItem","meetDate","activeDay","pathname","time","dateTime","format","urlData","specId","SPECIALIST_ID","generateMeetTimeLink","url","push","DATE","TIME","search","join","currentTime","Date","getTime","user","full_name","strDate","avatar"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAeC,WAAf,KAAiC,OAAjC,CACA,MAAOC,CAAAA,MAAP,KAAmB,QAAnB,CACA,OAAQC,OAAR,KAAsB,MAAtB,CACA,OAAQC,QAAR,KAAuB,oBAAvB,CACA,OAAQC,WAAR,KAA0B,kBAA1B,CACA,OAAQC,YAAR,KAA2B,oBAA3B,CACA,OAAQC,YAAR,CAAsBC,aAAtB,KAA0C,SAA1C,CACA,OAAQC,KAAR,KAAoB,wCAApB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,MAAkD,mGAAhDC,CAAAA,WAAgD,MAAhDA,WAAgD,CAAnCC,QAAmC,MAAnCA,QAAmC,CAAzBC,QAAyB,MAAzBA,QAAyB,CAAfC,SAAe,MAAfA,SAAe,CAC1E,iBAAmBT,WAAW,EAA9B,CAAOU,QAAP,cAAOA,QAAP,CACA,GAAMC,CAAAA,IAAI,CAAGd,MAAM,CAACU,QAAQ,CAACK,QAAV,CAAN,CAA0BC,MAA1B,CAAiC,OAAjC,CAAb,CACA,kBAAkBZ,YAAY,EAA9B,CAAOa,OAAP,eAAOA,OAAP,CACA,GAAMC,CAAAA,MAAM,CAAGD,OAAO,CAACf,QAAQ,CAACiB,aAAV,CAAtB,CAEA,GAAMC,CAAAA,oBAAoB,CAAGrB,WAAW,CAAC,SAACe,IAAD,CAAU,CAC/C,GAAMO,CAAAA,GAAG,CAAG,EAAZ,CACA,GAAIH,MAAJ,CAAY,CACRG,GAAG,CAACC,IAAJ,WAAYpB,QAAQ,CAACiB,aAArB,aAAsCD,MAAtC,GACH,CACDG,GAAG,CAACC,IAAJ,WAAYpB,QAAQ,CAACqB,IAArB,aAA6BX,SAA7B,GACAS,GAAG,CAACC,IAAJ,WAAYpB,QAAQ,CAACsB,IAArB,aAA6BV,IAA7B,GACA,MAAO,CACHD,QAAQ,CAARA,QADG,CAEHY,MAAM,CAAEJ,GAAG,CAACK,IAAJ,CAAS,GAAT,CAFL,CAAP,CAIH,CAXuC,CAWrC,CAACd,SAAD,CAAYC,QAAZ,CAAsBK,MAAtB,CAXqC,CAAxC,CAaA,GAAMS,CAAAA,WAAW,CAAG,GAAIC,CAAAA,IAAJ,GAAWC,OAAX,EAApB,CAEA,mBACI,wCAEQpB,WAAW,CAACC,QAAQ,CAACK,QAAV,CAAX,cAEQ,wCAEQL,QAAQ,CAACK,QAAT,CAAoBY,WAApB,eAEI,oBAAC,OAAD,EACI,KAAK,kCAAKlB,WAAW,CAACC,QAAQ,CAACK,QAAV,CAAhB,wEAAK,sBAAgCe,IAArC,iDAAK,uBAAsCC,SAA3C,aAAwDrB,QAAQ,CAACsB,OAAjE,CADT,eAEI,oBAAC,aAAD,EAAe,MAAM,yBAAEvB,WAAW,CAACC,QAAQ,CAACK,QAAV,CAAb,yEAAE,uBAAgCe,IAAlC,iDAAE,uBAAsCG,MAA7D,EAFJ,CAJZ,CAFR,cAeQ,wCAEQvB,QAAQ,CAACK,QAAT,CAAoBY,WAApB,eAEI,oBAAC,YAAD,EACI,EAAE,CAAEP,oBAAoB,CAACN,IAAD,CAD5B,CAEI,QAAQ,CAAE,0BAAMH,CAAAA,QAAQ,EAAIA,QAAQ,GAAKD,QAAQ,CAACK,QAAxC,EAFd,eAII,oBAAC,KAAD,EAAO,MAAM,CAAE,GAAf,EACKD,IADL,CAJJ,CAJZ,CAjBhB,CADJ,CAsCH,CA3DM","sourcesContent":["import React, {useCallback} from 'react'\nimport moment from 'moment'\nimport {Tooltip} from 'antd'\nimport {URL_KEYS} from '../../../Constants'\nimport {useLocation} from 'react-router-dom'\nimport {useUrlParams} from '../../../Hooks/app'\nimport {MeetTimeItem, MeetTimeUIBox} from './style'\nimport {Title} from '../../../UIComponents/Typography/Title'\n\nexport const MeetTimeInfo = ({requestData, dateItem, meetDate, activeDay}) => {\n    const {pathname} = useLocation()\n    const time = moment(dateItem.dateTime).format('HH:mm')\n    const {urlData} = useUrlParams()\n    const specId = urlData[URL_KEYS.SPECIALIST_ID]\n    \n    const generateMeetTimeLink = useCallback((time) => {\n        const url = []\n        if (specId) {\n            url.push(`${URL_KEYS.SPECIALIST_ID}=${specId}`)\n        }\n        url.push(`${URL_KEYS.DATE}=${activeDay}`)\n        url.push(`${URL_KEYS.TIME}=${time}`)\n        return {\n            pathname,\n            search: url.join('&')\n        }\n    }, [activeDay, pathname, specId])\n    \n    const currentTime = new Date().getTime()\n    \n    return (\n        <>\n            {\n                requestData[dateItem.dateTime]\n                    ? (\n                        <>\n                            {\n                                dateItem.dateTime > currentTime\n                                && (\n                                    <Tooltip\n                                        title={`${requestData[dateItem.dateTime]?.user?.full_name} ${dateItem.strDate}`}>\n                                        <MeetTimeUIBox imgUrl={requestData[dateItem.dateTime]?.user?.avatar}/>\n                                    </Tooltip>\n                                )\n                            }\n                        </>\n                    )\n                    : (\n                        <>\n                            {\n                                dateItem.dateTime > currentTime\n                                && (\n                                    <MeetTimeItem\n                                        to={generateMeetTimeLink(time)}\n                                        isActive={() => meetDate && meetDate === dateItem.dateTime}\n                                    >\n                                        <Title weight={500}>\n                                            {time}\n                                        </Title>\n                                    </MeetTimeItem>\n                                )\n                                \n                            }\n                        </>\n                    )\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}