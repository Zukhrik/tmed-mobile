{"ast":null,"code":"import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useCallback,useEffect,useState}from'react';import{LazyLoadImage}from'react-lazy-load-image-component';import'react-lazy-load-image-component/src/effects/blur.css';import{CircularProgress}from'@material-ui/core';import{httpGet}from'../../Service';import{ImageLazyLoadWrapper}from'./style';export var ImageLazyLoad=function ImageLazyLoad(_ref){var alt=_ref.alt,src=_ref.src,dataSrc=_ref.dataSrc,height=_ref.height,showProgress=_ref.showProgress,uploadProgress=_ref.uploadProgress,hideEffect=_ref.hideEffect;var _useState=useState(true),_useState2=_slicedToArray(_useState,2),loading=_useState2[0],setIsLoading=_useState2[1];// const [compHeight, setCompHeight] = useState(0)\nvar _useState3=useState(undefined),_useState4=_slicedToArray(_useState3,2),downloadingProgress=_useState4[0],setDownloadingProgress=_useState4[1];// useEffect(() => {\n//     if (src) {\n//         const img = new Image()\n//         img.onload = function () {\n//             // console.log(this.width + 'x' + this.height)\n//             // setCompHeight(this.height)\n//         }\n//         img.src = src\n//     }\n// }, [src])\nvar downloadImage=useCallback(function(){if(src&&!dataSrc){httpGet({url:src.substring(19),headers:{hideSuffix:true},onDownloadProgress:function onDownloadProgress(progressEvent){var percentCompleted=Math.round(progressEvent.loaded*100/progressEvent.total);setDownloadingProgress(percentCompleted);}}).finally(function(){setDownloadingProgress(null);});}},[src,dataSrc]);useEffect(function(){if(showProgress){downloadImage();}},[downloadImage,showProgress]);return/*#__PURE__*/React.createElement(ImageLazyLoadWrapper,null,showProgress&&/*#__PURE__*/React.createElement(React.Fragment,null,!uploadProgress?downloadingProgress!==null&&/*#__PURE__*/React.createElement(\"div\",{className:\"loading-progress\"},/*#__PURE__*/React.createElement(CircularProgress,{color:\"primary\",variant:\"determinate\",value:downloadingProgress})):/*#__PURE__*/React.createElement(\"div\",{className:\"loading-progress\"},/*#__PURE__*/React.createElement(CircularProgress,{color:\"primary\",variant:\"determinate\",value:uploadProgress}))),/*#__PURE__*/React.createElement(LazyLoadImage,{alt:alt,src:src,effect:!hideEffect&&'blur',height:loading?height:undefined,afterLoad:function afterLoad(){return setIsLoading(false);}}));};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/UIComponents/ImageLazyLoad/index.jsx"],"names":["React","useCallback","useEffect","useState","LazyLoadImage","CircularProgress","httpGet","ImageLazyLoadWrapper","ImageLazyLoad","alt","src","dataSrc","height","showProgress","uploadProgress","hideEffect","loading","setIsLoading","undefined","downloadingProgress","setDownloadingProgress","downloadImage","url","substring","headers","hideSuffix","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","finally"],"mappings":"qKAAA,MAAOA,CAAAA,KAAP,EAAeC,WAAf,CAA4BC,SAA5B,CAAuCC,QAAvC,KAAsD,OAAtD,CACA,OAAQC,aAAR,KAA4B,iCAA5B,CACA,MAAO,sDAAP,CACA,OAAQC,gBAAR,KAA+B,mBAA/B,CACA,OAAQC,OAAR,KAAsB,eAAtB,CACA,OAAQC,oBAAR,KAAmC,SAAnC,CAEA,MAAO,IAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,MAA2E,IAAzEC,CAAAA,GAAyE,MAAzEA,GAAyE,CAApEC,GAAoE,MAApEA,GAAoE,CAA/DC,OAA+D,MAA/DA,OAA+D,CAAtDC,MAAsD,MAAtDA,MAAsD,CAA9CC,YAA8C,MAA9CA,YAA8C,CAAhCC,cAAgC,MAAhCA,cAAgC,CAAhBC,UAAgB,MAAhBA,UAAgB,CACpG,cAAgCZ,QAAQ,CAAC,IAAD,CAAxC,wCAAOa,OAAP,eAAgBC,YAAhB,eACA;AACA,eAAsDd,QAAQ,CAACe,SAAD,CAA9D,yCAAOC,mBAAP,eAA4BC,sBAA5B,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA,GAAMC,CAAAA,aAAa,CAAGpB,WAAW,CAAC,UAAM,CACpC,GAAIS,GAAG,EAAI,CAACC,OAAZ,CAAqB,CACjBL,OAAO,CAAC,CACJgB,GAAG,CAAEZ,GAAG,CAACa,SAAJ,CAAc,EAAd,CADD,CACoBC,OAAO,CAAE,CAACC,UAAU,CAAE,IAAb,CAD7B,CACiDC,kBAAkB,CAAE,4BAACC,aAAD,CAAmB,CACxF,GAAIC,CAAAA,gBAAgB,CAAGC,IAAI,CAACC,KAAL,CAAYH,aAAa,CAACI,MAAd,CAAuB,GAAxB,CAA+BJ,aAAa,CAACK,KAAxD,CAAvB,CACAZ,sBAAsB,CAACQ,gBAAD,CAAtB,CACH,CAJG,CAAD,CAAP,CAKGK,OALH,CAKW,UAAM,CACbb,sBAAsB,CAAC,IAAD,CAAtB,CACH,CAPD,EAQH,CACJ,CAXgC,CAW9B,CAACV,GAAD,CAAMC,OAAN,CAX8B,CAAjC,CAaAT,SAAS,CAAC,UAAM,CACZ,GAAIW,YAAJ,CAAkB,CACdQ,aAAa,GAChB,CACJ,CAJQ,CAIN,CAACA,aAAD,CAAgBR,YAAhB,CAJM,CAAT,CAMA,mBACI,oBAAC,oBAAD,MAEQA,YAAY,eACR,wCAEQ,CAACC,cAAD,CACMK,mBAAmB,GAAK,IAAxB,eACF,2BAAK,SAAS,CAAC,kBAAf,eACI,oBAAC,gBAAD,EACI,KAAK,CAAC,SADV,CAEI,OAAO,CAAC,aAFZ,CAGI,KAAK,CAAEA,mBAHX,EADJ,CAFJ,cAWQ,2BAAK,SAAS,CAAC,kBAAf,eACI,oBAAC,gBAAD,EACI,KAAK,CAAC,SADV,CAEI,OAAO,CAAC,aAFZ,CAGI,KAAK,CAAEL,cAHX,EADJ,CAbhB,CAHZ,cA6BI,oBAAC,aAAD,EACI,GAAG,CAAEL,GADT,CAEI,GAAG,CAAEC,GAFT,CAGI,MAAM,CAAE,CAACK,UAAD,EAAe,MAH3B,CAII,MAAM,CAAEC,OAAO,CAAGJ,MAAH,CAAYM,SAJ/B,CAKI,SAAS,CAAE,2BAAMD,CAAAA,YAAY,CAAC,KAAD,CAAlB,EALf,EA7BJ,CADJ,CAwCH,CA5EM","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\nimport {LazyLoadImage} from 'react-lazy-load-image-component'\nimport 'react-lazy-load-image-component/src/effects/blur.css'\nimport {CircularProgress} from '@material-ui/core'\nimport {httpGet} from '../../Service'\nimport {ImageLazyLoadWrapper} from './style'\n\nexport const ImageLazyLoad = ({alt, src, dataSrc, height, showProgress, uploadProgress, hideEffect}) => {\n    const [loading, setIsLoading] = useState(true)\n    // const [compHeight, setCompHeight] = useState(0)\n    const [downloadingProgress, setDownloadingProgress] = useState(undefined)\n\n    // useEffect(() => {\n    //     if (src) {\n    //         const img = new Image()\n    //         img.onload = function () {\n    //             // console.log(this.width + 'x' + this.height)\n    //             // setCompHeight(this.height)\n    //         }\n    //         img.src = src\n    //     }\n    // }, [src])\n\n\n    const downloadImage = useCallback(() => {\n        if (src && !dataSrc) {\n            httpGet({\n                url: src.substring(19), headers: {hideSuffix: true}, onDownloadProgress: (progressEvent) => {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                    setDownloadingProgress(percentCompleted)\n                }\n            }).finally(() => {\n                setDownloadingProgress(null)\n            })\n        }\n    }, [src, dataSrc])\n\n    useEffect(() => {\n        if (showProgress) {\n            downloadImage()\n        }\n    }, [downloadImage, showProgress])\n\n    return (\n        <ImageLazyLoadWrapper>\n            {\n                showProgress && (\n                    <>\n                        {\n                            !uploadProgress\n                                ? downloadingProgress !== null && (\n                                <div className='loading-progress'>\n                                    <CircularProgress\n                                        color='primary'\n                                        variant='determinate'\n                                        value={downloadingProgress}\n                                    />\n                                </div>\n                            )\n                                : (\n                                    <div className='loading-progress'>\n                                        <CircularProgress\n                                            color='primary'\n                                            variant='determinate'\n                                            value={uploadProgress}\n                                        />\n                                    </div>\n                                )\n                        }\n                    </>\n                )\n            }\n\n            <LazyLoadImage\n                alt={alt}\n                src={src}\n                effect={!hideEffect && 'blur'}\n                height={loading ? height : undefined}\n                afterLoad={() => setIsLoading(false)}\n            />\n        </ImageLazyLoadWrapper>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}