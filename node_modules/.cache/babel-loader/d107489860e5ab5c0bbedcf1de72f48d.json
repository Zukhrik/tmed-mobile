{"ast":null,"code":"import { useInView } from 'react-intersection-observer';\nimport { useEffect } from 'react';\nimport { useStore } from 'effector-react';\nimport { $chatModel } from '../../Models/chat-model';\nimport { $accountModel } from '../../Models/account-model';\nexport function useChatIsRead({\n  item\n}) {\n  const {\n    $chatSocketActions: {\n      chatActionSendMessage\n    }\n  } = useStore($chatModel);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    ref,\n    inView,\n    entry\n  } = useInView({\n    threshold: 0.25,\n    delay: 300\n  });\n  useEffect(() => {\n    if (inView && item && currentProfile) {\n      const {\n        target\n      } = entry;\n      const id = Number(target.getAttribute('data-id'));\n      const {\n        id: message_id,\n        sender,\n        is_read\n      } = item;\n\n      if (id === message_id && !is_read && sender.username !== currentProfile.slug_name) {\n        const data = {\n          action: 'read',\n          message_id\n        };\n\n        if (chatActionSendMessage) {\n          chatActionSendMessage(JSON.stringify(data));\n        }\n      }\n    }\n  }, [entry, inView, item, chatActionSendMessage, currentProfile]);\n  return {\n    ref\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/chat/use-chat-is-read.js"],"names":["useInView","useEffect","useStore","$chatModel","$accountModel","useChatIsRead","item","$chatSocketActions","chatActionSendMessage","$profiles","currentProfile","ref","inView","entry","threshold","delay","target","id","Number","getAttribute","message_id","sender","is_read","username","slug_name","data","action","JSON","stringify"],"mappings":"AAAA,SAAQA,SAAR,QAAwB,6BAAxB;AACA,SAAQC,SAAR,QAAwB,OAAxB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,UAAR,QAAyB,yBAAzB;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AAEA,OAAO,SAASC,aAAT,CAAuB;AAACC,EAAAA;AAAD,CAAvB,EAA+B;AAClC,QAAM;AAACC,IAAAA,kBAAkB,EAAE;AAACC,MAAAA;AAAD;AAArB,MAAgDN,QAAQ,CAACC,UAAD,CAA9D;AACA,QAAM;AAACM,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgCR,QAAQ,CAACE,aAAD,CAA9C;AACA,QAAM;AAACO,IAAAA,GAAD;AAAMC,IAAAA,MAAN;AAAcC,IAAAA;AAAd,MAAuBb,SAAS,CAAC;AACnCc,IAAAA,SAAS,EAAE,IADwB;AAEnCC,IAAAA,KAAK,EAAE;AAF4B,GAAD,CAAtC;AAMAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIW,MAAM,IAAIN,IAAV,IAAkBI,cAAtB,EAAsC;AAClC,YAAM;AAACM,QAAAA;AAAD,UAAWH,KAAjB;AACA,YAAMI,EAAE,GAAGC,MAAM,CAACF,MAAM,CAACG,YAAP,CAAoB,SAApB,CAAD,CAAjB;AACA,YAAM;AAACF,QAAAA,EAAE,EAAEG,UAAL;AAAiBC,QAAAA,MAAjB;AAAyBC,QAAAA;AAAzB,UAAoChB,IAA1C;;AACA,UAAIW,EAAE,KAAKG,UAAP,IAAqB,CAACE,OAAtB,IAAiCD,MAAM,CAACE,QAAP,KAAoBb,cAAc,CAACc,SAAxE,EAAmF;AAC/E,cAAMC,IAAI,GAAG;AAACC,UAAAA,MAAM,EAAE,MAAT;AAAiBN,UAAAA;AAAjB,SAAb;;AACA,YAAIZ,qBAAJ,EAA2B;AACvBA,UAAAA,qBAAqB,CAACmB,IAAI,CAACC,SAAL,CAAeH,IAAf,CAAD,CAArB;AACH;AACJ;AACJ;AACJ,GAZQ,EAYN,CAACZ,KAAD,EAAQD,MAAR,EAAgBN,IAAhB,EAAsBE,qBAAtB,EAA6CE,cAA7C,CAZM,CAAT;AAcA,SAAO;AAACC,IAAAA;AAAD,GAAP;AACH","sourcesContent":["import {useInView} from 'react-intersection-observer'\r\nimport {useEffect} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {$chatModel} from '../../Models/chat-model'\r\nimport {$accountModel} from '../../Models/account-model'\r\n\r\nexport function useChatIsRead({item}) {\r\n    const {$chatSocketActions: {chatActionSendMessage}} = useStore($chatModel)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {ref, inView, entry} = useInView({\r\n        threshold: 0.25,\r\n        delay: 300\r\n    })\r\n\r\n\r\n    useEffect(() => {\r\n        if (inView && item && currentProfile) {\r\n            const {target} = entry\r\n            const id = Number(target.getAttribute('data-id'))\r\n            const {id: message_id, sender, is_read} = item\r\n            if (id === message_id && !is_read && sender.username !== currentProfile.slug_name) {\r\n                const data = {action: 'read', message_id}\r\n                if (chatActionSendMessage) {\r\n                    chatActionSendMessage(JSON.stringify(data))\r\n                }\r\n            }\r\n        }\r\n    }, [entry, inView, item, chatActionSendMessage, currentProfile])\r\n\r\n    return {ref}\r\n}"]},"metadata":{},"sourceType":"module"}