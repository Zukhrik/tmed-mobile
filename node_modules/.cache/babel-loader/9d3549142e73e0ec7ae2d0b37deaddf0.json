{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Post/PostActions/index.jsx\";\nimport React, { useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { SlideDown } from 'react-slidedown';\nimport { useTranslation } from 'react-i18next';\nimport { postControlData } from '../../../data';\nimport { OverlaySettings } from '../../Overlay';\nimport { POST_ACTIONS } from '../../../Constants';\nimport { usePostActions } from '../../../Hooks/post';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { Text } from '../../../UIComponents/Typography/Text';\nimport { $accountModel } from '../../../Models/account-model';\nimport { OverlayAuth } from '../../../UIComponents/OverlayAuth';\nimport { CardControlWrapper, IconItemWrapper, PostIndicatorItem } from '../style';\nexport const PostActions = ({\n  data\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const [auth, setAuth] = useState(false);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    getStyle,\n    handleClick,\n    generatePostIndicators,\n    openOverlay,\n    setOpenOverlay\n  } = usePostActions(data);\n\n  const handleClose = () => {\n    if (auth) {\n      setAuth(false);\n    }\n\n    setOpenOverlay(false);\n  };\n\n  return /*#__PURE__*/React.createElement(CardControlWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, !currentProfile && /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: openOverlay,\n    onClose: handleClose,\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      auth: auth,\n      setAuth: setAuth,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SlideDown, {\n    style: {\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, (data.likes_count > 0 || data.comments_count > 0 || data.repost_count > 0) && /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    className: \"post-indicator-wrapper\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }, postControlData.map(item => {\n    const Icon = item.icon();\n    return /*#__PURE__*/React.createElement(PostIndicatorItem, {\n      key: item.icon,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 45\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 45\n      }\n    }, generatePostIndicators(item)));\n  }))), /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 21\n    }\n  }, postControlData.map(item => {\n    const Icon = item.icon(data.is_liked);\n    return /*#__PURE__*/React.createElement(Col, {\n      key: item.icon,\n      style: getStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(IconItemWrapper, {\n      onClick: () => handleClick(item.count),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(IconBox, {\n      color: item.count === POST_ACTIONS.LIKES_COUNT && !!data.is_liked ? 'var(--danger-dwed)' : 'var(--grey-dwed)',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 45\n      }\n    }, /*#__PURE__*/React.createElement(Icon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 49\n      }\n    }), /*#__PURE__*/React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 49\n      }\n    }, t(item.title)))));\n  })))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Post/PostActions/index.jsx"],"names":["React","useState","Col","Row","useStore","SlideDown","useTranslation","postControlData","OverlaySettings","POST_ACTIONS","usePostActions","IconBox","Text","$accountModel","OverlayAuth","CardControlWrapper","IconItemWrapper","PostIndicatorItem","PostActions","data","t","auth","setAuth","$profiles","currentProfile","getStyle","handleClick","generatePostIndicators","openOverlay","setOpenOverlay","handleClose","width","likes_count","comments_count","repost_count","map","item","Icon","icon","is_liked","count","LIKES_COUNT","title"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport {Col, Row} from 'antd'\r\nimport {useStore} from 'effector-react'\r\nimport {SlideDown} from 'react-slidedown'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {postControlData} from '../../../data'\r\nimport {OverlaySettings} from '../../Overlay'\r\nimport {POST_ACTIONS} from '../../../Constants'\r\nimport {usePostActions} from '../../../Hooks/post'\r\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\r\nimport {Text} from '../../../UIComponents/Typography/Text'\r\nimport {$accountModel} from '../../../Models/account-model'\r\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\r\nimport {CardControlWrapper, IconItemWrapper, PostIndicatorItem} from '../style'\r\n\r\n\r\nexport const PostActions = ({data}) => {\r\n    const {t} = useTranslation()\r\n    const [auth, setAuth] = useState(false)\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const {getStyle, handleClick, generatePostIndicators, openOverlay, setOpenOverlay} = usePostActions(data)\r\n    \r\n    const handleClose = () => {\r\n        if (auth) {\r\n            setAuth(false)\r\n        }\r\n        setOpenOverlay(false)\r\n    }\r\n    \r\n    return (\r\n        <CardControlWrapper>\r\n            {\r\n                !currentProfile && (\r\n                    <OverlaySettings\r\n                        openSettings={openOverlay}\r\n                        onClose={handleClose}\r\n                        content={<OverlayAuth\r\n                            auth={auth}\r\n                            setAuth={setAuth}\r\n                            onClose={handleClose}\r\n                        />}\r\n                    />\r\n                )\r\n            }\r\n            <Row>\r\n                <SlideDown style={{width: '100%'}}>\r\n                    {\r\n                        (data.likes_count > 0 || data.comments_count > 0 || data.repost_count > 0) &&\r\n                        <Col span={24} className='post-indicator-wrapper'>\r\n                            {\r\n                                postControlData.map(item => {\r\n                                    const Icon = item.icon()\r\n                                    return (\r\n                                        <PostIndicatorItem key={item.icon}>\r\n                                            <Icon/>\r\n                                            <Text>\r\n                                                {generatePostIndicators(item)}\r\n                                            </Text>\r\n                                        </PostIndicatorItem>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </Col>\r\n                    }\r\n                </SlideDown>\r\n                <Col span={24}>\r\n                    <Row justify='space-around'>\r\n                        {\r\n                            postControlData.map((item) => {\r\n                                const Icon = item.icon(data.is_liked)\r\n                                return (\r\n                                    <Col\r\n                                        key={item.icon}\r\n                                        style={getStyle}\r\n                                    >\r\n                                        <IconItemWrapper onClick={() => handleClick(item.count)}>\r\n                                            <IconBox\r\n                                                color={\r\n                                                    item.count === POST_ACTIONS.LIKES_COUNT && !!data.is_liked\r\n                                                        ? 'var(--danger-dwed)'\r\n                                                        : 'var(--grey-dwed)'\r\n                                                }\r\n                                            >\r\n                                                <Icon/>\r\n                                                <Text>\r\n                                                    {t(item.title)}\r\n                                                </Text>\r\n                                            </IconBox>\r\n                                        </IconItemWrapper>\r\n                                    </Col>\r\n                                )\r\n                            })\r\n                        }\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </CardControlWrapper>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}