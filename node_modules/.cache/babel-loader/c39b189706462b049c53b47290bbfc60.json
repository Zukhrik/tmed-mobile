{"ast":null,"code":"import { useCallback } from 'react';\nimport { useStore } from 'effector-react';\nimport { useSubscription } from '../user';\nimport { $appModel } from '../../Models/app';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { $orgModel } from '../../Models/org-model';\nimport { useOrganization } from './use-organization';\nimport { $accountModel } from '../../Models/account-model';\nexport function useOrgSubscription() {\n  useOrganization();\n  const {\n    t\n  } = useTranslation();\n  const {\n    organization\n  } = useParams();\n  const {\n    $app: {\n      token\n    }\n  } = useStore($appModel);\n  const {\n    $organizationInfo: {\n      data\n    }\n  } = useStore($orgModel);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const {\n    subscribeToAccount,\n    unsubscribeFromAccount\n  } = useSubscription({\n    from: 'org_info'\n  });\n  const getSubscription = useCallback(() => {\n    let tmp = {\n      text: null,\n      toggle: () => false\n    };\n\n    if (!token) {\n      return false;\n    }\n\n    if (data && organization && data[organization] && currentProfile) {\n      const org_name = data[organization];\n\n      if (data[organization].subs && data[organization].subs.subscribed) {\n        tmp = {\n          text: t('unsubscribe'),\n          toggle: () => unsubscribeFromAccount({\n            slug_name: organization,\n            name: org_name\n          })\n        };\n      } else {\n        tmp = {\n          text: t('subscribe'),\n          toggle: () => subscribeToAccount({\n            slug_name: organization,\n            name: org_name\n          })\n        };\n      }\n    }\n\n    return tmp;\n  }, [data, currentProfile, t, token, organization, subscribeToAccount, unsubscribeFromAccount]);\n  return {\n    getSubscription,\n    data,\n    currentProfile,\n    organization\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/org/use-org-subscription.js"],"names":["useCallback","useStore","useSubscription","$appModel","useParams","useTranslation","$orgModel","useOrganization","$accountModel","useOrgSubscription","t","organization","$app","token","$organizationInfo","data","$profiles","currentProfile","subscribeToAccount","unsubscribeFromAccount","from","getSubscription","tmp","text","toggle","org_name","subs","subscribed","slug_name","name"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,OAA1B;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,eAAR,QAA8B,SAA9B;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,SAAR,QAAwB,wBAAxB;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,aAAR,QAA4B,4BAA5B;AAEA,OAAO,SAASC,kBAAT,GAA8B;AACjCF,EAAAA,eAAe;AACf,QAAM;AAACG,IAAAA;AAAD,MAAML,cAAc,EAA1B;AACA,QAAM;AAACM,IAAAA;AAAD,MAAiBP,SAAS,EAAhC;AACA,QAAM;AAACQ,IAAAA,IAAI,EAAE;AAACC,MAAAA;AAAD;AAAP,MAAkBZ,QAAQ,CAACE,SAAD,CAAhC;AACA,QAAM;AAACW,IAAAA,iBAAiB,EAAE;AAACC,MAAAA;AAAD;AAApB,MAA8Bd,QAAQ,CAACK,SAAD,CAA5C;AACA,QAAM;AAACU,IAAAA,SAAS,EAAE;AAACC,MAAAA;AAAD;AAAZ,MAAgChB,QAAQ,CAACO,aAAD,CAA9C;AACA,QAAM;AAACU,IAAAA,kBAAD;AAAqBC,IAAAA;AAArB,MAA+CjB,eAAe,CAAC;AAACkB,IAAAA,IAAI,EAAE;AAAP,GAAD,CAApE;AAGA,QAAMC,eAAe,GAAGrB,WAAW,CAAC,MAAM;AACtC,QAAIsB,GAAG,GAAG;AACNC,MAAAA,IAAI,EAAE,IADA;AAENC,MAAAA,MAAM,EAAE,MAAM;AAFR,KAAV;;AAIA,QAAI,CAACX,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AAED,QAAIE,IAAI,IAAIJ,YAAR,IAAwBI,IAAI,CAACJ,YAAD,CAA5B,IAA8CM,cAAlD,EAAkE;AAC9D,YAAMQ,QAAQ,GAAGV,IAAI,CAACJ,YAAD,CAArB;;AACA,UAAII,IAAI,CAACJ,YAAD,CAAJ,CAAmBe,IAAnB,IAA2BX,IAAI,CAACJ,YAAD,CAAJ,CAAmBe,IAAnB,CAAwBC,UAAvD,EAAmE;AAC/DL,QAAAA,GAAG,GAAG;AACFC,UAAAA,IAAI,EAAEb,CAAC,CAAC,aAAD,CADL;AAEFc,UAAAA,MAAM,EAAE,MAAML,sBAAsB,CAAC;AAACS,YAAAA,SAAS,EAAEjB,YAAZ;AAA0BkB,YAAAA,IAAI,EAAEJ;AAAhC,WAAD;AAFlC,SAAN;AAIH,OALD,MAKO;AACHH,QAAAA,GAAG,GAAG;AACFC,UAAAA,IAAI,EAAEb,CAAC,CAAC,WAAD,CADL;AAEFc,UAAAA,MAAM,EAAE,MAAMN,kBAAkB,CAAC;AAACU,YAAAA,SAAS,EAAEjB,YAAZ;AAA0BkB,YAAAA,IAAI,EAAEJ;AAAhC,WAAD;AAF9B,SAAN;AAIH;AACJ;;AAED,WAAOH,GAAP;AACH,GAzBkC,EAyBhC,CAACP,IAAD,EAAOE,cAAP,EAAuBP,CAAvB,EAA0BG,KAA1B,EAAiCF,YAAjC,EAA+CO,kBAA/C,EAAmEC,sBAAnE,CAzBgC,CAAnC;AA2BA,SAAO;AAACE,IAAAA,eAAD;AAAkBN,IAAAA,IAAlB;AAAwBE,IAAAA,cAAxB;AAAwCN,IAAAA;AAAxC,GAAP;AACH","sourcesContent":["import {useCallback} from 'react'\nimport {useStore} from 'effector-react'\nimport {useSubscription} from '../user'\nimport {$appModel} from '../../Models/app'\nimport {useParams} from 'react-router-dom'\nimport {useTranslation} from 'react-i18next'\nimport {$orgModel} from '../../Models/org-model'\nimport {useOrganization} from './use-organization'\nimport {$accountModel} from '../../Models/account-model'\n\nexport function useOrgSubscription() {\n    useOrganization()\n    const {t} = useTranslation()\n    const {organization} = useParams()\n    const {$app: {token}} = useStore($appModel)\n    const {$organizationInfo: {data}} = useStore($orgModel)\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const {subscribeToAccount, unsubscribeFromAccount} = useSubscription({from: 'org_info'})\n    \n    \n    const getSubscription = useCallback(() => {\n        let tmp = {\n            text: null,\n            toggle: () => false\n        }\n        if (!token) {\n            return false\n        }\n        \n        if (data && organization && data[organization] && currentProfile) {\n            const org_name = data[organization]\n            if (data[organization].subs && data[organization].subs.subscribed) {\n                tmp = {\n                    text: t('unsubscribe'),\n                    toggle: () => unsubscribeFromAccount({slug_name: organization, name: org_name})\n                }\n            } else {\n                tmp = {\n                    text: t('subscribe'),\n                    toggle: () => subscribeToAccount({slug_name: organization, name: org_name})\n                }\n            }\n        }\n        \n        return tmp\n    }, [data, currentProfile, t, token, organization, subscribeToAccount, unsubscribeFromAccount])\n    \n    return {getSubscription, data, currentProfile, organization}\n}"]},"metadata":{},"sourceType":"module"}