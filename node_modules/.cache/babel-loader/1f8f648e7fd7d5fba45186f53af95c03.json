{"ast":null,"code":"import { useStore } from 'effector-react';\nimport { v4 as uuidV4 } from 'uuid';\nimport { fileToBase64 } from '../../utils/crop-utils';\nimport { $accountModel } from '../../Models/account-model';\nimport moment from 'moment';\nimport { $tapeModel, creatingPostMediaMount, creatingPostMount, deleteUnCreatedPostMediaMount, postMediaPercentCompletedMount, resetPostMedia } from '../../Models/tape-model';\nimport post from '../../Service/post';\nimport { useOutsideClicker } from '../app/use-outside-clicker';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nexport function useCreatingPost(setCreatePost) {\n  const postRef = useRef(null);\n  const {\n    clicked\n  } = useOutsideClicker(postRef);\n  const [file, setFile] = useState([]);\n  const [title, setTitle] = useState('');\n  const [images, setImages] = useState([]);\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const [showPostForm, setShowPostForm] = useState(false);\n  const {\n    $postMedia: {\n      data: medias\n    }\n  } = useStore($tapeModel);\n  const author = currentProfile && `@${currentProfile.slug_name}`;\n  const resetLocalStates = useCallback(() => {\n    setTitle('');\n    setFile([]);\n    setImages([]);\n    setShowPostForm(false);\n  }, []);\n  const createPostMedia = useCallback(data => {\n    post.createPostMediaId(data);\n  }, []);\n  const createPost = useCallback(() => {\n    const uuid = uuidV4();\n    const mediaStrings = [];\n    const mediaIds = [];\n    let allow = true;\n\n    if (medias.length > 0) {\n      for (let i = 0; i < medias.length; i++) {\n        mediaIds.push({\n          gallery_id: medias[i].id\n        });\n        mediaStrings.push({\n          id: medias[i].id,\n          image: medias[i].stringUrl,\n          thumbnail: medias[i].stringUrl\n        });\n\n        if (typeof medias[i].id !== 'number') {\n          allow = false;\n          break;\n        }\n      }\n    }\n\n    if (allow) {\n      const action = id => {\n        resetLocalStates();\n\n        if (mediaIds.length > 0) {\n          const params = {\n            post_id: id,\n            data: mediaIds\n          };\n          createPostMedia(params);\n          resetPostMedia();\n        }\n      };\n\n      const block_data = {\n        action: null,\n        id: uuid,\n        author: {\n          type: 'user',\n          name: currentProfile.name,\n          avatar: currentProfile.avatar,\n          slug_name: currentProfile.slug_name,\n          is_official: currentProfile.isOfficial\n        },\n        medias: mediaStrings.length > 0 ? mediaStrings : [],\n        thumbnail: mediaStrings.length > 0 ? mediaStrings : [],\n        date: moment().format('YYYY-MM-DD'),\n        text: title\n      };\n      const temp_data = {\n        item_data: {\n          block_type: 'post',\n          block_data: block_data\n        },\n        uuid,\n        author,\n        action\n      };\n      creatingPostMount({\n        data: {\n          text: title\n        },\n        temp_data\n      });\n    }\n  }, [title, resetLocalStates, createPostMedia, medias, author, currentProfile]);\n  const onUploadProgress = useCallback((evt, id) => {\n    let percentCompleted = Math.round(evt.loaded * 100 / evt.total);\n    postMediaPercentCompletedMount({\n      id,\n      percentCompleted\n    });\n  }, []);\n  const handleAddFiles = useCallback(async files => {\n    const filesArr = Array.from(files);\n\n    for (let i = 0; i < filesArr.length; i++) {\n      const base64Url = await fileToBase64(filesArr[i]);\n\n      if (typeof base64Url === 'string') {\n        const uuid = uuidV4();\n        const formData = new FormData();\n        formData.append('image', filesArr[i]);\n        creatingPostMediaMount({\n          data: formData,\n          post_id: 0,\n          onUploadProgress: e => onUploadProgress(e, uuid),\n          obj: {\n            // id: uuid,\n            stringUrl: base64Url,\n            percentCompleted: 0\n          }\n        });\n      }\n    }\n  }, [onUploadProgress]);\n  const handleDeleted = useCallback(item => {\n    if (item) {\n      const params = {\n        post_id: 0,\n        media_id: item.id\n      };\n      deleteUnCreatedPostMediaMount(params);\n    }\n  }, []);\n  const handleSubmit = useCallback(() => {\n    if (medias.length > 0 || title.trim().length > 0) {\n      createPost();\n      setCreatePost(false);\n    }\n  }, [title, createPost, medias, setCreatePost]);\n  useEffect(() => {\n    if (clicked) {\n      setShowPostForm(false);\n    }\n  }, [clicked]);\n  return {\n    file,\n    title,\n    images,\n    setFile,\n    postRef,\n    setTitle,\n    handleSubmit,\n    showPostForm,\n    handleDeleted,\n    handleAddFiles,\n    setShowPostForm\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/post/use-creating-post.js"],"names":["useStore","v4","uuidV4","fileToBase64","$accountModel","moment","$tapeModel","creatingPostMediaMount","creatingPostMount","deleteUnCreatedPostMediaMount","postMediaPercentCompletedMount","resetPostMedia","post","useOutsideClicker","useCallback","useEffect","useRef","useState","useCreatingPost","setCreatePost","postRef","clicked","file","setFile","title","setTitle","images","setImages","$profiles","currentProfile","showPostForm","setShowPostForm","$postMedia","data","medias","author","slug_name","resetLocalStates","createPostMedia","createPostMediaId","createPost","uuid","mediaStrings","mediaIds","allow","length","i","push","gallery_id","id","image","stringUrl","thumbnail","action","params","post_id","block_data","type","name","avatar","is_official","isOfficial","date","format","text","temp_data","item_data","block_type","onUploadProgress","evt","percentCompleted","Math","round","loaded","total","handleAddFiles","files","filesArr","Array","from","base64Url","formData","FormData","append","e","obj","handleDeleted","item","media_id","handleSubmit","trim"],"mappings":"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","sourcesContent":["import {useStore} from 'effector-react'\r\nimport {v4 as uuidV4} from 'uuid'\r\nimport {fileToBase64} from '../../utils/crop-utils'\r\nimport {$accountModel} from '../../Models/account-model'\r\nimport moment from 'moment'\r\nimport {\r\n    $tapeModel,\r\n    creatingPostMediaMount,\r\n    creatingPostMount,\r\n    deleteUnCreatedPostMediaMount,\r\n    postMediaPercentCompletedMount,\r\n    resetPostMedia\r\n} from '../../Models/tape-model'\r\nimport post from '../../Service/post'\r\nimport {useOutsideClicker} from '../app/use-outside-clicker'\r\nimport {useCallback, useEffect, useRef, useState} from 'react'\r\n\r\n\r\nexport function useCreatingPost(setCreatePost) {\r\n    const postRef = useRef(null)\r\n    const {clicked} = useOutsideClicker(postRef)\r\n    const [file, setFile] = useState([])\r\n    const [title, setTitle] = useState('')\r\n    const [images, setImages] = useState([])\r\n    const {$profiles: {currentProfile}} = useStore($accountModel)\r\n    const [showPostForm, setShowPostForm] = useState(false)\r\n    const {$postMedia: {data: medias}} = useStore($tapeModel)\r\n    \r\n    const author = currentProfile && `@${currentProfile.slug_name}`\r\n    \r\n    const resetLocalStates = useCallback(() => {\r\n        setTitle('')\r\n        setFile([])\r\n        setImages([])\r\n        setShowPostForm(false)\r\n    }, [])\r\n    \r\n    const createPostMedia = useCallback((data) => {\r\n        post.createPostMediaId(data)\r\n    }, [])\r\n    \r\n    const createPost = useCallback(() => {\r\n        const uuid = uuidV4()\r\n        const mediaStrings = []\r\n        const mediaIds = []\r\n        let allow = true\r\n        \r\n        if (medias.length > 0) {\r\n            for (let i = 0; i < medias.length; i++) {\r\n                mediaIds.push({gallery_id: medias[i].id})\r\n                mediaStrings.push({\r\n                    id: medias[i].id,\r\n                    image: medias[i].stringUrl,\r\n                    thumbnail: medias[i].stringUrl\r\n                })\r\n                \r\n                if (typeof medias[i].id !== 'number') {\r\n                    allow = false\r\n                    break\r\n                }\r\n            }\r\n        }\r\n        \r\n        if (allow) {\r\n            const action = (id) => {\r\n                resetLocalStates()\r\n                if (mediaIds.length > 0) {\r\n                    const params = {\r\n                        post_id: id,\r\n                        data: mediaIds\r\n                    }\r\n                    createPostMedia(params)\r\n                    resetPostMedia()\r\n                }\r\n            }\r\n            \r\n            const block_data = {\r\n                action: null,\r\n                id: uuid,\r\n                author: {\r\n                    type: 'user',\r\n                    name: currentProfile.name,\r\n                    avatar: currentProfile.avatar,\r\n                    slug_name: currentProfile.slug_name,\r\n                    is_official: currentProfile.isOfficial\r\n                },\r\n                medias: mediaStrings.length > 0 ? mediaStrings : [],\r\n                thumbnail: mediaStrings.length > 0 ? mediaStrings : [],\r\n                date: moment().format('YYYY-MM-DD'),\r\n                text: title\r\n            }\r\n            const temp_data = {\r\n                item_data: {\r\n                    block_type: 'post',\r\n                    block_data: block_data\r\n                },\r\n                uuid,\r\n                author,\r\n                action\r\n            }\r\n            creatingPostMount({data: {text: title}, temp_data})\r\n        }\r\n    }, [title, resetLocalStates, createPostMedia, medias, author, currentProfile])\r\n    \r\n    const onUploadProgress = useCallback((evt, id) => {\r\n        let percentCompleted = Math.round((evt.loaded * 100) / evt.total)\r\n        postMediaPercentCompletedMount({id, percentCompleted})\r\n    }, [])\r\n    \r\n    const handleAddFiles = useCallback(async (files) => {\r\n        const filesArr = Array.from(files)\r\n        for (let i = 0; i < filesArr.length; i++) {\r\n            const base64Url = await fileToBase64(filesArr[i])\r\n            if (typeof base64Url === 'string') {\r\n                const uuid = uuidV4()\r\n                \r\n                const formData = new FormData()\r\n                formData.append('image', filesArr[i])\r\n                creatingPostMediaMount({\r\n                    data: formData,\r\n                    post_id: 0,\r\n                    onUploadProgress: (e) => onUploadProgress(e, uuid),\r\n                    obj: {\r\n                        // id: uuid,\r\n                        stringUrl: base64Url,\r\n                        percentCompleted: 0\r\n                    }\r\n                })\r\n            }\r\n        }\r\n    }, [onUploadProgress])\r\n    \r\n    const handleDeleted = useCallback((item) => {\r\n        if (item) {\r\n            const params = {\r\n                post_id: 0,\r\n                media_id: item.id\r\n            }\r\n            deleteUnCreatedPostMediaMount(params)\r\n        }\r\n    }, [])\r\n    \r\n    const handleSubmit = useCallback(() => {\r\n        if (medias.length > 0 || title.trim().length > 0) {\r\n            createPost()\r\n            setCreatePost(false)\r\n        }\r\n    }, [title, createPost, medias, setCreatePost])\r\n    \r\n    useEffect(() => {\r\n        if (clicked) {\r\n            setShowPostForm(false)\r\n        }\r\n    }, [clicked])\r\n    \r\n    \r\n    return {\r\n        file,\r\n        title,\r\n        images,\r\n        setFile,\r\n        postRef,\r\n        setTitle,\r\n        handleSubmit,\r\n        showPostForm,\r\n        handleDeleted,\r\n        handleAddFiles,\r\n        setShowPostForm\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}