{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/StreamPage/organisms/chat-component.jsx\";\nimport React, { useState } from 'react';\nimport { Col, Row } from 'antd';\nimport { ChatCard } from './chat-card';\nimport { useStore } from 'effector-react';\nimport { SendSvg } from '../../../Icons/Send';\nimport stream from '../../../Service/stream';\nimport { useParams } from 'react-router-dom';\nimport { useTranslation } from 'react-i18next';\nimport { ArrowIosBottomSvg } from '../../../Icons/Arrow';\nimport { $streamModel } from '../../../Models/stream-model';\nimport { Text } from '../../../UIComponents/Typography/Text';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { $accountModel } from '../../../Models/account-model';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { StreamChatComponent, StreamChatForm } from '../atoms';\nexport const ChatComponent = ({\n  setOpenChat,\n  setModalIsOpen,\n  owner,\n  loadMore\n}) => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    slug_name\n  } = useParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const [message, setMessage] = useState('');\n  const {\n    $streamChannelChat: {\n      data,\n      loading,\n      result\n    }\n  } = useStore($streamModel);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (currentProfile) {\n      if (message.length > 1) {\n        const params = {\n          slug_name: slug_name,\n          data: {\n            text: message\n          }\n        };\n        stream.postStreamChannelChat(params).then(res => {\n          if (res) {\n            setMessage('');\n          }\n        });\n      }\n    }\n  };\n\n  const handleClickInput = () => {\n    if (!currentProfile) {\n      setModalIsOpen(true);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(StreamChatComponent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [0, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    className: \"chat-header padding\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    justify: \"space-between\",\n    align: \"middle\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Text, {\n    level: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 29\n    }\n  }, t('live_chat'))), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(IconBox, {\n    onClick: () => setOpenChat(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(ArrowIosBottomSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 33\n    }\n  }))))), data && /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    dataLength: (result === null || result === void 0 ? void 0 : result.nextOffset) || 10,\n    hasMore: !loading && !!(result === null || result === void 0 ? void 0 : result.next),\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [0, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 33\n    }\n  }, data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    key: `${idx + 1}`,\n    className: \"padding\",\n    style: {\n      display: 'flex',\n      flexDirection: 'column-reverse'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 45\n    }\n  }, /*#__PURE__*/React.createElement(ChatCard, {\n    item: item,\n    owner: owner,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 49\n    }\n  }))))))), /*#__PURE__*/React.createElement(StreamChatForm, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    onClick: handleClickInput,\n    placeholder: t('message'),\n    value: message,\n    onChange: e => setMessage(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconBox, {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SendSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/StreamPage/organisms/chat-component.jsx"],"names":["React","useState","Col","Row","ChatCard","useStore","SendSvg","stream","useParams","useTranslation","ArrowIosBottomSvg","$streamModel","Text","IconBox","$accountModel","InfiniteScroll","StreamChatComponent","StreamChatForm","ChatComponent","setOpenChat","setModalIsOpen","owner","loadMore","t","slug_name","$profiles","currentProfile","message","setMessage","$streamChannelChat","data","loading","result","handleSubmit","e","preventDefault","length","params","text","postStreamChannelChat","then","res","handleClickInput","nextOffset","next","map","item","idx","display","flexDirection","target","value"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {Col, Row} from 'antd'\nimport {ChatCard} from './chat-card'\nimport {useStore} from 'effector-react'\nimport {SendSvg} from '../../../Icons/Send'\nimport stream from '../../../Service/stream'\nimport {useParams} from 'react-router-dom'\nimport {useTranslation} from 'react-i18next'\nimport {ArrowIosBottomSvg} from '../../../Icons/Arrow'\nimport {$streamModel} from '../../../Models/stream-model'\nimport {Text} from '../../../UIComponents/Typography/Text'\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\nimport {$accountModel} from '../../../Models/account-model'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {StreamChatComponent, StreamChatForm} from '../atoms'\n\n\nexport const ChatComponent = ({setOpenChat, setModalIsOpen, owner, loadMore}) => {\n    const {t} = useTranslation()\n    const {slug_name} = useParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const [message, setMessage] = useState('')\n    const {$streamChannelChat: {data, loading, result}} = useStore($streamModel)\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (currentProfile) {\n            if (message.length > 1) {\n                const params = {\n                    slug_name: slug_name,\n                    data: {\n                        text: message\n                    }\n                }\n                stream.postStreamChannelChat(params)\n                    .then(res => {\n                        if (res) {\n                            setMessage('')\n                        }\n                    })\n            }\n        }\n    }\n    \n    const handleClickInput = () => {\n        if (!currentProfile) {\n            setModalIsOpen(true)\n        }\n    }\n    \n    return (\n        <StreamChatComponent>\n            <Row gutter={[0, 12]}>\n                <Col span={24} className='chat-header padding'>\n                    <Row justify='space-between' align='middle'>\n                        <Col>\n                            <Text level={4}>\n                                {t('live_chat')}\n                            </Text>\n                        </Col>\n                        <Col>\n                            <IconBox onClick={() => setOpenChat(false)}>\n                                <ArrowIosBottomSvg/>\n                            </IconBox>\n                        </Col>\n                    </Row>\n                </Col>\n                {\n                    data && (\n                        <Col span={24}>\n                            <InfiniteScroll\n                                next={loadMore}\n                                dataLength={result?.nextOffset || 10}\n                                hasMore={!loading && !!result?.next}\n                                loader={<>...loading</>}\n                            >\n                                <Row gutter={[0, 12]}>\n                                    {\n                                        data.map((item, idx) => (\n                                            <Col\n                                                span={24}\n                                                key={`${idx + 1}`}\n                                                className='padding'\n                                                style={{display: 'flex', flexDirection: 'column-reverse'}}\n                                            >\n                                                <ChatCard item={item} owner={owner}/>\n                                            </Col>\n                                        ))\n                                    }\n                                </Row>\n                            </InfiniteScroll>\n                        </Col>\n                    )\n                }\n            </Row>\n            <StreamChatForm onSubmit={handleSubmit}>\n                <input\n                    onClick={handleClickInput}\n                    placeholder={t('message')}\n                    value={message}\n                    onChange={(e) => setMessage(e.target.value)}\n                />\n                <IconBox onClick={handleSubmit}>\n                    <SendSvg/>\n                </IconBox>\n            </StreamChatForm>\n        </StreamChatComponent>\n    )\n}"]},"metadata":{},"sourceType":"module"}