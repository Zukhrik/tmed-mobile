{"ast":null,"code":"import moment from 'moment';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useUrlParams } from '../app';\nimport { URL_KEYS } from '../../Constants';\nimport { useStore } from 'effector-react';\nimport { formatter, strHourToInt } from './use-specialist-date';\nimport { getDateTime, getWeekDay } from '../../utils/time-utils';\nimport { $orderModel } from '../../Models/order-model';\nimport order from '../../Service/order';\nimport { useParams } from 'react-router-dom';\nexport function useSpecMeetDate({\n  activeDay\n}) {\n  var _data$organization$, _data$organization$$r;\n\n  const {\n    organization\n  } = useParams();\n  const [activeDate] = useState(new Date());\n  const {\n    $orgOrderCartList: {\n      data\n    }\n  } = useStore($orderModel);\n  const [dateRange, setDateRange] = useState([]);\n  const [meetTimes, setMeetTimes] = useState({});\n  const [hours, setHours] = useState([]);\n  const [requestData, setRequestData] = useState({});\n  const operating_modes = organization && data[organization] && ((_data$organization$ = data[organization][0]) === null || _data$organization$ === void 0 ? void 0 : (_data$organization$$r = _data$organization$.responsible) === null || _data$organization$$r === void 0 ? void 0 : _data$organization$$r.operating_mode);\n  const {\n    urlData\n  } = useUrlParams();\n  const specId = urlData[URL_KEYS.SPECIALIST_ID];\n  const generateData = useCallback(data => {\n    const tmp = {};\n\n    for (let i = 0; i < data.length; i++) {\n      const id = new Date(moment(data[i].meet_date).format(formatter)).getTime();\n      const meetTime = moment(data[i].meet_date).format('HH.mm');\n      tmp[id] = {\n        user: data[i].user,\n        meetTime: parseFloat(parseFloat(meetTime).toFixed(1))\n      };\n    }\n\n    return tmp;\n  }, []);\n  const getOrgOrder = useCallback(params => {\n    order.getOrgOrderResponsible(params).then(res => {\n      const data = res.data.results;\n      let orders = generateData(data);\n      setRequestData(orders);\n    });\n  }, [generateData]);\n  const renderMeetRow = useCallback(id => {\n    const strHour = moment(id).format('HH:mm');\n    const hourInt = strHourToInt(strHour);\n    return meetTimes[hourInt] && Object.values(meetTimes[hourInt]).sort((a, b) => a - b);\n  }, [meetTimes]);\n  useEffect(() => {\n    const endDate = moment(activeDate).endOf('month');\n    let start = activeDate.getUTCDate();\n    const end = new Date(endDate).getUTCDate();\n    const tmp = [];\n\n    for (let i = 0; i <= end - start; i++) {\n      const d = moment(activeDate).add(i, 'days');\n      tmp.push(d.format('YYYY-MM-DD'));\n    }\n\n    setDateRange(tmp);\n  }, [activeDate]);\n  useEffect(() => {\n    const day = getWeekDay(new Date());\n\n    if (operating_modes && operating_modes[day]) {\n      const mode = operating_modes[day];\n      const breaks = mode.breaks;\n      const to = mode.to;\n      const interval = mode.proc_interval;\n      const tmp = [];\n      const possibleMeetTime = {};\n      let from = parseInt(mode.from);\n      let a = mode.from;\n      const date = new Date(activeDay);\n\n      if (interval !== 0) {\n        while (a < to) {\n          for (let i = 0; i < breaks.length; i++) {\n            if (parseInt(a) === parseInt(breaks[i].from) && (breaks[i].from >= a || a < breaks[i].to)) {\n              a = breaks[i].to;\n            }\n          }\n\n          possibleMeetTime[parseInt(a)] = possibleMeetTime[parseInt(a)] ? { ...possibleMeetTime[parseInt(a)]\n          } : {};\n          const strHour = moment(new Date(new Date(getDateTime(a)).setMinutes(new Date(getDateTime(a === from ? mode.from : a)).getMinutes() + interval)));\n          const id = moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter);\n          possibleMeetTime[parseInt(a)][id] = {\n            intDate: a,\n            strDate: `${moment(getDateTime(a)).format('HH:mm')} - ${strHour.format('HH:mm')}`,\n            dateTime: new Date(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).getTime()\n          };\n          a = parseFloat(strHour.format('HH.mm'));\n        }\n\n        setMeetTimes(possibleMeetTime);\n\n        for (let i = from; i < to; i++) {\n          const id = new Date(new Date(`${date.toDateString()} 0${i}:59`)).getTime();\n\n          if (i < 10) {\n            tmp.push({\n              hour: `0${i}:00`,\n              interval,\n              id\n            });\n          } else {\n            tmp.push({\n              hour: `${i}:00`,\n              interval,\n              id\n            });\n          }\n        }\n\n        setHours(tmp);\n      }\n    }\n  }, [operating_modes, activeDay]);\n  useEffect(() => {\n    if (specId && activeDay) {\n      const data = {\n        responsible_id: specId,\n        params: {\n          status: '0,1,2',\n          limit: 200,\n          offset: 0,\n          meet_date__gt: moment(new Date(`${new Date(activeDay).toDateString()} 00:00`)).format(formatter),\n          meet_date__lt: moment(new Date(`${new Date(activeDay).toDateString()} 23:59`)).format(formatter)\n        }\n      };\n      getOrgOrder(data);\n    }\n  }, [specId, getOrgOrder, activeDay]);\n  return {\n    dateRange,\n    activeDate,\n    hours,\n    renderMeetRow,\n    requestData\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/checkout/use-spec-meet-date.js"],"names":["moment","useCallback","useEffect","useState","useUrlParams","URL_KEYS","useStore","formatter","strHourToInt","getDateTime","getWeekDay","$orderModel","order","useParams","useSpecMeetDate","activeDay","organization","activeDate","Date","$orgOrderCartList","data","dateRange","setDateRange","meetTimes","setMeetTimes","hours","setHours","requestData","setRequestData","operating_modes","responsible","operating_mode","urlData","specId","SPECIALIST_ID","generateData","tmp","i","length","id","meet_date","format","getTime","meetTime","user","parseFloat","toFixed","getOrgOrder","params","getOrgOrderResponsible","then","res","results","orders","renderMeetRow","strHour","hourInt","Object","values","sort","a","b","endDate","endOf","start","getUTCDate","end","d","add","push","day","mode","breaks","to","interval","proc_interval","possibleMeetTime","from","parseInt","date","setMinutes","getMinutes","toDateString","intDate","strDate","dateTime","hour","responsible_id","status","limit","offset","meet_date__gt","meet_date__lt"],"mappings":"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","sourcesContent":["import moment from 'moment'\nimport {useCallback, useEffect, useState} from 'react'\nimport {useUrlParams} from '../app'\nimport {URL_KEYS} from '../../Constants'\nimport {useStore} from 'effector-react'\nimport {formatter, strHourToInt} from './use-specialist-date'\nimport {getDateTime, getWeekDay} from '../../utils/time-utils'\nimport {$orderModel} from '../../Models/order-model'\nimport order from '../../Service/order'\nimport {useParams} from 'react-router-dom'\n\nexport function useSpecMeetDate({activeDay}) {\n    const {organization} = useParams()\n    const [activeDate] = useState(new Date())\n    const {$orgOrderCartList: {data}} = useStore($orderModel)\n    const [dateRange, setDateRange] = useState([])\n    const [meetTimes, setMeetTimes] = useState({})\n    const [hours, setHours] = useState([])\n    const [requestData, setRequestData] = useState({})\n    const operating_modes = organization && data[organization] && data[organization][0]?.responsible?.operating_mode\n    const {urlData} = useUrlParams()\n    const specId = urlData[URL_KEYS.SPECIALIST_ID]\n    \n    const generateData = useCallback((data) => {\n        const tmp = {}\n        for (let i = 0; i < data.length; i++) {\n            const id = new Date(moment(data[i].meet_date).format(formatter)).getTime()\n            const meetTime = moment(data[i].meet_date).format('HH.mm')\n            tmp[id] = {\n                user: data[i].user,\n                meetTime: parseFloat(parseFloat(meetTime).toFixed(1))\n            }\n        }\n        return tmp\n    }, [])\n    \n    const getOrgOrder = useCallback((params) => {\n        order.getOrgOrderResponsible(params)\n            .then(res => {\n                const data = res.data.results\n                let orders = generateData(data)\n                setRequestData(orders)\n            })\n    }, [generateData])\n    \n    const renderMeetRow = useCallback((id) => {\n        const strHour = moment(id).format('HH:mm')\n        const hourInt = strHourToInt(strHour)\n        return meetTimes[hourInt] && Object.values(meetTimes[hourInt]).sort((a, b) => a - b)\n    }, [meetTimes])\n    \n    useEffect(() => {\n        const endDate = moment(activeDate).endOf('month')\n        let start = activeDate.getUTCDate()\n        const end = new Date(endDate).getUTCDate()\n        const tmp = []\n        for (let i = 0; i <= end - start; i++) {\n            const d = moment(activeDate).add(i, 'days')\n            tmp.push(d.format('YYYY-MM-DD'))\n        }\n        \n        setDateRange(tmp)\n    }, [activeDate])\n    \n    \n    useEffect(() => {\n        const day = getWeekDay(new Date())\n        if (operating_modes && operating_modes[day]) {\n            const mode = operating_modes[day]\n            const breaks = mode.breaks\n            const to = mode.to\n            const interval = mode.proc_interval\n            const tmp = []\n            const possibleMeetTime = {}\n            let from = parseInt(mode.from)\n            let a = mode.from\n            const date = new Date(activeDay)\n            \n            if (interval !== 0) {\n                while (a < to) {\n                    \n                    for (let i = 0; i < breaks.length; i++) {\n                        if (parseInt(a) === parseInt(breaks[i].from) && (breaks[i].from >= a || a < breaks[i].to)) {\n                            a = breaks[i].to\n                        }\n                    }\n                    \n                    possibleMeetTime[parseInt(a)] = possibleMeetTime[parseInt(a)]\n                        ? {...possibleMeetTime[parseInt(a)]}\n                        : {}\n                    \n                    const strHour = moment(new Date(new Date(getDateTime(a))\n                        .setMinutes(new Date(getDateTime(a === from ? mode.from : a)).getMinutes() + interval)))\n                    \n                    const id = moment(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).format(formatter)\n                    \n                    possibleMeetTime[parseInt(a)][id] = {\n                        intDate: a,\n                        strDate: `${moment(getDateTime(a)).format('HH:mm')} - ${strHour.format('HH:mm')}`,\n                        dateTime: new Date(new Date(`${date.toDateString()} ${moment(getDateTime(a)).format('HH:mm')}`)).getTime()\n                    }\n                    a = parseFloat(strHour.format('HH.mm'))\n                }\n                setMeetTimes(possibleMeetTime)\n                for (let i = from; i < to; i++) {\n                    const id = new Date(new Date(`${date.toDateString()} 0${i}:59`)).getTime()\n                    if (i < 10) {\n                        tmp.push({hour: `0${i}:00`, interval, id})\n                    } else {\n                        tmp.push({hour: `${i}:00`, interval, id})\n                    }\n                }\n                setHours(tmp)\n            }\n        }\n    }, [operating_modes, activeDay])\n    \n    \n    useEffect(() => {\n        if (specId && activeDay) {\n            const data = {\n                responsible_id: specId,\n                params: {\n                    status: '0,1,2',\n                    limit: 200,\n                    offset: 0,\n                    meet_date__gt: moment(new Date(`${new Date(activeDay).toDateString()} 00:00`)).format(formatter),\n                    meet_date__lt: moment(new Date(`${new Date(activeDay).toDateString()} 23:59`)).format(formatter)\n                }\n            }\n            getOrgOrder(data)\n        }\n    }, [specId, getOrgOrder, activeDay])\n    \n    return {dateRange, activeDate, hours, renderMeetRow, requestData}\n}"]},"metadata":{},"sourceType":"module"}