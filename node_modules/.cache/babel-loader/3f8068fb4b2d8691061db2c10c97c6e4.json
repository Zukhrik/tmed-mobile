{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { OfferingListWrapper } from '../style';\nimport { $appModel, switchOrgGroupPanel } from '../../../Models/app';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { NoOfferingSvg } from '../../../Icons/NoOffering';\nimport { numberFormat } from '../../../utils/number-utils';\nimport { useOfferingList } from '../../../Hooks/offerings';\nimport { AuthModal } from '../../../UIComponents/AuthModal';\nimport { OverlaySettings } from '../../../Components/Overlay';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { OverlayAuth } from '../../../UIComponents/OverlayAuth';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { $offeringsModel } from '../../../Models/offerings-model';\nimport { useOrgOrder, useOrgOrderList } from '../../../Hooks/order';\nimport Masorny, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { EmptyContainerWrapper } from '../../../UIComponents/GlobalStyles';\nimport { ProductCard, ProductCardSkeleton } from '../../../Components/Cards';\nimport { OverlayOfferingGroup } from '../../../Components/Offering/OrgOfferings';\nimport offer from '../../../Service/offer';\nconst skeleton = generateSkeleton(10, 100, 220);\nexport const OfferingsList = () => {\n  useOrgOrderList();\n  const {\n    organization\n  } = useParams();\n  const {\n    $app: {\n      token,\n      changeOrgGroupPanel\n    },\n    $device\n  } = useStore($appModel);\n  const {\n    loadMoreOfferings,\n    loadMoreOfferingGroup\n  } = useOfferingList();\n  const [auth, setAuth] = useState(false);\n  const {\n    currency,\n    checkoutOffering\n  } = useOrgOrder();\n  const [offeringItem, setOfferingItem] = useState(false); // const {$offeringsList: {data, result, loading, forceLoading}} = useStore($offeringsModel)\n\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    fetch(`https://api.dwed.biz/client/v2/orgs/${organization}/offers/`).then(res => {\n      if (res) {\n        setData(res.data.results);\n      }\n    }).catch(error => {\n      console.log(error);\n    });\n  }, []);\n\n  const handleClose = () => {\n    if (auth) {\n      setAuth(false);\n    }\n\n    setOfferingItem(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: changeOrgGroupPanel,\n    content: /*#__PURE__*/React.createElement(OverlayOfferingGroup, {\n      loadMore: loadMoreOfferingGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 26\n      }\n    }),\n    onClose: () => switchOrgGroupPanel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }), $device && $device === INFO_MAT ? /*#__PURE__*/React.createElement(AuthModal, {\n    modalIsOpen: !!offeringItem,\n    action: () => checkoutOffering(offeringItem),\n    onCancel: () => setOfferingItem(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: offeringItem,\n    onClose: handleClose,\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      action: () => checkoutOffering(offeringItem),\n      auth: auth,\n      setAuth: setAuth,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 23\n    }\n  }), data && data.length > 0 && /*#__PURE__*/React.createElement(Masorny, {\n    gutter: \"8px\",\n    style: {\n      marginBottom: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  }, data.length > 0 && data.map((item, idx) => {\n    const offeringData = {\n      id: item.id,\n      qty: item.qty,\n      name: item.name,\n      image: item.image,\n      currency: currency,\n      loading: item.loading,\n      inCart: item.is_in_cart,\n      organization: organization,\n      cost: numberFormat(item.cost),\n      responsible: item.responsible,\n      path: `/${organization}/offerings/${item.id}`\n    };\n    return /*#__PURE__*/React.createElement(ProductCard, {\n      showBag: true,\n      key: `${idx + 1}`,\n      item: offeringData,\n      handleClick: item => {\n        token ? checkoutOffering(item) : setOfferingItem(item);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 37\n      }\n    });\n  })));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx"],"names":["React","useEffect","useState","useStore","useParams","OfferingListWrapper","$appModel","switchOrgGroupPanel","INFO_MAT","NoOfferingSvg","numberFormat","useOfferingList","AuthModal","OverlaySettings","InfiniteScroll","OverlayAuth","generateSkeleton","$offeringsModel","useOrgOrder","useOrgOrderList","Masorny","ResponsiveMasonry","EmptyContainerWrapper","ProductCard","ProductCardSkeleton","OverlayOfferingGroup","offer","skeleton","OfferingsList","organization","$app","token","changeOrgGroupPanel","$device","loadMoreOfferings","loadMoreOfferingGroup","auth","setAuth","currency","checkoutOffering","offeringItem","setOfferingItem","data","setData","fetch","then","res","results","catch","error","console","log","handleClose","length","marginBottom","map","item","idx","offeringData","id","qty","name","image","loading","inCart","is_in_cart","cost","responsible","path"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {OfferingListWrapper} from '../style'\r\nimport {$appModel, switchOrgGroupPanel} from '../../../Models/app'\r\nimport {INFO_MAT} from '../../../Constants/app'\r\nimport {NoOfferingSvg} from '../../../Icons/NoOffering'\r\nimport {numberFormat} from '../../../utils/number-utils'\r\nimport {useOfferingList} from '../../../Hooks/offerings'\r\nimport {AuthModal} from '../../../UIComponents/AuthModal'\r\nimport {OverlaySettings} from '../../../Components/Overlay'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {$offeringsModel} from '../../../Models/offerings-model'\r\nimport {useOrgOrder, useOrgOrderList} from '../../../Hooks/order'\r\nimport Masorny, {ResponsiveMasonry} from 'react-responsive-masonry'\r\nimport {EmptyContainerWrapper} from '../../../UIComponents/GlobalStyles'\r\nimport {ProductCard, ProductCardSkeleton} from '../../../Components/Cards'\r\nimport {OverlayOfferingGroup} from '../../../Components/Offering/OrgOfferings'\r\nimport offer from '../../../Service/offer'\r\n\r\nconst skeleton = generateSkeleton(10, 100, 220)\r\nexport const OfferingsList = () => {\r\n    useOrgOrderList()\r\n    const {organization} = useParams()\r\n    const {$app: {token, changeOrgGroupPanel}, $device} = useStore($appModel)\r\n    const {loadMoreOfferings, loadMoreOfferingGroup} = useOfferingList()\r\n    const [auth, setAuth] = useState(false)\r\n    const {currency, checkoutOffering} = useOrgOrder()\r\n    const [offeringItem, setOfferingItem] = useState(false)\r\n    // const {$offeringsList: {data, result, loading, forceLoading}} = useStore($offeringsModel)\r\n    \r\n    const [data, setData] = useState([])\r\n    \r\n    useEffect(() => {\r\n        fetch(`https://api.dwed.biz/client/v2/orgs/${organization}/offers/`)\r\n            .then(res => {\r\n                if(res){\r\n                    setData(res.data.results)\r\n                }\r\n            })\r\n            .catch(error => {\r\n                console.log(error)\r\n            })\r\n    },[])\r\n    \r\n    const handleClose = () => {\r\n        if (auth) {\r\n            setAuth(false)\r\n        }\r\n        setOfferingItem(false)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <OverlaySettings\r\n                openSettings={changeOrgGroupPanel}\r\n                content={<OverlayOfferingGroup loadMore={loadMoreOfferingGroup}/>}\r\n                onClose={() => switchOrgGroupPanel(false)}\r\n            />\r\n            {\r\n                $device && $device === INFO_MAT\r\n                    ? <AuthModal\r\n                        modalIsOpen={!!offeringItem}\r\n                        action={() => checkoutOffering(offeringItem)}\r\n                        onCancel={() => setOfferingItem(null)}\r\n                    />\r\n                    : <OverlaySettings\r\n                        openSettings={offeringItem}\r\n                        onClose={handleClose}\r\n                        content={<OverlayAuth\r\n                            action={() => checkoutOffering(offeringItem)}\r\n                            auth={auth}\r\n                            setAuth={setAuth}\r\n                            onClose={handleClose}\r\n                        />}\r\n                    />\r\n            }\r\n    \r\n            {\r\n                data && data.length > 0 && (\r\n                    <Masorny gutter='8px' style={{marginBottom: 60}}>\r\n                        {\r\n                            data.length > 0 && data.map((item, idx) => {\r\n                                const offeringData = {\r\n                                    id: item.id,\r\n                                    qty: item.qty,\r\n                                    name: item.name,\r\n                                    image: item.image,\r\n                                    currency: currency,\r\n                                    loading: item.loading,\r\n                                    inCart: item.is_in_cart,\r\n                                    organization: organization,\r\n                                    cost: numberFormat(item.cost),\r\n                                    responsible: item.responsible,\r\n                                    path: `/${organization}/offerings/${item.id}`\r\n                                }\r\n                                return (\r\n                                    <ProductCard\r\n                                        showBag\r\n                                        key={`${idx + 1}`}\r\n                                        item={offeringData}\r\n                                        handleClick={(item) => {\r\n                                            token ? checkoutOffering(item) : setOfferingItem(item)\r\n                                        }}\r\n                                    />\r\n                                )\r\n                            })\r\n                        }\r\n                    </Masorny>\r\n                )\r\n            }\r\n        {/*    <InfiniteScroll*/}\r\n        {/*        next={loadMoreOfferings}*/}\r\n        {/*        dataLength={result?.nextOffset || 20}*/}\r\n        {/*        hasMore={!loading && !!result?.next}*/}\r\n        {/*        loader={<>...loading</>}*/}\r\n        {/*    >*/}\r\n        {/*        <OfferingListWrapper>*/}\r\n        {/*            <ResponsiveMasonry*/}\r\n        {/*                style={{padding: '0 12px'}}*/}\r\n        {/*                columnsCountBreakPoints={{350: 2, 768: 2, 900: 3}}*/}\r\n        {/*            >*/}\r\n        {/*                {*/}\r\n        {/*                    forceLoading === 2 && data*/}\r\n        {/*                        ? <Masorny gutter='8px' style={{marginBottom: 60}}>*/}\r\n        {/*                            {*/}\r\n        {/*                                data.length > 0 && data.map((item, idx) => {*/}\r\n        {/*                                    const offeringData = {*/}\r\n        {/*                                        id: item.id,*/}\r\n        {/*                                        qty: item.qty,*/}\r\n        {/*                                        name: item.name,*/}\r\n        {/*                                        image: item.image,*/}\r\n        {/*                                        currency: currency,*/}\r\n        {/*                                        loading: item.loading,*/}\r\n        {/*                                        inCart: item.is_in_cart,*/}\r\n        {/*                                        organization: organization,*/}\r\n        {/*                                        cost: numberFormat(item.cost),*/}\r\n        {/*                                        responsible: item.responsible,*/}\r\n        {/*                                        path: `/${organization}/offerings/${item.id}`*/}\r\n        {/*                                    }*/}\r\n        {/*                                    return (*/}\r\n        {/*                                        <ProductCard*/}\r\n        {/*                                            showBag*/}\r\n        {/*                                            key={`${idx + 1}`}*/}\r\n        {/*                                            item={offeringData}*/}\r\n        {/*                                            handleClick={(item) => {*/}\r\n        {/*                                                token ? checkoutOffering(item) : setOfferingItem(item)*/}\r\n        {/*                                            }}*/}\r\n        {/*                                        />*/}\r\n        {/*                                    )*/}\r\n        {/*                                })*/}\r\n        {/*                            }*/}\r\n        {/*                        </Masorny>*/}\r\n        {/*                        : <Masorny gutter='12px'>*/}\r\n        {/*                            {*/}\r\n        {/*                                skeleton.map((item, idx) => (*/}\r\n        {/*                                    <ProductCardSkeleton*/}\r\n        {/*                                        key={`${idx + 1}`}*/}\r\n        {/*                                        imgSkeletonHeight={item}*/}\r\n        {/*                                    />*/}\r\n        {/*                                ))*/}\r\n        {/*                            }*/}\r\n        {/*                        </Masorny>*/}\r\n        {/*                }*/}\r\n        {/*            </ResponsiveMasonry>*/}\r\n        {/*        </OfferingListWrapper>*/}\r\n        {/*    </InfiniteScroll>*/}\r\n        {/*    {*/}\r\n        {/*        result && result.count === 0 && (*/}\r\n        {/*            <EmptyContainerWrapper>*/}\r\n        {/*                <NoOfferingSvg/>*/}\r\n        {/*            </EmptyContainerWrapper>*/}\r\n        {/*        )*/}\r\n        {/*    }*/}\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}