{"ast":null,"code":"import _objectSpread from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useEffect,useState}from'react';import{$userModel,userSubsMeMount,userSubsMyMount}from'../../Models/user-model';import{useStore}from'effector-react';var initialParams={limit:20,offset:0};export function useUserSubs(_ref){var slug_name=_ref.slug_name,type=_ref.type;var _useState=useState(null),_useState2=_slicedToArray(_useState,2),username=_useState2[0],setUsername=_useState2[1];var _useStore=useStore($userModel),resultSubsMy=_useStore.$userSubsMy.result,subsMeResult=_useStore.$userSubsMe.result;var getUserSubMyList=useCallback(function(params){if(username){var data=_objectSpread({username:username},params);userSubsMyMount(data);}},[username]);var getUserSubsMeList=useCallback(function(params){if(username){var data=_objectSpread({username:username},params);userSubsMeMount(data);}},[username]);var loadMore=useCallback(function(type){if(type==='my'){if(resultSubsMy&&resultSubsMy.nextOffset){var data={params:_objectSpread(_objectSpread({},initialParams),{},{offset:resultSubsMy.nextOffset})};getUserSubMyList(data);}}if(type==='me'){if(subsMeResult&&subsMeResult.nextOffset){var _data={params:_objectSpread(_objectSpread({},initialParams),{},{offset:subsMeResult.nextOffset})};getUserSubsMeList(_data);}}},[getUserSubMyList,getUserSubsMeList,subsMeResult,resultSubsMy]);useEffect(function(){var data={clear:true,params:initialParams};if(type==='me'){getUserSubsMeList(data);}else if(type==='my'){getUserSubMyList(data);}},[getUserSubMyList,type,getUserSubsMeList]);useEffect(function(){if(slug_name){setUsername(slug_name);}else{setUsername(null);}},[slug_name]);return{getUserSubMyList:getUserSubMyList,loadMore:loadMore};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/user/use-subs.js"],"names":["useCallback","useEffect","useState","$userModel","userSubsMeMount","userSubsMyMount","useStore","initialParams","limit","offset","useUserSubs","slug_name","type","username","setUsername","resultSubsMy","$userSubsMy","result","subsMeResult","$userSubsMe","getUserSubMyList","params","data","getUserSubsMeList","loadMore","nextOffset","clear"],"mappings":"yUAAA,OAAQA,WAAR,CAAqBC,SAArB,CAAgCC,QAAhC,KAA+C,OAA/C,CACA,OAAQC,UAAR,CAAoBC,eAApB,CAAqCC,eAArC,KAA2D,yBAA3D,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CAEA,GAAMC,CAAAA,aAAa,CAAG,CAClBC,KAAK,CAAE,EADW,CAElBC,MAAM,CAAE,CAFU,CAAtB,CAKA,MAAO,SAASC,CAAAA,WAAT,MAAwC,IAAlBC,CAAAA,SAAkB,MAAlBA,SAAkB,CAAPC,IAAO,MAAPA,IAAO,CAC3C,cAAgCV,QAAQ,CAAC,IAAD,CAAxC,wCAAOW,QAAP,eAAiBC,WAAjB,eACA,cAAmFR,QAAQ,CAACH,UAAD,CAA3F,CAA6BY,YAA7B,WAAOC,WAAP,CAAqBC,MAArB,CAAkEC,YAAlE,WAA4CC,WAA5C,CAA0DF,MAA1D,CAEA,GAAMG,CAAAA,gBAAgB,CAAGpB,WAAW,CAAC,SAACqB,MAAD,CAAY,CAC7C,GAAIR,QAAJ,CAAc,CACV,GAAMS,CAAAA,IAAI,gBACNT,QAAQ,CAARA,QADM,EAEHQ,MAFG,CAAV,CAIAhB,eAAe,CAACiB,IAAD,CAAf,CACH,CAEJ,CATmC,CASjC,CAACT,QAAD,CATiC,CAApC,CAWA,GAAMU,CAAAA,iBAAiB,CAAGvB,WAAW,CAAC,SAACqB,MAAD,CAAY,CAC9C,GAAIR,QAAJ,CAAc,CACV,GAAMS,CAAAA,IAAI,gBACNT,QAAQ,CAARA,QADM,EAEHQ,MAFG,CAAV,CAIAjB,eAAe,CAACkB,IAAD,CAAf,CACH,CACJ,CARoC,CAQlC,CAACT,QAAD,CARkC,CAArC,CAUA,GAAMW,CAAAA,QAAQ,CAAGxB,WAAW,CAAC,SAACY,IAAD,CAAU,CACnC,GAAIA,IAAI,GAAK,IAAb,CAAmB,CACf,GAAIG,YAAY,EAAIA,YAAY,CAACU,UAAjC,CAA6C,CACzC,GAAMH,CAAAA,IAAI,CAAG,CACTD,MAAM,gCACCd,aADD,MAEFE,MAAM,CAAEM,YAAY,CAACU,UAFnB,EADG,CAAb,CAMAL,gBAAgB,CAACE,IAAD,CAAhB,CACH,CACJ,CAED,GAAIV,IAAI,GAAK,IAAb,CAAmB,CACf,GAAIM,YAAY,EAAIA,YAAY,CAACO,UAAjC,CAA6C,CACzC,GAAMH,CAAAA,KAAI,CAAG,CACTD,MAAM,gCACCd,aADD,MAEFE,MAAM,CAAES,YAAY,CAACO,UAFnB,EADG,CAAb,CAMAF,iBAAiB,CAACD,KAAD,CAAjB,CACH,CACJ,CACJ,CAxB2B,CAwBzB,CAACF,gBAAD,CAAmBG,iBAAnB,CAAsCL,YAAtC,CAAoDH,YAApD,CAxByB,CAA5B,CA0BAd,SAAS,CAAC,UAAM,CACZ,GAAMqB,CAAAA,IAAI,CAAG,CACTI,KAAK,CAAE,IADE,CAETL,MAAM,CAAEd,aAFC,CAAb,CAIA,GAAIK,IAAI,GAAK,IAAb,CAAmB,CACfW,iBAAiB,CAACD,IAAD,CAAjB,CACH,CAFD,IAEO,IAAIV,IAAI,GAAK,IAAb,CAAmB,CACtBQ,gBAAgB,CAACE,IAAD,CAAhB,CACH,CACJ,CAVQ,CAUN,CAACF,gBAAD,CAAmBR,IAAnB,CAAyBW,iBAAzB,CAVM,CAAT,CAYAtB,SAAS,CAAC,UAAM,CACZ,GAAIU,SAAJ,CAAe,CACXG,WAAW,CAACH,SAAD,CAAX,CACH,CAFD,IAEO,CACHG,WAAW,CAAC,IAAD,CAAX,CACH,CACJ,CANQ,CAMN,CAACH,SAAD,CANM,CAAT,CAQA,MAAO,CACHS,gBAAgB,CAAhBA,gBADG,CAEHI,QAAQ,CAARA,QAFG,CAAP,CAIH","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\r\nimport {$userModel, userSubsMeMount, userSubsMyMount} from '../../Models/user-model'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useUserSubs({slug_name, type}) {\r\n    const [username, setUsername] = useState(null)\r\n    const {$userSubsMy: {result: resultSubsMy}, $userSubsMe: {result: subsMeResult}} = useStore($userModel)\r\n    \r\n    const getUserSubMyList = useCallback((params) => {\r\n        if (username) {\r\n            const data = {\r\n                username,\r\n                ...params\r\n            }\r\n            userSubsMyMount(data)\r\n        }\r\n        \r\n    }, [username])\r\n    \r\n    const getUserSubsMeList = useCallback((params) => {\r\n        if (username) {\r\n            const data = {\r\n                username,\r\n                ...params\r\n            }\r\n            userSubsMeMount(data)\r\n        }\r\n    }, [username])\r\n    \r\n    const loadMore = useCallback((type) => {\r\n        if (type === 'my') {\r\n            if (resultSubsMy && resultSubsMy.nextOffset) {\r\n                const data = {\r\n                    params: {\r\n                        ...initialParams,\r\n                        offset: resultSubsMy.nextOffset\r\n                    }\r\n                }\r\n                getUserSubMyList(data)\r\n            }\r\n        }\r\n        \r\n        if (type === 'me') {\r\n            if (subsMeResult && subsMeResult.nextOffset) {\r\n                const data = {\r\n                    params: {\r\n                        ...initialParams,\r\n                        offset: subsMeResult.nextOffset\r\n                    }\r\n                }\r\n                getUserSubsMeList(data)\r\n            }\r\n        }\r\n    }, [getUserSubMyList, getUserSubsMeList, subsMeResult, resultSubsMy])\r\n    \r\n    useEffect(() => {\r\n        const data = {\r\n            clear: true,\r\n            params: initialParams\r\n        }\r\n        if (type === 'me') {\r\n            getUserSubsMeList(data)\r\n        } else if (type === 'my') {\r\n            getUserSubMyList(data)\r\n        }\r\n    }, [getUserSubMyList, type, getUserSubsMeList])\r\n    \r\n    useEffect(() => {\r\n        if (slug_name) {\r\n            setUsername(slug_name)\r\n        } else {\r\n            setUsername(null)\r\n        }\r\n    }, [slug_name])\r\n    \r\n    return {\r\n        getUserSubMyList,\r\n        loadMore\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}