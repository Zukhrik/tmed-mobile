{"ast":null,"code":"import { useUrlParams } from '../app';\nimport { URL_KEYS } from '../../Constants';\nimport { useParams } from 'react-router-dom';\nimport { useCallback, useEffect } from 'react';\nimport { orgSpecialistCatMount, orgSpecialistsMount } from '../../Models/org-model';\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport function useOrgSpecialistLists() {\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    organization\n  } = useParams();\n  const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID];\n  const getOrgSpecialists = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgSpecialistsMount(data);\n    }\n  }, [organization]);\n  const getOrgSpecCatList = useCallback(params => {\n    if (organization) {\n      const data = {\n        organization,\n        ...params\n      };\n      orgSpecialistCatMount(data);\n    }\n  }, [organization]);\n  useEffect(() => {\n    const data = {\n      clear: true,\n      params: { ...initialParams\n      }\n    };\n    getOrgSpecCatList(data);\n  }, [getOrgSpecCatList]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      const data = {\n        clear: true,\n        params: { ...initialParams\n        }\n      };\n\n      if (spec_cat_id) {\n        data['params']['spec_cat'] = spec_cat_id;\n      } else {\n        delete data['params']['spec_cat'];\n      }\n\n      getOrgSpecialists(data);\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getOrgSpecialists, spec_cat_id]);\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/org/use-org-specialists.js"],"names":["useUrlParams","URL_KEYS","useParams","useCallback","useEffect","orgSpecialistCatMount","orgSpecialistsMount","initialParams","limit","offset","useOrgSpecialistLists","urlData","organization","spec_cat_id","SPECIALIST_CATEGORY_ID","getOrgSpecialists","params","data","getOrgSpecCatList","clear","timeout","setTimeout","clearTimeout"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,WAAR,EAAqBC,SAArB,QAAqC,OAArC;AACA,SAAQC,qBAAR,EAA+BC,mBAA/B,QAAyD,wBAAzD;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,OAAO,SAASC,qBAAT,GAAiC;AACpC,QAAM;AAACC,IAAAA;AAAD,MAAYX,YAAY,EAA9B;AACA,QAAM;AAACY,IAAAA;AAAD,MAAiBV,SAAS,EAAhC;AACA,QAAMW,WAAW,GAAGF,OAAO,CAACV,QAAQ,CAACa,sBAAV,CAA3B;AAEA,QAAMC,iBAAiB,GAAGZ,WAAW,CAAEa,MAAD,IAAY;AAC9C,QAAIJ,YAAJ,EAAkB;AACd,YAAMK,IAAI,GAAG;AACTL,QAAAA,YADS;AAET,WAAGI;AAFM,OAAb;AAIAV,MAAAA,mBAAmB,CAACW,IAAD,CAAnB;AACH;AACJ,GARoC,EAQlC,CAACL,YAAD,CARkC,CAArC;AAUA,QAAMM,iBAAiB,GAAGf,WAAW,CAAEa,MAAD,IAAY;AAC9C,QAAIJ,YAAJ,EAAkB;AACd,YAAMK,IAAI,GAAG;AACTL,QAAAA,YADS;AAET,WAAGI;AAFM,OAAb;AAIAX,MAAAA,qBAAqB,CAACY,IAAD,CAArB;AACH;AACJ,GARoC,EAQlC,CAACL,YAAD,CARkC,CAArC;AAWAR,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,IAAI,GAAG;AACTE,MAAAA,KAAK,EAAE,IADE;AAETH,MAAAA,MAAM,EAAE,EAAC,GAAGT;AAAJ;AAFC,KAAb;AAIAW,IAAAA,iBAAiB,CAACD,IAAD,CAAjB;AACH,GANQ,EAMN,CAACC,iBAAD,CANM,CAAT;AAQAd,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIgB,OAAO,GAAG,IAAd;AAEAA,IAAAA,OAAO,GAAGC,UAAU,CAAC,MAAM;AACvB,YAAMJ,IAAI,GAAG;AACTE,QAAAA,KAAK,EAAE,IADE;AAETH,QAAAA,MAAM,EAAE,EACJ,GAAGT;AADC;AAFC,OAAb;;AAOA,UAAIM,WAAJ,EAAiB;AACbI,QAAAA,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,IAA6BJ,WAA7B;AACH,OAFD,MAEO;AACH,eAAOI,IAAI,CAAC,QAAD,CAAJ,CAAe,UAAf,CAAP;AACH;;AAEDF,MAAAA,iBAAiB,CAACE,IAAD,CAAjB;AACH,KAfmB,EAejB,GAfiB,CAApB;AAiBA,WAAO,MAAM;AACTK,MAAAA,YAAY,CAACF,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH,KAHD;AAKH,GAzBQ,EAyBN,CAACL,iBAAD,EAAoBF,WAApB,CAzBM,CAAT;AA0BH","sourcesContent":["import {useUrlParams} from '../app'\r\nimport {URL_KEYS} from '../../Constants'\r\nimport {useParams} from 'react-router-dom'\r\nimport {useCallback, useEffect} from 'react'\r\nimport {orgSpecialistCatMount, orgSpecialistsMount} from '../../Models/org-model'\r\n\r\nconst initialParams = {\r\n    limit: 20,\r\n    offset: 0\r\n}\r\n\r\nexport function useOrgSpecialistLists() {\r\n    const {urlData} = useUrlParams()\r\n    const {organization} = useParams()\r\n    const spec_cat_id = urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]\r\n    \r\n    const getOrgSpecialists = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgSpecialistsMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    const getOrgSpecCatList = useCallback((params) => {\r\n        if (organization) {\r\n            const data = {\r\n                organization,\r\n                ...params\r\n            }\r\n            orgSpecialistCatMount(data)\r\n        }\r\n    }, [organization])\r\n    \r\n    \r\n    useEffect(() => {\r\n        const data = {\r\n            clear: true,\r\n            params: {...initialParams}\r\n        }\r\n        getOrgSpecCatList(data)\r\n    }, [getOrgSpecCatList])\r\n    \r\n    useEffect(() => {\r\n        let timeout = null\r\n        \r\n        timeout = setTimeout(() => {\r\n            const data = {\r\n                clear: true,\r\n                params: {\r\n                    ...initialParams\r\n                }\r\n            }\r\n            \r\n            if (spec_cat_id) {\r\n                data['params']['spec_cat'] = spec_cat_id\r\n            } else {\r\n                delete data['params']['spec_cat']\r\n            }\r\n            \r\n            getOrgSpecialists(data)\r\n        }, 300)\r\n        \r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n        \r\n    }, [getOrgSpecialists, spec_cat_id])\r\n}"]},"metadata":{},"sourceType":"module"}