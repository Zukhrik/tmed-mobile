{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OrgSpecialistList/index.jsx\";\nimport React, { useCallback } from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { URL_KEYS } from '../../../../Constants';\nimport { $appModel } from '../../../../Models/app';\nimport { INFO_MAT } from '../../../../Constants/app';\nimport { useUrlGenerate } from '../../../../Hooks/org';\nimport { DataWrapper, SpecialistNavLink } from '../style';\nimport { ShortCard, ShortCardSkeleton } from '../../../Cards';\nimport { truncateString } from '../../../../utils/stringUtils';\nimport { generateSkeleton } from '../../../../utils/skeleton-utils';\nimport { $orgModel, orgSpecialistsMount } from '../../../../Models/org-model';\nconst skeleton = generateSkeleton(10);\nconst initialParams = {\n  limit: 20,\n  offset: 0\n};\nexport const OrgSpecialistList = () => {\n  const {\n    organization\n  } = useParams();\n  const {\n    $device\n  } = useStore($appModel);\n  const {\n    getActive,\n    generateUrl\n  } = useUrlGenerate();\n  const {\n    $orgSpecialistsList: {\n      data,\n      forceLoading,\n      result,\n      loading\n    }\n  } = useStore($orgModel);\n  const handleScroll = useCallback(e => {\n    if (e.target.scrollLeft + e.target.offsetWidth >= e.target.scrollWidth && !loading && !!result.next) {\n      if (result.next) {\n        const data = {\n          organization: organization,\n          params: { ...initialParams,\n            offset: result.nextOffset\n          }\n        };\n        orgSpecialistsMount(data);\n      }\n    }\n  }, [loading, result, organization]);\n  return /*#__PURE__*/React.createElement(DataWrapper, {\n    onScroll: e => handleScroll(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }, forceLoading === 2 && data.length > 0 && data.map((item, idx) => /*#__PURE__*/React.createElement(SpecialistNavLink, {\n    key: `${idx + 1}`,\n    to: generateUrl(URL_KEYS.SPECIALIST_ID, item.id),\n    isActive: () => getActive(URL_KEYS.SPECIALIST_ID, item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(ShortCard, {\n    textLineClamp: 2,\n    direction: \"vertical\",\n    imgUrl: item.user.avatar,\n    name: item.user.full_name,\n    text: truncateString(item.job.name, 22),\n    nameSize: $device && $device === INFO_MAT ? 3 : 5,\n    textSize: $device && $device === INFO_MAT ? 4 : '',\n    imgSize: $device && $device === INFO_MAT ? 80 : 60,\n    active: getActive(URL_KEYS.SPECIALIST_ID, item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 25\n    }\n  }))), $device && $device === INFO_MAT && (forceLoading === 1 || forceLoading === 0) && /*#__PURE__*/React.createElement(Row, {\n    wrap: false,\n    gutter: [24, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }\n  }, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(ShortCardSkeleton, {\n    size: 80,\n    nameSize: 24,\n    textSize: 32,\n    direction: \"vertical\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 37\n    }\n  })))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OrgSpecialistList/index.jsx"],"names":["React","useCallback","Col","Row","useStore","useParams","URL_KEYS","$appModel","INFO_MAT","useUrlGenerate","DataWrapper","SpecialistNavLink","ShortCard","ShortCardSkeleton","truncateString","generateSkeleton","$orgModel","orgSpecialistsMount","skeleton","initialParams","limit","offset","OrgSpecialistList","organization","$device","getActive","generateUrl","$orgSpecialistsList","data","forceLoading","result","loading","handleScroll","e","target","scrollLeft","offsetWidth","scrollWidth","next","params","nextOffset","length","map","item","idx","SPECIALIST_ID","id","user","avatar","full_name","job","name"],"mappings":"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","sourcesContent":["import React, {useCallback} from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {useParams} from 'react-router-dom'\nimport {URL_KEYS} from '../../../../Constants'\nimport {$appModel} from '../../../../Models/app'\nimport {INFO_MAT} from '../../../../Constants/app'\nimport {useUrlGenerate} from '../../../../Hooks/org'\nimport {DataWrapper, SpecialistNavLink} from '../style'\nimport {ShortCard, ShortCardSkeleton} from '../../../Cards'\nimport {truncateString} from '../../../../utils/stringUtils'\nimport {generateSkeleton} from '../../../../utils/skeleton-utils'\nimport {$orgModel, orgSpecialistsMount} from '../../../../Models/org-model'\n\nconst skeleton = generateSkeleton(10)\nconst initialParams = {\n    limit: 20,\n    offset: 0\n}\nexport const OrgSpecialistList = () => {\n    const {organization} = useParams()\n    const {$device} = useStore($appModel)\n    const {getActive, generateUrl} = useUrlGenerate()\n    const {$orgSpecialistsList: {data, forceLoading, result, loading}} = useStore($orgModel)\n    \n    const handleScroll = useCallback((e) => {\n        if (e.target.scrollLeft + e.target.offsetWidth >= e.target.scrollWidth && !loading && !!result.next) {\n            if (result.next) {\n                const data = {\n                    organization: organization,\n                    params: {\n                        ...initialParams,\n                        offset: result.nextOffset\n                    }\n                }\n                \n                orgSpecialistsMount(data)\n            }\n        }\n    }, [loading, result, organization])\n    \n    \n    return (\n        <DataWrapper onScroll={(e) => handleScroll(e)}>\n            {\n                forceLoading === 2 && data.length > 0 && data.map((item, idx) => (\n                    <SpecialistNavLink\n                        key={`${idx + 1}`}\n                        to={generateUrl(URL_KEYS.SPECIALIST_ID, item.id)}\n                        isActive={() => getActive(URL_KEYS.SPECIALIST_ID, item.id)}\n                    >\n                        <ShortCard\n                            textLineClamp={2}\n                            direction='vertical'\n                            imgUrl={item.user.avatar}\n                            name={item.user.full_name}\n                            text={truncateString(item.job.name, 22)}\n                            nameSize={$device && $device === INFO_MAT ? 3 : 5}\n                            textSize={$device && $device === INFO_MAT ? 4 : ''}\n                            imgSize={$device && $device === INFO_MAT ? 80 : 60}\n                            active={getActive(URL_KEYS.SPECIALIST_ID, item.id)}\n                        />\n                    </SpecialistNavLink>\n                ))\n            }\n            {\n                $device && $device === INFO_MAT && (forceLoading === 1 || forceLoading === 0) && (\n                    <Row wrap={false} gutter={[24, 0]}>\n                        {\n                            skeleton.map((item, idx) => (\n                                <Col\n                                    key={`${idx + 1}`}\n                                >\n                                    <ShortCardSkeleton\n                                        size={80}\n                                        nameSize={24}\n                                        textSize={32}\n                                        direction='vertical'\n                                    />\n                                </Col>\n                            ))\n                        }\n                    </Row>\n                )\n            }\n        </DataWrapper>\n    )\n}"]},"metadata":{},"sourceType":"module"}