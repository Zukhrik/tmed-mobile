{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/organisms/organizations-list.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { $orgModel } from '../../../Models/org-model';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { OrganizationCard } from '../../../Components/Cards';\nexport const OrganizationsList = ({\n  loadMore\n}) => {\n  const {\n    $allOrgList: {\n      data,\n      result,\n      loading,\n      forceLoading\n    }\n  } = useStore($orgModel);\n  console.log(data);\n  return /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 9\n    }\n  }, forceLoading === 2 ? /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    hasMore: !loading && !!result.next,\n    dataLength: result.nextOffset || 10,\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 25\n    }\n  }, data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    span: 24,\n    key: `${idx + 1}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(OrganizationCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 41\n    }\n  })))) : /*#__PURE__*/React.createElement(React.Fragment, null), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Home/organisms/organizations-list.jsx"],"names":["React","Col","Row","useStore","$orgModel","InfiniteScroll","OrganizationCard","OrganizationsList","loadMore","$allOrgList","data","result","loading","forceLoading","console","log","next","nextOffset","map","item","idx"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,MAAvB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,2BAAxB;AACA,OAAOC,cAAP,MAA2B,iCAA3B;AACA,SAAQC,gBAAR,QAA+B,2BAA/B;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC7C,QAAM;AAACC,IAAAA,WAAW,EAAE;AAACC,MAAAA,IAAD;AAAOC,MAAAA,MAAP;AAAeC,MAAAA,OAAf;AAAwBC,MAAAA;AAAxB;AAAd,MAAuDV,QAAQ,CAACC,SAAD,CAArE;AACAU,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,sBACI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQG,YAAY,KAAK,CAAjB,gBAEQ,oBAAC,cAAD;AACI,IAAA,IAAI,EAAEL,QADV;AAEI,IAAA,OAAO,EAAE,CAACI,OAAD,IAAY,CAAC,CAACD,MAAM,CAACK,IAFlC;AAGI,IAAA,UAAU,EAAEL,MAAM,CAACM,UAAP,IAAqB,EAHrC;AAII,IAAA,MAAM,eAAE,uDAJZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOQP,IAAI,CAACQ,GAAL,CAAS,CAACC,IAAD,EAAOC,GAAP,kBACL,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAe,IAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,CAPR,CAFR,gBAoBQ,yCAtBhB,eA0BI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA1BJ,CADJ;AAgCH,CApCM","sourcesContent":["import React from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {$orgModel} from '../../../Models/org-model'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {OrganizationCard} from '../../../Components/Cards'\n\nexport const OrganizationsList = ({loadMore}) => {\n    const {$allOrgList: {data, result, loading, forceLoading}} = useStore($orgModel)\n    console.log(data)\n    \n    return (\n        <Row>\n            {\n                forceLoading === 2\n                    ? (\n                        <InfiniteScroll\n                            next={loadMore}\n                            hasMore={!loading && !!result.next}\n                            dataLength={result.nextOffset || 10}\n                            loader={<>...loading</>}\n                        >\n                            {\n                                data.map((item, idx) => (\n                                    <Col span={24} key={`${idx + 1}`}>\n                                        <OrganizationCard\n                                        \n                                        />\n                                    </Col>\n                                ))\n                            }\n                        </InfiniteScroll>\n                    )\n                    : (\n                        <>\n                        </>\n                    )\n            }\n            <Col>\n            \n            </Col>\n        </Row>\n    )\n}"]},"metadata":{},"sourceType":"module"}