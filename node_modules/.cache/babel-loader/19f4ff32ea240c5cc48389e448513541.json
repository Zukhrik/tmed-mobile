{"ast":null,"code":"import Resizer from'react-image-file-resizer';export var fileToBase64=function fileToBase64(file){return new Promise(function(resolve){var fileReader=new FileReader();fileReader.onload=function(e){return resolve(fileReader.result);};fileReader.readAsDataURL(file);});};var memType={'image/bmp':'BMP','image/gif':'GIF','image/x-icon':'ICO','image/jpeg':'JPEG','image/png':'PNG','image/svg+xml':'SVG','image/tiff':'TIFF','image/webp':'WEBP'};export var resizeFile=function resizeFile(file,ext,type){var width=arguments.length>3&&arguments[3]!==undefined?arguments[3]:2000;var height=arguments.length>4&&arguments[4]!==undefined?arguments[4]:2000;return new Promise(function(resolve){Resizer.imageFileResizer(file,width,height,ext?memType[ext]:'JPEG',85,0,function(uri){resolve(uri);},type);});};export var createImage=function createImage(url){return new Promise(function(resolve,reject){var image=new Image();image.addEventListener('load',function(){return resolve(image);});image.addEventListener('error',function(error){return reject(error);});image.src=url;});};export function base64StringtoFile(base64String,filename){var arr=base64String.split(','),mime=arr[0].match(/:(.*?);/)[1],bstr=atob(arr[1]),n=bstr.length,u8arr=new Uint8Array(n);while(n--){u8arr[n]=bstr.charCodeAt(n);}return new File([u8arr],filename,{type:mime});}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/utils/crop-utils.js"],"names":["Resizer","fileToBase64","file","Promise","resolve","fileReader","FileReader","onload","e","result","readAsDataURL","memType","resizeFile","ext","type","width","height","imageFileResizer","uri","createImage","url","reject","image","Image","addEventListener","error","src","base64StringtoFile","base64String","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File"],"mappings":"AAAA,MAAOA,CAAAA,OAAP,KAAoB,0BAApB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,IAAD,CAAU,CAClC,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CAC5B,GAAIC,CAAAA,UAAU,CAAG,GAAIC,CAAAA,UAAJ,EAAjB,CACAD,UAAU,CAACE,MAAX,CAAoB,SAACC,CAAD,QAAOJ,CAAAA,OAAO,CAACC,UAAU,CAACI,MAAZ,CAAd,EAApB,CACAJ,UAAU,CAACK,aAAX,CAAyBR,IAAzB,EACH,CAJM,CAAP,CAKH,CANM,CAQP,GAAMS,CAAAA,OAAO,CAAG,CACZ,YAAa,KADD,CAEZ,YAAa,KAFD,CAGZ,eAAgB,KAHJ,CAIZ,aAAc,MAJF,CAKZ,YAAa,KALD,CAMZ,gBAAiB,KANL,CAOZ,aAAc,MAPF,CAQZ,aAAc,MARF,CAAhB,CAaA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACV,IAAD,CAAOW,GAAP,CAAYC,IAAZ,KAAkBC,CAAAA,KAAlB,2DAA0B,IAA1B,IAAgCC,CAAAA,MAAhC,2DAAuC,IAAvC,OACtB,IAAIb,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAa,CACrBJ,OAAO,CAACiB,gBAAR,CACIf,IADJ,CAEIa,KAFJ,CAGIC,MAHJ,CAIIH,GAAG,CAAGF,OAAO,CAACE,GAAD,CAAV,CAAkB,MAJzB,CAKI,EALJ,CAMI,CANJ,CAOI,SAACK,GAAD,CAAS,CACLd,OAAO,CAACc,GAAD,CAAP,CACH,CATL,CAUIJ,IAVJ,EAYH,CAbD,CADsB,EAAnB,CAiBP,MAAO,IAAMK,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAC,GAAG,QAC1B,IAAIjB,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUiB,MAAV,CAAqB,CAC7B,GAAMC,CAAAA,KAAK,CAAG,GAAIC,CAAAA,KAAJ,EAAd,CACAD,KAAK,CAACE,gBAAN,CAAuB,MAAvB,CAA+B,iBAAMpB,CAAAA,OAAO,CAACkB,KAAD,CAAb,EAA/B,EACAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,CAAgC,SAAAC,KAAK,QAAIJ,CAAAA,MAAM,CAACI,KAAD,CAAV,EAArC,EACAH,KAAK,CAACI,GAAN,CAAYN,GAAZ,CACH,CALD,CAD0B,EAAvB,CAQP,MAAO,SAASO,CAAAA,kBAAT,CAA4BC,YAA5B,CAA0CC,QAA1C,CAAoD,CACvD,GAAIC,CAAAA,GAAG,CAAGF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAV,CAAmCC,IAAI,CAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAA1C,CACIC,IAAI,CAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CADf,CACyBM,CAAC,CAAGF,IAAI,CAACG,MADlC,CAC0CC,KAAK,CAAG,GAAIC,CAAAA,UAAJ,CAAeH,CAAf,CADlD,CAEA,MAAOA,CAAC,EAAR,CAAY,CACRE,KAAK,CAACF,CAAD,CAAL,CAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX,CACH,CACD,MAAO,IAAIK,CAAAA,IAAJ,CAAS,CAACH,KAAD,CAAT,CAAkBT,QAAlB,CAA4B,CAACf,IAAI,CAAEkB,IAAP,CAA5B,CAAP,CACH","sourcesContent":["import Resizer from 'react-image-file-resizer';\n\nexport const fileToBase64 = (file) => {\n    return new Promise((resolve) => {\n        let fileReader = new FileReader();\n        fileReader.onload = (e) => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n};\n\nconst memType = {\n    'image/bmp': 'BMP',\n    'image/gif': 'GIF',\n    'image/x-icon': 'ICO',\n    'image/jpeg': 'JPEG',\n    'image/png': 'PNG',\n    'image/svg+xml': 'SVG',\n    'image/tiff': 'TIFF',\n    'image/webp': 'WEBP'\n\n};\n\n\nexport const resizeFile = (file, ext, type, width = 2000, height=2000) =>\n    new Promise((resolve) => {\n        Resizer.imageFileResizer(\n            file,\n            width,\n            height,\n            ext ? memType[ext] : 'JPEG',\n            85,\n            0,\n            (uri) => {\n                resolve(uri);\n            },\n            type\n        );\n    });\n\n\nexport const createImage = url =>\n    new Promise((resolve, reject) => {\n        const image = new Image();\n        image.addEventListener('load', () => resolve(image));\n        image.addEventListener('error', error => reject(error));\n        image.src = url;\n    });\n\nexport function base64StringtoFile(base64String, filename) {\n    var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n)\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n    }\n    return new File([u8arr], filename, {type: mime})\n}\n"]},"metadata":{},"sourceType":"module"}