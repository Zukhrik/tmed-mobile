{"ast":null,"code":"import{useCallback}from'react';import{useStore}from'effector-react';import{useSubscription}from'../user';import{$appModel}from'../../Models/app';import{useParams}from'react-router-dom';import{useTranslation}from'react-i18next';import{$orgModel}from'../../Models/org-model';import{useOrganization}from'./use-organization';import{$accountModel}from'../../Models/account-model';export function useOrgSubscription(){useOrganization();var _useTranslation=useTranslation(),t=_useTranslation.t;var _useParams=useParams(),organization=_useParams.organization;var _useStore=useStore($appModel),token=_useStore.$app.token;var _useStore2=useStore($orgModel),data=_useStore2.$organizationInfo.data;var _useStore3=useStore($accountModel),currentProfile=_useStore3.$profiles.currentProfile;var _useSubscription=useSubscription({from:'org_info'}),subscribeToAccount=_useSubscription.subscribeToAccount,unsubscribeFromAccount=_useSubscription.unsubscribeFromAccount;var getSubscription=useCallback(function(){var tmp={text:null,toggle:function toggle(){return false;}};if(!token){return false;}if(data&&organization&&data[organization]&&currentProfile){var org_name=data[organization];if(data[organization].subs&&data[organization].subs.subscribed){tmp={text:t('unsubscribe'),toggle:function toggle(){return unsubscribeFromAccount({slug_name:organization,name:org_name});}};}else{tmp={text:t('subscribe'),toggle:function toggle(){return subscribeToAccount({slug_name:organization,name:org_name});}};}}return tmp;},[data,currentProfile,t,token,organization,subscribeToAccount,unsubscribeFromAccount]);return{getSubscription:getSubscription,data:data,currentProfile:currentProfile,organization:organization};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/org/use-org-subscription.js"],"names":["useCallback","useStore","useSubscription","$appModel","useParams","useTranslation","$orgModel","useOrganization","$accountModel","useOrgSubscription","t","organization","token","$app","data","$organizationInfo","currentProfile","$profiles","from","subscribeToAccount","unsubscribeFromAccount","getSubscription","tmp","text","toggle","org_name","subs","subscribed","slug_name","name"],"mappings":"AAAA,OAAQA,WAAR,KAA0B,OAA1B,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,eAAR,KAA8B,SAA9B,CACA,OAAQC,SAAR,KAAwB,kBAAxB,CACA,OAAQC,SAAR,KAAwB,kBAAxB,CACA,OAAQC,cAAR,KAA6B,eAA7B,CACA,OAAQC,SAAR,KAAwB,wBAAxB,CACA,OAAQC,eAAR,KAA8B,oBAA9B,CACA,OAAQC,aAAR,KAA4B,4BAA5B,CAEA,MAAO,SAASC,CAAAA,kBAAT,EAA8B,CACjCF,eAAe,GACf,oBAAYF,cAAc,EAA1B,CAAOK,CAAP,iBAAOA,CAAP,CACA,eAAuBN,SAAS,EAAhC,CAAOO,YAAP,YAAOA,YAAP,CACA,cAAwBV,QAAQ,CAACE,SAAD,CAAhC,CAAcS,KAAd,WAAOC,IAAP,CAAcD,KAAd,CACA,eAAoCX,QAAQ,CAACK,SAAD,CAA5C,CAA2BQ,IAA3B,YAAOC,iBAAP,CAA2BD,IAA3B,CACA,eAAsCb,QAAQ,CAACO,aAAD,CAA9C,CAAmBQ,cAAnB,YAAOC,SAAP,CAAmBD,cAAnB,CACA,qBAAqDd,eAAe,CAAC,CAACgB,IAAI,CAAE,UAAP,CAAD,CAApE,CAAOC,kBAAP,kBAAOA,kBAAP,CAA2BC,sBAA3B,kBAA2BA,sBAA3B,CAGA,GAAMC,CAAAA,eAAe,CAAGrB,WAAW,CAAC,UAAM,CACtC,GAAIsB,CAAAA,GAAG,CAAG,CACNC,IAAI,CAAE,IADA,CAENC,MAAM,CAAE,wBAAM,MAAN,EAFF,CAAV,CAIA,GAAI,CAACZ,KAAL,CAAY,CACR,MAAO,MAAP,CACH,CAED,GAAIE,IAAI,EAAIH,YAAR,EAAwBG,IAAI,CAACH,YAAD,CAA5B,EAA8CK,cAAlD,CAAkE,CAC9D,GAAMS,CAAAA,QAAQ,CAAGX,IAAI,CAACH,YAAD,CAArB,CACA,GAAIG,IAAI,CAACH,YAAD,CAAJ,CAAmBe,IAAnB,EAA2BZ,IAAI,CAACH,YAAD,CAAJ,CAAmBe,IAAnB,CAAwBC,UAAvD,CAAmE,CAC/DL,GAAG,CAAG,CACFC,IAAI,CAAEb,CAAC,CAAC,aAAD,CADL,CAEFc,MAAM,CAAE,wBAAMJ,CAAAA,sBAAsB,CAAC,CAACQ,SAAS,CAAEjB,YAAZ,CAA0BkB,IAAI,CAAEJ,QAAhC,CAAD,CAA5B,EAFN,CAAN,CAIH,CALD,IAKO,CACHH,GAAG,CAAG,CACFC,IAAI,CAAEb,CAAC,CAAC,WAAD,CADL,CAEFc,MAAM,CAAE,wBAAML,CAAAA,kBAAkB,CAAC,CAACS,SAAS,CAAEjB,YAAZ,CAA0BkB,IAAI,CAAEJ,QAAhC,CAAD,CAAxB,EAFN,CAAN,CAIH,CACJ,CAED,MAAOH,CAAAA,GAAP,CACH,CAzBkC,CAyBhC,CAACR,IAAD,CAAOE,cAAP,CAAuBN,CAAvB,CAA0BE,KAA1B,CAAiCD,YAAjC,CAA+CQ,kBAA/C,CAAmEC,sBAAnE,CAzBgC,CAAnC,CA2BA,MAAO,CAACC,eAAe,CAAfA,eAAD,CAAkBP,IAAI,CAAJA,IAAlB,CAAwBE,cAAc,CAAdA,cAAxB,CAAwCL,YAAY,CAAZA,YAAxC,CAAP,CACH","sourcesContent":["import {useCallback} from 'react'\nimport {useStore} from 'effector-react'\nimport {useSubscription} from '../user'\nimport {$appModel} from '../../Models/app'\nimport {useParams} from 'react-router-dom'\nimport {useTranslation} from 'react-i18next'\nimport {$orgModel} from '../../Models/org-model'\nimport {useOrganization} from './use-organization'\nimport {$accountModel} from '../../Models/account-model'\n\nexport function useOrgSubscription() {\n    useOrganization()\n    const {t} = useTranslation()\n    const {organization} = useParams()\n    const {$app: {token}} = useStore($appModel)\n    const {$organizationInfo: {data}} = useStore($orgModel)\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const {subscribeToAccount, unsubscribeFromAccount} = useSubscription({from: 'org_info'})\n    \n    \n    const getSubscription = useCallback(() => {\n        let tmp = {\n            text: null,\n            toggle: () => false\n        }\n        if (!token) {\n            return false\n        }\n        \n        if (data && organization && data[organization] && currentProfile) {\n            const org_name = data[organization]\n            if (data[organization].subs && data[organization].subs.subscribed) {\n                tmp = {\n                    text: t('unsubscribe'),\n                    toggle: () => unsubscribeFromAccount({slug_name: organization, name: org_name})\n                }\n            } else {\n                tmp = {\n                    text: t('subscribe'),\n                    toggle: () => subscribeToAccount({slug_name: organization, name: org_name})\n                }\n            }\n        }\n        \n        return tmp\n    }, [data, currentProfile, t, token, organization, subscribeToAccount, unsubscribeFromAccount])\n    \n    return {getSubscription, data, currentProfile, organization}\n}"]},"metadata":{},"sourceType":"module"}