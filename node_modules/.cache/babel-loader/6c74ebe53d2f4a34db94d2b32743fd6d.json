{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { useUrlParams } from '../app';\nimport { URL_KEYS, URL_VALUES } from '../../Constants';\nimport { $chatModel, allChatsMount, chatForceLoading } from '../../Models/chat-model';\nimport { useHistory } from 'react-router-dom';\nimport { useStore } from 'effector-react';\nconst initialParams = {\n  limit: 10,\n  offset: 0\n};\nexport function useChatList() {\n  const {\n    urlData\n  } = useUrlParams();\n  const chatTab = urlData[URL_KEYS.CHAT_TAB];\n  const {\n    $allChatList: {\n      userChatForceLoading,\n      groupChatForCeLoading\n    }\n  } = useStore($chatModel);\n  const [mounted, setMounted] = useState(false);\n  const {\n    push\n  } = useHistory();\n  const getList = useCallback((type, params) => {\n    if (type === URL_VALUES.ALL_CHATS) {\n      allChatsMount(params);\n    }\n\n    if (type === URL_VALUES.GROUP_CHATS) {}\n  }, []);\n  useEffect(() => {\n    if (!chatTab) {\n      push({\n        pathname: '/chat',\n        search: `${URL_KEYS.CHAT_TAB}=${URL_VALUES.ALL_CHATS}`\n      });\n    }\n  }, [chatTab, push]);\n  useEffect(() => {\n    let timeout = null;\n    timeout = setTimeout(() => {\n      if (chatTab && !mounted) {\n        const data = {\n          clear: true,\n          params: { ...initialParams,\n            rtype: 'user'\n          }\n        };\n        chatForceLoading({\n          type: chatTab\n        });\n\n        if (chatTab === URL_VALUES.ALL_CHATS && userChatForceLoading === 0) {\n          allChatsMount(data);\n        }\n\n        if (chatTab === URL_VALUES.GROUP_CHATS && groupChatForCeLoading === 0) {}\n\n        setMounted(true);\n      }\n    }, 300);\n    return () => {\n      clearTimeout(timeout);\n      timeout = null;\n    };\n  }, [getList, chatTab, mounted, userChatForceLoading, groupChatForCeLoading]);\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/chat/use-chat-list.js"],"names":["useCallback","useEffect","useState","useUrlParams","URL_KEYS","URL_VALUES","$chatModel","allChatsMount","chatForceLoading","useHistory","useStore","initialParams","limit","offset","useChatList","urlData","chatTab","CHAT_TAB","$allChatList","userChatForceLoading","groupChatForCeLoading","mounted","setMounted","push","getList","type","params","ALL_CHATS","GROUP_CHATS","pathname","search","timeout","setTimeout","data","clear","rtype","clearTimeout"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SAAQC,YAAR,QAA2B,QAA3B;AACA,SAAQC,QAAR,EAAkBC,UAAlB,QAAmC,iBAAnC;AACA,SAAQC,UAAR,EAAoBC,aAApB,EAAmCC,gBAAnC,QAA0D,yBAA1D;AACA,SAAQC,UAAR,QAAyB,kBAAzB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AAEA,MAAMC,aAAa,GAAG;AAClBC,EAAAA,KAAK,EAAE,EADW;AAElBC,EAAAA,MAAM,EAAE;AAFU,CAAtB;AAKA,OAAO,SAASC,WAAT,GAAuB;AAC1B,QAAM;AAACC,IAAAA;AAAD,MAAYZ,YAAY,EAA9B;AACA,QAAMa,OAAO,GAAGD,OAAO,CAACX,QAAQ,CAACa,QAAV,CAAvB;AACA,QAAM;AACFC,IAAAA,YAAY,EAAE;AAACC,MAAAA,oBAAD;AAAuBC,MAAAA;AAAvB;AADZ,MAEFV,QAAQ,CAACJ,UAAD,CAFZ;AAGA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAACqB,IAAAA;AAAD,MAASd,UAAU,EAAzB;AAEA,QAAMe,OAAO,GAAGxB,WAAW,CAAC,CAACyB,IAAD,EAAOC,MAAP,KAAkB;AAE1C,QAAID,IAAI,KAAKpB,UAAU,CAACsB,SAAxB,EAAmC;AAC/BpB,MAAAA,aAAa,CAACmB,MAAD,CAAb;AACH;;AAED,QAAID,IAAI,KAAKpB,UAAU,CAACuB,WAAxB,EAAqC,CACpC;AACJ,GAR0B,EAQxB,EARwB,CAA3B;AAUA3B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACe,OAAL,EAAc;AACVO,MAAAA,IAAI,CAAC;AACDM,QAAAA,QAAQ,EAAE,OADT;AAEDC,QAAAA,MAAM,EAAG,GAAE1B,QAAQ,CAACa,QAAS,IAAGZ,UAAU,CAACsB,SAAU;AAFpD,OAAD,CAAJ;AAIH;AACJ,GAPQ,EAON,CAACX,OAAD,EAAUO,IAAV,CAPM,CAAT;AASAtB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI8B,OAAO,GAAG,IAAd;AAEAA,IAAAA,OAAO,GAAGC,UAAU,CAAC,MAAM;AACvB,UAAIhB,OAAO,IAAI,CAACK,OAAhB,EAAyB;AACrB,cAAMY,IAAI,GAAG;AACTC,UAAAA,KAAK,EAAE,IADE;AAETR,UAAAA,MAAM,EAAE,EACJ,GAAGf,aADC;AAEJwB,YAAAA,KAAK,EAAE;AAFH;AAFC,SAAb;AAOA3B,QAAAA,gBAAgB,CAAC;AAACiB,UAAAA,IAAI,EAAET;AAAP,SAAD,CAAhB;;AAEA,YAAIA,OAAO,KAAKX,UAAU,CAACsB,SAAvB,IAAoCR,oBAAoB,KAAK,CAAjE,EAAoE;AAChEZ,UAAAA,aAAa,CAAC0B,IAAD,CAAb;AACH;;AAED,YAAIjB,OAAO,KAAKX,UAAU,CAACuB,WAAvB,IAAsCR,qBAAqB,KAAK,CAApE,EAAuE,CACtE;;AACDE,QAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,KAnBmB,EAmBjB,GAnBiB,CAApB;AAqBA,WAAO,MAAM;AACTc,MAAAA,YAAY,CAACL,OAAD,CAAZ;AACAA,MAAAA,OAAO,GAAG,IAAV;AACH,KAHD;AAIH,GA5BQ,EA4BN,CAACP,OAAD,EAAUR,OAAV,EAAmBK,OAAnB,EAA4BF,oBAA5B,EAAkDC,qBAAlD,CA5BM,CAAT;AA6BH","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\r\nimport {useUrlParams} from '../app'\r\nimport {URL_KEYS, URL_VALUES} from '../../Constants'\r\nimport {$chatModel, allChatsMount, chatForceLoading} from '../../Models/chat-model'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {useStore} from 'effector-react'\r\n\r\nconst initialParams = {\r\n    limit: 10,\r\n    offset: 0\r\n}\r\n\r\nexport function useChatList() {\r\n    const {urlData} = useUrlParams()\r\n    const chatTab = urlData[URL_KEYS.CHAT_TAB]\r\n    const {\r\n        $allChatList: {userChatForceLoading, groupChatForCeLoading},\r\n    } = useStore($chatModel)\r\n    const [mounted, setMounted] = useState(false)\r\n    const {push} = useHistory()\r\n\r\n    const getList = useCallback((type, params) => {\r\n        \r\n        if (type === URL_VALUES.ALL_CHATS) {\r\n            allChatsMount(params)\r\n        }\r\n\r\n        if (type === URL_VALUES.GROUP_CHATS) {\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (!chatTab) {\r\n            push({\r\n                pathname: '/chat',\r\n                search: `${URL_KEYS.CHAT_TAB}=${URL_VALUES.ALL_CHATS}`\r\n            })\r\n        }\r\n    }, [chatTab, push])\r\n\r\n    useEffect(() => {\r\n        let timeout = null\r\n\r\n        timeout = setTimeout(() => {\r\n            if (chatTab && !mounted) {\r\n                const data = {\r\n                    clear: true,\r\n                    params: {\r\n                        ...initialParams,\r\n                        rtype: 'user'\r\n                    }\r\n                }\r\n                chatForceLoading({type: chatTab})\r\n\r\n                if (chatTab === URL_VALUES.ALL_CHATS && userChatForceLoading === 0) {\r\n                    allChatsMount(data)\r\n                }\r\n\r\n                if (chatTab === URL_VALUES.GROUP_CHATS && groupChatForCeLoading === 0) {\r\n                }\r\n                setMounted(true)\r\n            }\r\n        }, 300)\r\n\r\n        return () => {\r\n            clearTimeout(timeout)\r\n            timeout = null\r\n        }\r\n    }, [getList, chatTab, mounted, userChatForceLoading, groupChatForCeLoading])\r\n}"]},"metadata":{},"sourceType":"module"}