{"ast":null,"code":"import Resizer from 'react-image-file-resizer';\nexport const fileToBase64 = file => {\n  return new Promise(resolve => {\n    let fileReader = new FileReader();\n\n    fileReader.onload = e => resolve(fileReader.result);\n\n    fileReader.readAsDataURL(file);\n  });\n};\nconst memType = {\n  'image/bmp': 'BMP',\n  'image/gif': 'GIF',\n  'image/x-icon': 'ICO',\n  'image/jpeg': 'JPEG',\n  'image/png': 'PNG',\n  'image/svg+xml': 'SVG',\n  'image/tiff': 'TIFF',\n  'image/webp': 'WEBP'\n};\nexport const resizeFile = (file, ext, type, width = 2000, height = 2000) => new Promise(resolve => {\n  Resizer.imageFileResizer(file, width, height, ext ? memType[ext] : 'JPEG', 85, 0, uri => {\n    resolve(uri);\n  }, type);\n});\nexport const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.src = url;\n});\nexport function base64StringtoFile(base64String, filename) {\n  var arr = base64String.split(','),\n      mime = arr[0].match(/:(.*?);/)[1],\n      bstr = atob(arr[1]),\n      n = bstr.length,\n      u8arr = new Uint8Array(n);\n\n  while (n--) {\n    u8arr[n] = bstr.charCodeAt(n);\n  }\n\n  return new File([u8arr], filename, {\n    type: mime\n  });\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/utils/crop-utils.js"],"names":["Resizer","fileToBase64","file","Promise","resolve","fileReader","FileReader","onload","e","result","readAsDataURL","memType","resizeFile","ext","type","width","height","imageFileResizer","uri","createImage","url","reject","image","Image","addEventListener","error","src","base64StringtoFile","base64String","filename","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","File"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,0BAApB;AAEA,OAAO,MAAMC,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC5B,QAAIC,UAAU,GAAG,IAAIC,UAAJ,EAAjB;;AACAD,IAAAA,UAAU,CAACE,MAAX,GAAqBC,CAAD,IAAOJ,OAAO,CAACC,UAAU,CAACI,MAAZ,CAAlC;;AACAJ,IAAAA,UAAU,CAACK,aAAX,CAAyBR,IAAzB;AACH,GAJM,CAAP;AAKH,CANM;AAQP,MAAMS,OAAO,GAAG;AACZ,eAAa,KADD;AAEZ,eAAa,KAFD;AAGZ,kBAAgB,KAHJ;AAIZ,gBAAc,MAJF;AAKZ,eAAa,KALD;AAMZ,mBAAiB,KANL;AAOZ,gBAAc,MAPF;AAQZ,gBAAc;AARF,CAAhB;AAaA,OAAO,MAAMC,UAAU,GAAG,CAACV,IAAD,EAAOW,GAAP,EAAYC,IAAZ,EAAkBC,KAAK,GAAG,IAA1B,EAAgCC,MAAM,GAAC,IAAvC,KACtB,IAAIb,OAAJ,CAAaC,OAAD,IAAa;AACrBJ,EAAAA,OAAO,CAACiB,gBAAR,CACIf,IADJ,EAEIa,KAFJ,EAGIC,MAHJ,EAIIH,GAAG,GAAGF,OAAO,CAACE,GAAD,CAAV,GAAkB,MAJzB,EAKI,EALJ,EAMI,CANJ,EAOKK,GAAD,IAAS;AACLd,IAAAA,OAAO,CAACc,GAAD,CAAP;AACH,GATL,EAUIJ,IAVJ;AAYH,CAbD,CADG;AAiBP,OAAO,MAAMK,WAAW,GAAGC,GAAG,IAC1B,IAAIjB,OAAJ,CAAY,CAACC,OAAD,EAAUiB,MAAV,KAAqB;AAC7B,QAAMC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAD,EAAAA,KAAK,CAACE,gBAAN,CAAuB,MAAvB,EAA+B,MAAMpB,OAAO,CAACkB,KAAD,CAA5C;AACAA,EAAAA,KAAK,CAACE,gBAAN,CAAuB,OAAvB,EAAgCC,KAAK,IAAIJ,MAAM,CAACI,KAAD,CAA/C;AACAH,EAAAA,KAAK,CAACI,GAAN,GAAYN,GAAZ;AACH,CALD,CADG;AAQP,OAAO,SAASO,kBAAT,CAA4BC,YAA5B,EAA0CC,QAA1C,EAAoD;AACvD,MAAIC,GAAG,GAAGF,YAAY,CAACG,KAAb,CAAmB,GAAnB,CAAV;AAAA,MAAmCC,IAAI,GAAGF,GAAG,CAAC,CAAD,CAAH,CAAOG,KAAP,CAAa,SAAb,EAAwB,CAAxB,CAA1C;AAAA,MACIC,IAAI,GAAGC,IAAI,CAACL,GAAG,CAAC,CAAD,CAAJ,CADf;AAAA,MACyBM,CAAC,GAAGF,IAAI,CAACG,MADlC;AAAA,MAC0CC,KAAK,GAAG,IAAIC,UAAJ,CAAeH,CAAf,CADlD;;AAEA,SAAOA,CAAC,EAAR,EAAY;AACRE,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAWF,IAAI,CAACM,UAAL,CAAgBJ,CAAhB,CAAX;AACH;;AACD,SAAO,IAAIK,IAAJ,CAAS,CAACH,KAAD,CAAT,EAAkBT,QAAlB,EAA4B;AAACf,IAAAA,IAAI,EAAEkB;AAAP,GAA5B,CAAP;AACH","sourcesContent":["import Resizer from 'react-image-file-resizer';\n\nexport const fileToBase64 = (file) => {\n    return new Promise((resolve) => {\n        let fileReader = new FileReader();\n        fileReader.onload = (e) => resolve(fileReader.result);\n        fileReader.readAsDataURL(file);\n    });\n};\n\nconst memType = {\n    'image/bmp': 'BMP',\n    'image/gif': 'GIF',\n    'image/x-icon': 'ICO',\n    'image/jpeg': 'JPEG',\n    'image/png': 'PNG',\n    'image/svg+xml': 'SVG',\n    'image/tiff': 'TIFF',\n    'image/webp': 'WEBP'\n\n};\n\n\nexport const resizeFile = (file, ext, type, width = 2000, height=2000) =>\n    new Promise((resolve) => {\n        Resizer.imageFileResizer(\n            file,\n            width,\n            height,\n            ext ? memType[ext] : 'JPEG',\n            85,\n            0,\n            (uri) => {\n                resolve(uri);\n            },\n            type\n        );\n    });\n\n\nexport const createImage = url =>\n    new Promise((resolve, reject) => {\n        const image = new Image();\n        image.addEventListener('load', () => resolve(image));\n        image.addEventListener('error', error => reject(error));\n        image.src = url;\n    });\n\nexport function base64StringtoFile(base64String, filename) {\n    var arr = base64String.split(','), mime = arr[0].match(/:(.*?);/)[1],\n        bstr = atob(arr[1]), n = bstr.length, u8arr = new Uint8Array(n)\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n)\n    }\n    return new File([u8arr], filename, {type: mime})\n}\n"]},"metadata":{},"sourceType":"module"}