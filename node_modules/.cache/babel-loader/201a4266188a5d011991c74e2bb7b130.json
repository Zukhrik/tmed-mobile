{"ast":null,"code":"import { useLocation } from 'react-router-dom';\nimport { useCallback, useEffect, useState } from 'react';\nexport function useUrlParams(param) {\n  const {\n    search\n  } = useLocation();\n  const [urlParams, setUrlParams] = useState();\n  const [urlData, setUrlData] = useState({});\n  const generateUrlParams = useCallback(() => {\n    const searchParams = new URLSearchParams(search);\n    const newUrl = {};\n\n    for (let pair of searchParams.entries()) {\n      newUrl[pair[0]] = pair[1];\n    }\n\n    setUrlData(newUrl);\n\n    if (param) {\n      if (Array.isArray(param) && param.length > 0) {\n        param.forEach(item => searchParams.delete(item));\n      }\n\n      if (typeof param === 'string') {\n        searchParams.delete(param);\n      }\n    }\n\n    if (search.trim().length > 0) {\n      setUrlParams(searchParams.toString());\n    } else {\n      setUrlParams(null);\n    }\n  }, [search, param]);\n  useEffect(() => {\n    generateUrlParams();\n  }, [generateUrlParams]);\n  return {\n    urlData,\n    urlParams\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/app/use-url-params.js"],"names":["useLocation","useCallback","useEffect","useState","useUrlParams","param","search","urlParams","setUrlParams","urlData","setUrlData","generateUrlParams","searchParams","URLSearchParams","newUrl","pair","entries","Array","isArray","length","forEach","item","delete","trim","toString"],"mappings":"AAAA,SAAQA,WAAR,QAA0B,kBAA1B;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AAEA,OAAO,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAChC,QAAM;AAACC,IAAAA;AAAD,MAAWN,WAAW,EAA5B;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,EAA1C;AACA,QAAM,CAACM,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAMQ,iBAAiB,GAAGV,WAAW,CAAC,MAAM;AACxC,UAAMW,YAAY,GAAG,IAAIC,eAAJ,CAAoBP,MAApB,CAArB;AACA,UAAMQ,MAAM,GAAG,EAAf;;AAEA,SAAK,IAAIC,IAAT,IAAiBH,YAAY,CAACI,OAAb,EAAjB,EAAyC;AACrCF,MAAAA,MAAM,CAACC,IAAI,CAAC,CAAD,CAAL,CAAN,GAAkBA,IAAI,CAAC,CAAD,CAAtB;AACH;;AAEDL,IAAAA,UAAU,CAACI,MAAD,CAAV;;AAEA,QAAIT,KAAJ,EAAW;AACP,UAAIY,KAAK,CAACC,OAAN,CAAcb,KAAd,KAAwBA,KAAK,CAACc,MAAN,GAAe,CAA3C,EAA8C;AAC1Cd,QAAAA,KAAK,CAACe,OAAN,CAAcC,IAAI,IAAIT,YAAY,CAACU,MAAb,CAAoBD,IAApB,CAAtB;AACH;;AACD,UAAI,OAAOhB,KAAP,KAAiB,QAArB,EAA+B;AAC3BO,QAAAA,YAAY,CAACU,MAAb,CAAoBjB,KAApB;AACH;AACJ;;AAED,QAAIC,MAAM,CAACiB,IAAP,GAAcJ,MAAd,GAAuB,CAA3B,EAA8B;AAC1BX,MAAAA,YAAY,CAACI,YAAY,CAACY,QAAb,EAAD,CAAZ;AACH,KAFD,MAEO;AACHhB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;AAEJ,GAzBoC,EAyBlC,CAACF,MAAD,EAASD,KAAT,CAzBkC,CAArC;AA4BAH,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,iBAAiB;AACpB,GAFQ,EAEN,CAACA,iBAAD,CAFM,CAAT;AAIA,SAAO;AAACF,IAAAA,OAAD;AAAUF,IAAAA;AAAV,GAAP;AACH","sourcesContent":["import {useLocation} from 'react-router-dom'\nimport {useCallback, useEffect, useState} from 'react'\n\nexport function useUrlParams(param) {\n    const {search} = useLocation()\n    const [urlParams, setUrlParams] = useState()\n    const [urlData, setUrlData] = useState({})\n    \n    const generateUrlParams = useCallback(() => {\n        const searchParams = new URLSearchParams(search)\n        const newUrl = {}\n        \n        for (let pair of searchParams.entries()) {\n            newUrl[pair[0]] = pair[1]\n        }\n        \n        setUrlData(newUrl)\n        \n        if (param) {\n            if (Array.isArray(param) && param.length > 0) {\n                param.forEach(item => searchParams.delete(item))\n            }\n            if (typeof param === 'string') {\n                searchParams.delete(param)\n            }\n        }\n        \n        if (search.trim().length > 0) {\n            setUrlParams(searchParams.toString())\n        } else {\n            setUrlParams(null)\n        }\n        \n    }, [search, param])\n    \n    \n    useEffect(() => {\n        generateUrlParams()\n    }, [generateUrlParams])\n    \n    return {urlData, urlParams}\n}"]},"metadata":{},"sourceType":"module"}