{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx\";\nimport React, { useState } from 'react';\nimport { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { OfferingListWrapper } from '../style';\nimport { $appModel, switchOrgGroupPanel } from '../../../Models/app';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { NoOfferingSvg } from '../../../Icons/NoOffering';\nimport { numberFormat } from '../../../utils/number-utils';\nimport { useOfferingList } from '../../../Hooks/offerings';\nimport { AuthModal } from '../../../UIComponents/AuthModal';\nimport { OverlaySettings } from '../../../Components/Overlay';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { OverlayAuth } from '../../../UIComponents/OverlayAuth';\nimport { generateSkeleton } from '../../../utils/skeleton-utils';\nimport { $offeringsModel } from '../../../Models/offerings-model';\nimport { useOrgOrder, useOrgOrderList } from '../../../Hooks/order';\nimport Masorny, { ResponsiveMasonry } from 'react-responsive-masonry';\nimport { EmptyContainerWrapper } from '../../../UIComponents/GlobalStyles';\nimport { ProductCard, ProductCardSkeleton } from '../../../Components/Cards';\nimport { OverlayOfferingGroup } from '../../../Components/Offering/OrgOfferings';\nconst skeleton = generateSkeleton(10, 100, 220);\nexport const OfferingsList = () => {\n  useOrgOrderList();\n  const {\n    organization\n  } = useParams();\n  const {\n    $app: {\n      token,\n      changeOrgGroupPanel\n    },\n    $device\n  } = useStore($appModel);\n  const {\n    loadMoreOfferings,\n    loadMoreOfferingGroup\n  } = useOfferingList();\n  const [auth, setAuth] = useState(false);\n  const {\n    currency,\n    checkoutOffering\n  } = useOrgOrder();\n  const [offeringItem, setOfferingItem] = useState(false);\n  const {\n    $offeringsList: {\n      data,\n      result,\n      loading,\n      forceLoading\n    }\n  } = useStore($offeringsModel);\n\n  const handleClose = () => {\n    if (auth) {\n      setAuth(false);\n    }\n\n    setOfferingItem(false);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: changeOrgGroupPanel,\n    content: /*#__PURE__*/React.createElement(OverlayOfferingGroup, {\n      loadMore: loadMoreOfferingGroup,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 26\n      }\n    }),\n    onClose: () => switchOrgGroupPanel(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(OverlaySettings, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }\n  }), $device && $device === INFO_MAT ? /*#__PURE__*/React.createElement(AuthModal, {\n    modalIsOpen: !!offeringItem,\n    action: () => checkoutOffering(offeringItem),\n    onCancel: () => setOfferingItem(null),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 23\n    }\n  }) : /*#__PURE__*/React.createElement(OverlaySettings, {\n    openSettings: offeringItem,\n    onClose: handleClose,\n    content: /*#__PURE__*/React.createElement(OverlayAuth, {\n      action: () => checkoutOffering(offeringItem),\n      auth: auth,\n      setAuth: setAuth,\n      onClose: handleClose,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 34\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMoreOfferings,\n    dataLength: (result === null || result === void 0 ? void 0 : result.nextOffset) || 20,\n    hasMore: !loading && !!(result === null || result === void 0 ? void 0 : result.next),\n    loader: /*#__PURE__*/React.createElement(React.Fragment, null, \"...loading\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(OfferingListWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(ResponsiveMasonry, {\n    style: {\n      padding: '0 12px'\n    },\n    columnsCountBreakPoints: {\n      350: 2,\n      768: 2,\n      900: 3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 21\n    }\n  }, forceLoading === 2 && data ? /*#__PURE__*/React.createElement(Masorny, {\n    gutter: \"8px\",\n    style: {\n      marginBottom: 60\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 35\n    }\n  }, data.length > 0 && data.map((item, idx) => {\n    const offeringData = {\n      id: item.id,\n      qty: item.qty,\n      name: item.name,\n      image: item.image,\n      currency: currency,\n      loading: item.loading,\n      inCart: item.is_in_cart,\n      organization: organization,\n      cost: numberFormat(item.cost),\n      responsible: item.responsible,\n      path: `/${organization}/offerings/${item.id}`\n    };\n    return /*#__PURE__*/React.createElement(ProductCard, {\n      showBag: true,\n      key: `${idx + 1}`,\n      item: offeringData,\n      handleClick: item => {\n        token ? checkoutOffering(item) : setOfferingItem(item);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 49\n      }\n    });\n  })) : /*#__PURE__*/React.createElement(Masorny, {\n    gutter: \"12px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 35\n    }\n  }, skeleton.map((item, idx) => /*#__PURE__*/React.createElement(ProductCardSkeleton, {\n    key: `${idx + 1}`,\n    imgSkeletonHeight: item,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 45\n    }\n  })))))), result && result.count === 0 && /*#__PURE__*/React.createElement(EmptyContainerWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(NoOfferingSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 25\n    }\n  })));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/OrganizationPage/OfferingsList/index.jsx"],"names":["React","useState","useStore","useParams","OfferingListWrapper","$appModel","switchOrgGroupPanel","INFO_MAT","NoOfferingSvg","numberFormat","useOfferingList","AuthModal","OverlaySettings","InfiniteScroll","OverlayAuth","generateSkeleton","$offeringsModel","useOrgOrder","useOrgOrderList","Masorny","ResponsiveMasonry","EmptyContainerWrapper","ProductCard","ProductCardSkeleton","OverlayOfferingGroup","skeleton","OfferingsList","organization","$app","token","changeOrgGroupPanel","$device","loadMoreOfferings","loadMoreOfferingGroup","auth","setAuth","currency","checkoutOffering","offeringItem","setOfferingItem","$offeringsList","data","result","loading","forceLoading","handleClose","nextOffset","next","padding","marginBottom","length","map","item","idx","offeringData","id","qty","name","image","inCart","is_in_cart","cost","responsible","path","count"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\r\nimport {useStore} from 'effector-react'\r\nimport {useParams} from 'react-router-dom'\r\nimport {OfferingListWrapper} from '../style'\r\nimport {$appModel, switchOrgGroupPanel} from '../../../Models/app'\r\nimport {INFO_MAT} from '../../../Constants/app'\r\nimport {NoOfferingSvg} from '../../../Icons/NoOffering'\r\nimport {numberFormat} from '../../../utils/number-utils'\r\nimport {useOfferingList} from '../../../Hooks/offerings'\r\nimport {AuthModal} from '../../../UIComponents/AuthModal'\r\nimport {OverlaySettings} from '../../../Components/Overlay'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport {OverlayAuth} from '../../../UIComponents/OverlayAuth'\r\nimport {generateSkeleton} from '../../../utils/skeleton-utils'\r\nimport {$offeringsModel} from '../../../Models/offerings-model'\r\nimport {useOrgOrder, useOrgOrderList} from '../../../Hooks/order'\r\nimport Masorny, {ResponsiveMasonry} from 'react-responsive-masonry'\r\nimport {EmptyContainerWrapper} from '../../../UIComponents/GlobalStyles'\r\nimport {ProductCard, ProductCardSkeleton} from '../../../Components/Cards'\r\nimport {OverlayOfferingGroup} from '../../../Components/Offering/OrgOfferings'\r\n\r\nconst skeleton = generateSkeleton(10, 100, 220)\r\nexport const OfferingsList = () => {\r\n    useOrgOrderList()\r\n    const {organization} = useParams()\r\n    const {$app: {token, changeOrgGroupPanel}, $device} = useStore($appModel)\r\n    const {loadMoreOfferings, loadMoreOfferingGroup} = useOfferingList()\r\n    const [auth, setAuth] = useState(false)\r\n    const {currency, checkoutOffering} = useOrgOrder()\r\n    const [offeringItem, setOfferingItem] = useState(false)\r\n    const {$offeringsList: {data, result, loading, forceLoading}} = useStore($offeringsModel)\r\n    \r\n    const handleClose = () => {\r\n        if (auth) {\r\n            setAuth(false)\r\n        }\r\n        setOfferingItem(false)\r\n    }\r\n    \r\n    return (\r\n        <>\r\n            <OverlaySettings\r\n                openSettings={changeOrgGroupPanel}\r\n                content={<OverlayOfferingGroup loadMore={loadMoreOfferingGroup}/>}\r\n                onClose={() => switchOrgGroupPanel(false)}\r\n            />\r\n            <OverlaySettings\r\n                \r\n            />\r\n            {\r\n                $device && $device === INFO_MAT\r\n                    ? <AuthModal\r\n                        modalIsOpen={!!offeringItem}\r\n                        action={() => checkoutOffering(offeringItem)}\r\n                        onCancel={() => setOfferingItem(null)}\r\n                    />\r\n                    : <OverlaySettings\r\n                        openSettings={offeringItem}\r\n                        onClose={handleClose}\r\n                        content={<OverlayAuth\r\n                            action={() => checkoutOffering(offeringItem)}\r\n                            auth={auth}\r\n                            setAuth={setAuth}\r\n                            onClose={handleClose}\r\n                        />}\r\n                    />\r\n            }\r\n            <InfiniteScroll\r\n                next={loadMoreOfferings}\r\n                dataLength={result?.nextOffset || 20}\r\n                hasMore={!loading && !!result?.next}\r\n                loader={<>...loading</>}\r\n            >\r\n                <OfferingListWrapper>\r\n                    <ResponsiveMasonry\r\n                        style={{padding: '0 12px'}}\r\n                        columnsCountBreakPoints={{350: 2, 768: 2, 900: 3}}\r\n                    >\r\n                        {\r\n                            forceLoading === 2 && data\r\n                                ? <Masorny gutter='8px' style={{marginBottom: 60}}>\r\n                                    {\r\n                                        data.length > 0 && data.map((item, idx) => {\r\n                                            const offeringData = {\r\n                                                id: item.id,\r\n                                                qty: item.qty,\r\n                                                name: item.name,\r\n                                                image: item.image,\r\n                                                currency: currency,\r\n                                                loading: item.loading,\r\n                                                inCart: item.is_in_cart,\r\n                                                organization: organization,\r\n                                                cost: numberFormat(item.cost),\r\n                                                responsible: item.responsible,\r\n                                                path: `/${organization}/offerings/${item.id}`\r\n                                            }\r\n                                            return (\r\n                                                <ProductCard\r\n                                                    showBag\r\n                                                    key={`${idx + 1}`}\r\n                                                    item={offeringData}\r\n                                                    handleClick={(item) => {\r\n                                                        token ? checkoutOffering(item) : setOfferingItem(item)\r\n                                                    }}\r\n                                                />\r\n                                            )\r\n                                        })\r\n                                    }\r\n                                </Masorny>\r\n                                : <Masorny gutter='12px'>\r\n                                    {\r\n                                        skeleton.map((item, idx) => (\r\n                                            <ProductCardSkeleton\r\n                                                key={`${idx + 1}`}\r\n                                                imgSkeletonHeight={item}\r\n                                            />\r\n                                        ))\r\n                                    }\r\n                                </Masorny>\r\n                        }\r\n                    </ResponsiveMasonry>\r\n                </OfferingListWrapper>\r\n            </InfiniteScroll>\r\n            {\r\n                result && result.count === 0 && (\r\n                    <EmptyContainerWrapper>\r\n                        <NoOfferingSvg/>\r\n                    </EmptyContainerWrapper>\r\n                )\r\n            }\r\n        </>\r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}