{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Header/organisms/header.jsx\";\nimport React from 'react';\nimport { Col, Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { searchLink } from '../../../data';\nimport { URL_KEYS } from '../../../Constants';\nimport { useTranslation } from 'react-i18next';\nimport { $appModel } from '../../../Models/app';\nimport { INFO_MAT } from '../../../Constants/app';\nimport { useHomeSearch } from '../../../Hooks/home';\nimport { scrollTop } from '../../../utils/scroll-top';\nimport { IconBox } from '../../../UIComponents/GlobalStyles';\nimport { SearchInput, SearchInputForm, SearchNavLink, SearchWrapper } from '../atoms';\nimport { SearchSvg } from '../../../Icons/Search';\nexport const Header = ({\n  setOpenSearch\n}) => {\n  const {\n    $device\n  } = useStore($appModel);\n  const {\n    getActive\n  } = useHomeSearch();\n  const {\n    t\n  } = useTranslation(); // const handleClick = useCallback((item) => {\n  //     const url = []\n  //\n  //     if (!searchType) {\n  //         if (item.has_subs) {\n  //             url.push(`${URL_KEYS.CATEGORY}=${item.slug}`)\n  //         } else {\n  //             url.push(`${URL_KEYS.CATEGORY}=${item.slug}`)\n  //         }\n  //     } else if (searchType === URL_VALUES.OFFERINGS) {\n  //         url.push(`${URL_KEYS.SEARCH_TYPE}=${searchType}`)\n  //         if (item.has_subs) {\n  //             url.push(`${URL_KEYS.CATEGORY}=${item.id}`)\n  //         }\n  //     }\n  //\n  //     push({\n  //         pathname,\n  //         search: url.join('&')\n  //     })\n  // }, [searchType, push, pathname])\n\n  return /*#__PURE__*/React.createElement(SearchWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(SearchInputForm, {\n    onClick: () => setOpenSearch(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(SearchInput, {\n    disabled: true,\n    type: \"search\",\n    placeholder: t('what_are_you_looking_for?'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(IconBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(SearchSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 21\n    }\n  }))), $device && $device !== INFO_MAT && /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 0],\n    justify: \"space-around\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 21\n    }\n  }, searchLink.map(item => {\n    return /*#__PURE__*/React.createElement(Col, {\n      key: item.id,\n      onClick: scrollTop,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SearchNavLink, {\n      to: {\n        pathname: '/search',\n        search: item.id !== 'organization' ? `${URL_KEYS.SEARCH_TYPE}=${item.id}` : ''\n      },\n      isActive: () => getActive(item.id),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 41\n      }\n    }, t(item.name)));\n  })));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Components/Header/organisms/header.jsx"],"names":["React","Col","Row","useStore","searchLink","URL_KEYS","useTranslation","$appModel","INFO_MAT","useHomeSearch","scrollTop","IconBox","SearchInput","SearchInputForm","SearchNavLink","SearchWrapper","SearchSvg","Header","setOpenSearch","$device","getActive","t","map","item","id","pathname","search","SEARCH_TYPE","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,MAAvB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,cAAR,QAA6B,eAA7B;AACA,SAAQC,SAAR,QAAwB,qBAAxB;AACA,SAAQC,QAAR,QAAuB,wBAAvB;AACA,SAAQC,aAAR,QAA4B,qBAA5B;AACA,SAAQC,SAAR,QAAwB,2BAAxB;AACA,SAAQC,OAAR,QAAsB,oCAAtB;AACA,SAAQC,WAAR,EAAqBC,eAArB,EAAsCC,aAAtC,EAAqDC,aAArD,QAAyE,UAAzE;AACA,SAAQC,SAAR,QAAwB,uBAAxB;AAGA,OAAO,MAAMC,MAAM,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAqB;AACvC,QAAM;AAACC,IAAAA;AAAD,MAAYhB,QAAQ,CAACI,SAAD,CAA1B;AACA,QAAM;AAACa,IAAAA;AAAD,MAAcX,aAAa,EAAjC;AACA,QAAM;AAACY,IAAAA;AAAD,MAAMf,cAAc,EAA1B,CAHuC,CAKvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,sBACI,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAiB,IAAA,OAAO,EAAE,MAAMY,aAAa,CAAC,IAAD,CAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,WAAD;AACI,IAAA,QAAQ,MADZ;AAEI,IAAA,IAAI,EAAC,QAFT;AAGI,IAAA,WAAW,EAAEG,CAAC,CAAC,2BAAD,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CANJ,CADJ,EAYQF,OAAO,IAAIA,OAAO,KAAKX,QAAvB,iBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,CAAL,CAAb;AAAsB,IAAA,OAAO,EAAC,cAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQJ,UAAU,CAACkB,GAAX,CAAgBC,IAAD,IAAU;AACrB,wBACI,oBAAC,GAAD;AACI,MAAA,GAAG,EAAEA,IAAI,CAACC,EADd;AAEI,MAAA,OAAO,EAAEd,SAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII,oBAAC,aAAD;AACI,MAAA,EAAE,EAAE;AACAe,QAAAA,QAAQ,EAAE,SADV;AAEAC,QAAAA,MAAM,EAAEH,IAAI,CAACC,EAAL,KAAY,cAAZ,GACD,GAAEnB,QAAQ,CAACsB,WAAY,IAAGJ,IAAI,CAACC,EAAG,EADjC,GAEF;AAJN,OADR;AAOI,MAAA,QAAQ,EAAE,MAAMJ,SAAS,CAACG,IAAI,CAACC,EAAN,CAP7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OASKH,CAAC,CAACE,IAAI,CAACK,IAAN,CATN,CAJJ,CADJ;AAkBH,GAnBD,CAFR,CAbZ,CADJ;AAuDH,CAnFM","sourcesContent":["import React from 'react'\nimport {Col, Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {searchLink} from '../../../data'\nimport {URL_KEYS} from '../../../Constants'\nimport {useTranslation} from 'react-i18next'\nimport {$appModel} from '../../../Models/app'\nimport {INFO_MAT} from '../../../Constants/app'\nimport {useHomeSearch} from '../../../Hooks/home'\nimport {scrollTop} from '../../../utils/scroll-top'\nimport {IconBox} from '../../../UIComponents/GlobalStyles'\nimport {SearchInput, SearchInputForm, SearchNavLink, SearchWrapper} from '../atoms'\nimport {SearchSvg} from '../../../Icons/Search'\n\n\nexport const Header = ({setOpenSearch}) => {\n    const {$device} = useStore($appModel)\n    const {getActive} = useHomeSearch()\n    const {t} = useTranslation()\n    \n    // const handleClick = useCallback((item) => {\n    //     const url = []\n    //\n    //     if (!searchType) {\n    //         if (item.has_subs) {\n    //             url.push(`${URL_KEYS.CATEGORY}=${item.slug}`)\n    //         } else {\n    //             url.push(`${URL_KEYS.CATEGORY}=${item.slug}`)\n    //         }\n    //     } else if (searchType === URL_VALUES.OFFERINGS) {\n    //         url.push(`${URL_KEYS.SEARCH_TYPE}=${searchType}`)\n    //         if (item.has_subs) {\n    //             url.push(`${URL_KEYS.CATEGORY}=${item.id}`)\n    //         }\n    //     }\n    //\n    //     push({\n    //         pathname,\n    //         search: url.join('&')\n    //     })\n    // }, [searchType, push, pathname])\n    \n    \n    return (\n        <SearchWrapper>\n            <SearchInputForm onClick={() => setOpenSearch(true)}>\n                <SearchInput\n                    disabled\n                    type='search'\n                    placeholder={t('what_are_you_looking_for?')}\n                />\n                <IconBox>\n                    <SearchSvg/>\n                </IconBox>\n            </SearchInputForm>\n            {\n                $device && $device !== INFO_MAT && (\n                    <Row gutter={[12, 0]} justify='space-around'>\n                        {\n                            searchLink.map((item) => {\n                                return (\n                                    <Col\n                                        key={item.id}\n                                        onClick={scrollTop}\n                                    >\n                                        <SearchNavLink\n                                            to={{\n                                                pathname: '/search',\n                                                search: item.id !== 'organization'\n                                                    ? `${URL_KEYS.SEARCH_TYPE}=${item.id}`\n                                                    : ''\n                                            }}\n                                            isActive={() => getActive(item.id)}\n                                        >\n                                            {t(item.name)}\n                                        </SearchNavLink>\n                                    </Col>\n                                )\n                            })\n                        }\n                    </Row>\n                )\n            }\n            {/*{*/}\n            {/*    $device && $device !== INFO_MAT && !searchType*/}\n            {/*        ? <OrgCategories*/}\n            {/*            openFilter={openFilter}*/}\n            {/*            handleClick={handleClick}*/}\n            {/*            setOpenFilter={setOpenFilter}*/}\n            {/*        />*/}\n            {/*        : <OfferingCategories*/}\n            {/*            openFilter={openFilter}*/}\n            {/*            handleClick={handleClick}*/}\n            {/*            setOpenFilter={setOpenFilter}*/}\n            {/*        />*/}\n            {/*}*/}\n        </SearchWrapper>\n    )\n}"]},"metadata":{},"sourceType":"module"}