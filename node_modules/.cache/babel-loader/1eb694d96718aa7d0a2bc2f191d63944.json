{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OverlayOfferingGroup/index.jsx\";\nimport React, { useCallback, useState } from 'react';\nimport { OfferGroupWrapper, OfferingGroupSearchForm } from '../style';\nimport { Col, Row, Spin } from 'antd';\nimport { useStore } from 'effector-react';\nimport { OfferingGroupItem } from '../OfferingGroupItem';\nimport { URL_KEYS } from '../../../../Constants';\nimport { useUrlParams } from '../../../../Hooks/app';\nimport { useLocation, useParams } from 'react-router-dom';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { $offeringsModel, orgOfferGroupListMount } from '../../../../Models/offerings-model';\nimport { SearchSvg } from '../../../../Icons/Search';\nimport { useTranslation } from 'react-i18next';\nimport { useOfferingList } from '../../../../Hooks/offerings';\nimport { SkeletonUI } from '../../../../UIComponents/GlobalStyles';\nimport { generateSkeleton } from '../../../../utils/skeleton-utils';\nconst skeleton = generateSkeleton(10);\nexport const OverlayOfferingGroup = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    urlData\n  } = useUrlParams();\n  const {\n    pathname\n  } = useLocation();\n  const {\n    organization\n  } = useParams();\n  const {\n    loadMoreOfferingGroup\n  } = useOfferingList();\n  const [searchText, setSearchText] = useState('');\n  const groupId = urlData[URL_KEYS.OFFERING_GROUP_ID];\n  const {\n    $offeringGroupList: {\n      data,\n      loading,\n      result,\n      forceLoading\n    }\n  } = useStore($offeringsModel);\n  const generateUrl = useCallback(id => {\n    const url = [];\n\n    if (urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]) {\n      url.push(`${URL_KEYS.SPECIALIST_CATEGORY_ID}=${urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]}`);\n    }\n\n    if (urlData[URL_KEYS.SPECIALIST_ID]) {\n      url.push(`${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`);\n    }\n\n    if (!groupId || groupId !== String(id)) {\n      url.push(`${URL_KEYS.OFFERING_GROUP_ID}=${id}`);\n    }\n\n    return {\n      pathname,\n      search: url.join('&')\n    };\n  }, [pathname, groupId, urlData]);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    if (searchText.length > 2) {\n      const params = {\n        clear: true,\n        organization: organization,\n        params: {\n          search: searchText\n        }\n      };\n      orgOfferGroupListMount(params);\n    }\n  };\n\n  const onChange = useCallback(value => {\n    if (value.length === 0) {\n      const params = {\n        clear: true,\n        organization\n      };\n      orgOfferGroupListMount(params);\n    }\n\n    setSearchText(value);\n  }, [organization]);\n  return /*#__PURE__*/React.createElement(OfferGroupWrapper, {\n    id: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupSearchForm, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: `${t('search')}...`,\n    value: searchText,\n    onChange: e => onChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SearchSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMoreOfferingGroup,\n    dataLength: (result === null || result === void 0 ? void 0 : result.nextOffset) || 20,\n    hasMore: !loading && !!(result === null || result === void 0 ? void 0 : result.next),\n    loader: /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 25\n      }\n    }),\n    style: {\n      overflow: 'hidden',\n      padding: '50px 0'\n    },\n    scrollableTarget: \"scrollableDiv\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(SkeletonUI, {\n    width: 104,\n    height: 134,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 25\n    }\n  })), data && forceLoading === 2 ? data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    className: \"centered\",\n    key: idx + 1,\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupItem, {\n    name: item.name,\n    imgUrl: item.image,\n    path: generateUrl(item.id),\n    isActive: () => groupId && groupId === String(item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 41\n    }\n  }))) : skeleton.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: idx + 1,\n    span: 8,\n    className: \"centered\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(SkeletonUI, {\n    width: 104,\n    height: 134,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 41\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OverlayOfferingGroup/index.jsx"],"names":["React","useCallback","useState","OfferGroupWrapper","OfferingGroupSearchForm","Col","Row","Spin","useStore","OfferingGroupItem","URL_KEYS","useUrlParams","useLocation","useParams","InfiniteScroll","$offeringsModel","orgOfferGroupListMount","SearchSvg","useTranslation","useOfferingList","SkeletonUI","generateSkeleton","skeleton","OverlayOfferingGroup","t","urlData","pathname","organization","loadMoreOfferingGroup","searchText","setSearchText","groupId","OFFERING_GROUP_ID","$offeringGroupList","data","loading","result","forceLoading","generateUrl","id","url","SPECIALIST_CATEGORY_ID","push","SPECIALIST_ID","String","search","join","handleSubmit","e","preventDefault","length","params","clear","onChange","value","target","nextOffset","next","overflow","padding","map","item","idx","name","image"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react'\nimport {OfferGroupWrapper, OfferingGroupSearchForm} from '../style'\nimport {Col, Row, Spin} from 'antd'\nimport {useStore} from 'effector-react'\nimport {OfferingGroupItem} from '../OfferingGroupItem'\nimport {URL_KEYS} from '../../../../Constants'\nimport {useUrlParams} from '../../../../Hooks/app'\nimport {useLocation, useParams} from 'react-router-dom'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {$offeringsModel, orgOfferGroupListMount} from '../../../../Models/offerings-model'\nimport {SearchSvg} from '../../../../Icons/Search'\nimport {useTranslation} from 'react-i18next'\nimport {useOfferingList} from '../../../../Hooks/offerings'\nimport {SkeletonUI} from '../../../../UIComponents/GlobalStyles'\nimport {generateSkeleton} from '../../../../utils/skeleton-utils'\n\nconst skeleton = generateSkeleton(10)\nexport const OverlayOfferingGroup = () => {\n    const {t} = useTranslation()\n    const {urlData} = useUrlParams()\n    const {pathname} = useLocation()\n    const {organization} = useParams()\n    const {loadMoreOfferingGroup} = useOfferingList()\n    const [searchText, setSearchText] = useState('')\n    const groupId = urlData[URL_KEYS.OFFERING_GROUP_ID]\n    const {$offeringGroupList: {data, loading, result, forceLoading}} = useStore($offeringsModel)\n    \n    const generateUrl = useCallback((id) => {\n        const url = []\n        if (urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]) {\n            url.push(`${URL_KEYS.SPECIALIST_CATEGORY_ID}=${urlData[URL_KEYS.SPECIALIST_CATEGORY_ID]}`)\n        }\n        \n        if (urlData[URL_KEYS.SPECIALIST_ID]) {\n            url.push(`${URL_KEYS.SPECIALIST_ID}=${urlData[URL_KEYS.SPECIALIST_ID]}`)\n        }\n        \n        if (!groupId || groupId !== String(id)) {\n            url.push(`${URL_KEYS.OFFERING_GROUP_ID}=${id}`)\n        }\n        \n        return {\n            pathname,\n            search: url.join('&')\n        }\n    }, [pathname, groupId, urlData])\n    \n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (searchText.length > 2) {\n            const params = {\n                clear: true,\n                organization: organization,\n                params: {\n                    search: searchText\n                }\n            }\n            orgOfferGroupListMount(params)\n        }\n    }\n    \n    const onChange = useCallback((value) => {\n        if (value.length === 0) {\n            const params = {\n                clear: true,\n                organization\n            }\n            orgOfferGroupListMount(params)\n        }\n        setSearchText(value)\n    }, [organization])\n    \n    \n    return (\n        <OfferGroupWrapper id='scrollableDiv'>\n            <OfferingGroupSearchForm onSubmit={handleSubmit}>\n                <input\n                    placeholder={`${t('search')}...`}\n                    value={searchText}\n                    onChange={(e) => onChange(e.target.value)}\n                />\n                <SearchSvg/>\n            </OfferingGroupSearchForm>\n            <InfiniteScroll\n                next={loadMoreOfferingGroup}\n                dataLength={result?.nextOffset || 20}\n                hasMore={!loading && !!result?.next}\n                loader={<Spin/>}\n                style={{overflow: 'hidden', padding: '50px 0'}}\n                scrollableTarget='scrollableDiv'\n            >\n                <Row gutter={[12, 12]}>\n                    <Col span={8}>\n                        <SkeletonUI width={104} height={134}/>\n                    </Col>\n                    {\n                        data && forceLoading === 2\n                            ? (\n                                data.map((item, idx) => (\n                                    <Col\n                                        className='centered'\n                                        key={idx + 1} span={8}\n                                    >\n                                        <OfferingGroupItem\n                                            name={item.name}\n                                            imgUrl={item.image}\n                                            path={generateUrl(item.id)}\n                                            isActive={() => groupId && groupId === String(item.id)}\n                                        />\n                                    </Col>\n                                ))\n                            ) : (\n                                skeleton.map((item, idx) => (\n                                    <Col key={idx + 1} span={8} className='centered'>\n                                        <SkeletonUI width={104} height={134}/>\n                                    </Col>\n                                ))\n                            )\n                    }\n                </Row>\n            </InfiniteScroll>\n        </OfferGroupWrapper>\n    )\n}"]},"metadata":{},"sourceType":"module"}