{"ast":null,"code":"import * as Yup from 'yup';\nimport moment from 'moment';\nimport { useFormik } from 'formik';\nimport { useStore } from 'effector-react';\nimport { $appModel } from '../../Models/app';\nimport { useCallback, useState } from 'react';\nimport payment from '../../Service/payment';\nimport { useTranslation } from 'react-i18next';\nimport { accountCardMount } from '../../Models/payment-model';\nconst defaultValue = {\n  name: '',\n  number: '',\n  expire_date: null\n};\nconst defaultCodeValue = {\n  activate_code: ''\n};\nexport function useCreateAccountCard({\n  onClose,\n  setPayment,\n  payment: paymentState\n}) {\n  const {\n    t\n  } = useTranslation();\n  const [showResend, setShowResend] = useState(false);\n  const [deadline, setDeadline] = useState(Date.now() + 1000 * 60);\n  const {\n    $app: {\n      cardId: creditCardId\n    }\n  } = useStore($appModel);\n  const [cardId, setCardId] = useState(null);\n  const getCard = useCallback(number => {\n    let tmp = '';\n\n    for (let i = 0; i < number.length; i++) {\n      if (i % 4 === 0) {\n        tmp += ' ' + number[i];\n      } else {\n        tmp += number[i];\n      }\n    }\n\n    return tmp;\n  }, []);\n  const validationSchema = Yup.object().shape({\n    number: Yup.string().required(t('required_field')).test('regexTest', t('required_field'), value => {\n      return value && value.match(/^(\\d\\s*){16}$/);\n    }),\n    expire_date: Yup.mixed().required(t('required_field')).test('regexTest', t('required_field'), value => {\n      return value && moment(value).format('MM/YY').replace(/\\//g, '').match(/^(\\d\\s*){4}$/);\n    })\n  });\n  const codeValidationSchema = Yup.object().shape({\n    activate_code: Yup.string().required(t('required_field')).test('regexTest', t('required_field'), value => {\n      return value && value.match(/^(\\d\\s*){6}$/);\n    })\n  });\n  const formik = useFormik({\n    validationSchema,\n    initialValues: { ...defaultValue\n    },\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      const {\n        number,\n        expire_date,\n        name\n      } = values;\n      const data = {\n        name: name,\n        card_number: number.replace(/\\s/g, ''),\n        expire: expire_date.add(moment, 'MM/YY').format('MM/YY')\n      };\n      payment.crateAccountCard(data).then(res => {\n        if (res) {\n          setCardId(res.data.id);\n        }\n      }).catch(error => {\n        console.log(error);\n      }).finally(() => {\n        setSubmitting(false);\n      });\n    }\n\n  });\n  const codeFormik = useFormik({\n    validationSchema: codeValidationSchema,\n    initialValues: { ...defaultCodeValue\n    },\n\n    onSubmit(values, {\n      setSubmitting\n    }) {\n      setSubmitting(true);\n      const {\n        activate_code\n      } = values;\n\n      if (activate_code.replace(/\\s/g, '').length > 0) {\n        const params = {\n          id: cardId ? cardId : creditCardId,\n          data: {\n            code: activate_code.replace(/\\s/g, '')\n          }\n        };\n        console.log(activate_code);\n        payment.verifyAccountCard(params).then(res => {\n          if (res) {\n            onClose();\n            accountCardMount();\n\n            if (paymentState) {\n              setPayment({\n                id: res.data.id,\n                title: `${getCard(res.data.card_number)} ${res.data.name}`,\n                extraId: 3\n              });\n            }\n\n            setCardId(null);\n          }\n        }).catch(error => {\n          console.log(error);\n        }).finally(() => {\n          setSubmitting(false);\n        });\n      }\n    }\n\n  });\n  const disabledButtonCode = useCallback(() => {\n    return codeFormik.isSubmitting || codeFormik.touched.activate_code && !!codeFormik.errors.activate_code;\n  }, [codeFormik]);\n  const disabledButton = useCallback(() => {\n    return formik.isSubmitting || formik.touched.number && !!formik.errors.number || formik.touched.expire_date && !!formik.errors.expire_date;\n  }, [formik]);\n\n  const handleChangeCode = (key, value) => {\n    codeFormik.setFieldValue(key, value);\n  };\n\n  const handleChange = (key, value) => {\n    formik.setFieldValue(key, value);\n  };\n\n  const resendCode = useCallback(() => {\n    payment.resendPayMeCode({\n      id: cardId ? cardId : creditCardId\n    }).then(res => {\n      if (res) {\n        setDeadline(Date.now() + 1000 * 60);\n        setShowResend(false);\n      }\n    });\n  }, [cardId, creditCardId]);\n  return {\n    formik,\n    cardId,\n    deadline,\n    setCardId,\n    showResend,\n    codeFormik,\n    resendCode,\n    handleChange,\n    setShowResend,\n    disabledButton,\n    handleChangeCode,\n    disabledButtonCode\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/account/use-create-account-card.js"],"names":["Yup","moment","useFormik","useStore","$appModel","useCallback","useState","payment","useTranslation","accountCardMount","defaultValue","name","number","expire_date","defaultCodeValue","activate_code","useCreateAccountCard","onClose","setPayment","paymentState","t","showResend","setShowResend","deadline","setDeadline","Date","now","$app","cardId","creditCardId","setCardId","getCard","tmp","i","length","validationSchema","object","shape","string","required","test","value","match","mixed","format","replace","codeValidationSchema","formik","initialValues","onSubmit","values","setSubmitting","data","card_number","expire","add","crateAccountCard","then","res","id","catch","error","console","log","finally","codeFormik","params","code","verifyAccountCard","title","extraId","disabledButtonCode","isSubmitting","touched","errors","disabledButton","handleChangeCode","key","setFieldValue","handleChange","resendCode","resendPayMeCode"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\nimport moment from 'moment'\nimport {useFormik} from 'formik'\nimport {useStore} from 'effector-react'\nimport {$appModel} from '../../Models/app'\nimport {useCallback, useState} from 'react'\nimport payment from '../../Service/payment'\nimport {useTranslation} from 'react-i18next'\nimport {accountCardMount} from '../../Models/payment-model'\n\nconst defaultValue = {\n    name: '',\n    number: '',\n    expire_date: null\n}\n\nconst defaultCodeValue = {\n    activate_code: ''\n}\n\nexport function useCreateAccountCard({onClose, setPayment, payment: paymentState}) {\n    const {t} = useTranslation()\n    const [showResend, setShowResend] = useState(false)\n    const [deadline, setDeadline] = useState(Date.now() + 1000 * 60)\n    const {$app: {cardId: creditCardId}} = useStore($appModel)\n    const [cardId, setCardId] = useState(null)\n    \n    const getCard = useCallback((number) => {\n        let tmp = ''\n        for (let i = 0; i < number.length; i++) {\n            if (i % 4 === 0) {\n                tmp += ' ' + number[i]\n            } else {\n                tmp += number[i]\n            }\n        }\n        return tmp\n    }, [])\n    \n    const validationSchema = Yup.object().shape({\n        number: Yup.string()\n            .required(t('required_field'))\n            .test('regexTest', t('required_field'), (value) => {\n                return value && value.match(/^(\\d\\s*){16}$/)\n            }),\n        expire_date: Yup.mixed()\n            .required(t('required_field'))\n            .test('regexTest', t('required_field'), (value) => {\n                return value && moment(value)\n                    .format('MM/YY')\n                    .replace(/\\//g, '')\n                    .match(/^(\\d\\s*){4}$/)\n            })\n    })\n    \n    const codeValidationSchema = Yup.object().shape({\n        activate_code: Yup.string()\n            .required(t('required_field'))\n            .test('regexTest', t('required_field'), (value) => {\n                return value && value.match(/^(\\d\\s*){6}$/)\n            })\n    })\n    \n    const formik = useFormik({\n        validationSchema,\n        initialValues: {\n            ...defaultValue\n        },\n        \n        onSubmit(values, {setSubmitting}) {\n            setSubmitting(true)\n            const {number, expire_date, name} = values\n            const data = {\n                name: name,\n                card_number: number.replace(/\\s/g, ''),\n                expire: expire_date.add(moment, 'MM/YY').format('MM/YY')\n            }\n            payment.crateAccountCard(data)\n                .then((res) => {\n                    if (res) {\n                        setCardId(res.data.id)\n                    }\n                })\n                .catch(error => {\n                    console.log(error)\n                })\n                .finally(() => {\n                    setSubmitting(false)\n                })\n        }\n    })\n    \n    const codeFormik = useFormik({\n        validationSchema: codeValidationSchema,\n        initialValues: {\n            ...defaultCodeValue\n        },\n        \n        onSubmit(values, {setSubmitting}) {\n            setSubmitting(true)\n            const {activate_code} = values\n            if (activate_code.replace(/\\s/g, '').length > 0) {\n                \n                const params = {\n                    id: cardId ? cardId : creditCardId,\n                    data: {\n                        code: activate_code.replace(/\\s/g, '')\n                    }\n                }\n                \n                console.log(activate_code)\n                payment.verifyAccountCard(params)\n                    .then(res => {\n                        if (res) {\n                            onClose()\n                            accountCardMount()\n                            if (paymentState) {\n                                setPayment({\n                                    id: res.data.id,\n                                    title: `${getCard(res.data.card_number)} ${res.data.name}`,\n                                    extraId: 3\n                                })\n                            }\n                            setCardId(null)\n                        }\n                    })\n                    .catch((error) => {\n                        console.log(error)\n                    })\n                    .finally(() => {\n                        setSubmitting(false)\n                    })\n            }\n        }\n    })\n    \n    const disabledButtonCode = useCallback(() => {\n        return (\n            codeFormik.isSubmitting\n            || (codeFormik.touched.activate_code && !!codeFormik.errors.activate_code)\n        )\n    }, [codeFormik])\n    \n    \n    const disabledButton = useCallback(() => {\n        return (\n            formik.isSubmitting\n            || (formik.touched.number && !!formik.errors.number)\n            || (formik.touched.expire_date && !!formik.errors.expire_date)\n        )\n    }, [formik])\n    \n    const handleChangeCode = (key, value) => {\n        codeFormik.setFieldValue(key, value)\n    }\n    \n    const handleChange = (key, value) => {\n        formik.setFieldValue(key, value)\n    }\n    \n    const resendCode = useCallback(() => {\n        payment.resendPayMeCode({id: cardId ? cardId : creditCardId})\n            .then((res) => {\n                if (res) {\n                    setDeadline(Date.now() + 1000 * 60)\n                    setShowResend(false)\n                }\n            })\n    }, [cardId, creditCardId])\n    \n    return {\n        formik,\n        cardId,\n        deadline,\n        setCardId,\n        showResend,\n        codeFormik,\n        resendCode,\n        handleChange,\n        setShowResend,\n        disabledButton,\n        handleChangeCode,\n        disabledButtonCode\n    }\n}"]},"metadata":{},"sourceType":"module"}