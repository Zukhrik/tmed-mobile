{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/UIComponents/ImageLazyLoad/index.jsx\";\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\nimport 'react-lazy-load-image-component/src/effects/blur.css';\nimport { CircularProgress } from '@material-ui/core';\nimport { httpGet } from '../../Service';\nimport { ImageLazyLoadWrapper } from './style';\nexport const ImageLazyLoad = ({\n  alt,\n  src,\n  dataSrc,\n  height,\n  showProgress,\n  uploadProgress,\n  hideEffect\n}) => {\n  const [loading, setIsLoading] = useState(true); // const [compHeight, setCompHeight] = useState(0)\n\n  const [downloadingProgress, setDownloadingProgress] = useState(undefined); // useEffect(() => {\n  //     if (src) {\n  //         const img = new Image()\n  //         img.onload = function () {\n  //             // console.log(this.width + 'x' + this.height)\n  //             // setCompHeight(this.height)\n  //         }\n  //         img.src = src\n  //     }\n  // }, [src])\n\n  const downloadImage = useCallback(() => {\n    if (src && !dataSrc) {\n      httpGet({\n        url: src.substring(19),\n        headers: {\n          hideSuffix: true\n        },\n        onDownloadProgress: progressEvent => {\n          let percentCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n          setDownloadingProgress(percentCompleted);\n        }\n      }).finally(() => {\n        setDownloadingProgress(null);\n      });\n    }\n  }, [src, dataSrc]);\n  useEffect(() => {\n    if (showProgress) {\n      downloadImage();\n    }\n  }, [downloadImage, showProgress]);\n  return /*#__PURE__*/React.createElement(ImageLazyLoadWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, showProgress && /*#__PURE__*/React.createElement(React.Fragment, null, !uploadProgress ? downloadingProgress !== null && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    variant: \"determinate\",\n    value: downloadingProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 37\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading-progress\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(CircularProgress, {\n    color: \"primary\",\n    variant: \"determinate\",\n    value: uploadProgress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 41\n    }\n  }))), /*#__PURE__*/React.createElement(LazyLoadImage, {\n    alt: alt,\n    src: src,\n    effect: !hideEffect && 'blur',\n    height: loading ? height : undefined,\n    afterLoad: () => setIsLoading(false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/UIComponents/ImageLazyLoad/index.jsx"],"names":["React","useCallback","useEffect","useState","LazyLoadImage","CircularProgress","httpGet","ImageLazyLoadWrapper","ImageLazyLoad","alt","src","dataSrc","height","showProgress","uploadProgress","hideEffect","loading","setIsLoading","downloadingProgress","setDownloadingProgress","undefined","downloadImage","url","substring","headers","hideSuffix","onDownloadProgress","progressEvent","percentCompleted","Math","round","loaded","total","finally"],"mappings":"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","sourcesContent":["import React, {useCallback, useEffect, useState} from 'react'\nimport {LazyLoadImage} from 'react-lazy-load-image-component'\nimport 'react-lazy-load-image-component/src/effects/blur.css'\nimport {CircularProgress} from '@material-ui/core'\nimport {httpGet} from '../../Service'\nimport {ImageLazyLoadWrapper} from './style'\n\nexport const ImageLazyLoad = ({alt, src, dataSrc, height, showProgress, uploadProgress, hideEffect}) => {\n    const [loading, setIsLoading] = useState(true)\n    // const [compHeight, setCompHeight] = useState(0)\n    const [downloadingProgress, setDownloadingProgress] = useState(undefined)\n\n    // useEffect(() => {\n    //     if (src) {\n    //         const img = new Image()\n    //         img.onload = function () {\n    //             // console.log(this.width + 'x' + this.height)\n    //             // setCompHeight(this.height)\n    //         }\n    //         img.src = src\n    //     }\n    // }, [src])\n\n\n    const downloadImage = useCallback(() => {\n        if (src && !dataSrc) {\n            httpGet({\n                url: src.substring(19), headers: {hideSuffix: true}, onDownloadProgress: (progressEvent) => {\n                    let percentCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total)\n                    setDownloadingProgress(percentCompleted)\n                }\n            }).finally(() => {\n                setDownloadingProgress(null)\n            })\n        }\n    }, [src, dataSrc])\n\n    useEffect(() => {\n        if (showProgress) {\n            downloadImage()\n        }\n    }, [downloadImage, showProgress])\n\n    return (\n        <ImageLazyLoadWrapper>\n            {\n                showProgress && (\n                    <>\n                        {\n                            !uploadProgress\n                                ? downloadingProgress !== null && (\n                                <div className='loading-progress'>\n                                    <CircularProgress\n                                        color='primary'\n                                        variant='determinate'\n                                        value={downloadingProgress}\n                                    />\n                                </div>\n                            )\n                                : (\n                                    <div className='loading-progress'>\n                                        <CircularProgress\n                                            color='primary'\n                                            variant='determinate'\n                                            value={uploadProgress}\n                                        />\n                                    </div>\n                                )\n                        }\n                    </>\n                )\n            }\n\n            <LazyLoadImage\n                alt={alt}\n                src={src}\n                effect={!hideEffect && 'blur'}\n                height={loading ? height : undefined}\n                afterLoad={() => setIsLoading(false)}\n            />\n        </ImageLazyLoadWrapper>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}