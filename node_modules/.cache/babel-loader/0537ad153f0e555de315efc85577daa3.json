{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OverlaySpecialists/index.jsx\";\nimport React, { useCallback, useState } from 'react';\nimport { OfferGroupWrapper, OfferingGroupSearchForm, SpecialistNavLink } from '../style';\nimport { SearchSvg } from '../../../../Icons/Search';\nimport { Col, Row, Spin } from 'antd';\nimport { useTranslation } from 'react-i18next';\nimport { useStore } from 'effector-react';\nimport { $orgModel, orgSpecialistsMount } from '../../../../Models/org-model';\nimport { OrgSpecialistCard } from '../../../Cards';\nimport { URL_KEYS } from '../../../../Constants';\nimport { useOrgSpecialistLists, useUrlGenerate } from '../../../../Hooks/org';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { useParams } from 'react-router-dom';\nimport { generateSkeleton } from '../../../../utils/skeleton-utils';\nimport { OfferingGroupItemSkeleton } from '../OfferingGroupItemSkeleton';\nconst skeleton = generateSkeleton(10);\nexport const OverlaySpecialists = () => {\n  const {\n    t\n  } = useTranslation();\n  const {\n    organization\n  } = useParams();\n  const {\n    loadMore\n  } = useOrgSpecialistLists();\n  const {\n    getActive,\n    generateUrl\n  } = useUrlGenerate();\n  const [search, setSearch] = useState('');\n  const {\n    $orgSpecialistsList: {\n      data,\n      result,\n      loading,\n      forceLoading\n    }\n  } = useStore($orgModel);\n  const handleSubmit = useCallback(e => {\n    e.preventDefault();\n\n    if (search.length > 2) {\n      const params = {\n        clear: true,\n        organization,\n        params: {\n          search\n        }\n      };\n      orgSpecialistsMount(params);\n    }\n  }, [search, organization]);\n  const onChange = useCallback(value => {\n    if (value.length === 0) {\n      const params = {\n        clear: true,\n        organization\n      };\n      orgSpecialistsMount(params);\n    }\n\n    setSearch(value);\n  }, [organization]);\n  return /*#__PURE__*/React.createElement(OfferGroupWrapper, {\n    id: \"scrollableSpec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupSearchForm, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    placeholder: `${t('search')}...`,\n    value: search,\n    onChange: e => onChange(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(SearchSvg, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(InfiniteScroll, {\n    next: loadMore,\n    dataLength: result.nextOffset || 20,\n    hasMore: !loading && !!(result === null || result === void 0 ? void 0 : result.next),\n    loader: /*#__PURE__*/React.createElement(Spin, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 25\n      }\n    }),\n    style: {\n      overflow: 'hidden',\n      padding: '50px 0'\n    },\n    scrollableTarget: \"scrollableSpec\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [12, 12],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }, data && forceLoading === 2 ? data.map((item, idx) => /*#__PURE__*/React.createElement(Col, {\n    className: \"centered\",\n    key: `${idx + 1}`,\n    xs: 8,\n    sm: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(SpecialistNavLink, {\n    key: `${idx + 1}`,\n    to: generateUrl(URL_KEYS.SPECIALIST_ID, item.id),\n    isActive: () => getActive(URL_KEYS.SPECIALIST_ID, item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(OrgSpecialistCard, {\n    name: item.user.full_name,\n    src: item.user.avatar,\n    category: item.job.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 45\n    }\n  })))) : skeleton.map((ite, idx) => /*#__PURE__*/React.createElement(Col, {\n    key: idx + 1,\n    xs: 8,\n    sm: 6,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(OfferingGroupItemSkeleton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 41\n    }\n  }))))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Components/Offering/OrgOfferings/OverlaySpecialists/index.jsx"],"names":["React","useCallback","useState","OfferGroupWrapper","OfferingGroupSearchForm","SpecialistNavLink","SearchSvg","Col","Row","Spin","useTranslation","useStore","$orgModel","orgSpecialistsMount","OrgSpecialistCard","URL_KEYS","useOrgSpecialistLists","useUrlGenerate","InfiniteScroll","useParams","generateSkeleton","OfferingGroupItemSkeleton","skeleton","OverlaySpecialists","t","organization","loadMore","getActive","generateUrl","search","setSearch","$orgSpecialistsList","data","result","loading","forceLoading","handleSubmit","e","preventDefault","length","params","clear","onChange","value","target","nextOffset","next","overflow","padding","map","item","idx","SPECIALIST_ID","id","user","full_name","avatar","job","name","ite"],"mappings":"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","sourcesContent":["import React, {useCallback, useState} from 'react'\nimport {OfferGroupWrapper, OfferingGroupSearchForm, SpecialistNavLink} from '../style'\nimport {SearchSvg} from '../../../../Icons/Search'\nimport {Col, Row, Spin} from 'antd'\nimport {useTranslation} from 'react-i18next'\nimport {useStore} from 'effector-react'\nimport {$orgModel, orgSpecialistsMount} from '../../../../Models/org-model'\nimport {OrgSpecialistCard} from '../../../Cards'\nimport {URL_KEYS} from '../../../../Constants'\nimport {useOrgSpecialistLists, useUrlGenerate} from '../../../../Hooks/org'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport {useParams} from 'react-router-dom'\nimport {generateSkeleton} from '../../../../utils/skeleton-utils'\nimport {OfferingGroupItemSkeleton} from '../OfferingGroupItemSkeleton'\n\nconst skeleton = generateSkeleton(10)\nexport const OverlaySpecialists = () => {\n    const {t} = useTranslation()\n    const {organization} = useParams()\n    const {loadMore} = useOrgSpecialistLists()\n    const {getActive, generateUrl} = useUrlGenerate()\n    const [search, setSearch] = useState('')\n    const {$orgSpecialistsList: {data, result, loading, forceLoading}} = useStore($orgModel)\n    \n    const handleSubmit = useCallback((e) => {\n        e.preventDefault()\n        if (search.length > 2) {\n            const params = {\n                clear: true,\n                organization,\n                params: {\n                    search\n                }\n            }\n            orgSpecialistsMount(params)\n        }\n    }, [search, organization])\n    \n    const onChange = useCallback((value) => {\n        if (value.length === 0) {\n            const params = {\n                clear: true,\n                organization\n            }\n            orgSpecialistsMount(params)\n        }\n        setSearch(value)\n    }, [organization])\n    \n    return (\n        <OfferGroupWrapper id='scrollableSpec'>\n            <OfferingGroupSearchForm onSubmit={handleSubmit}>\n                <input\n                    placeholder={`${t('search')}...`}\n                    value={search}\n                    onChange={(e) => onChange(e.target.value)}\n                />\n                <SearchSvg/>\n            </OfferingGroupSearchForm>\n            <InfiniteScroll\n                next={loadMore}\n                dataLength={result.nextOffset || 20}\n                hasMore={!loading && !!result?.next}\n                loader={<Spin/>}\n                style={{overflow: 'hidden', padding: '50px 0'}}\n                scrollableTarget='scrollableSpec'\n            >\n                <Row gutter={[12, 12]}>\n                    {\n                        data && forceLoading === 2\n                            ? (\n                                data.map((item, idx) => (\n                                    <Col\n                                        className='centered'\n                                        key={`${idx + 1}`}\n                                        xs={8} sm={6} md={4}\n                                    >\n                                        <SpecialistNavLink\n                                            key={`${idx + 1}`}\n                                            to={generateUrl(URL_KEYS.SPECIALIST_ID, item.id)}\n                                            isActive={() => getActive(URL_KEYS.SPECIALIST_ID, item.id)}\n                                        >\n                                            <OrgSpecialistCard\n                                                name={item.user.full_name}\n                                                src={item.user.avatar}\n                                                category={item.job.name}\n                                            />\n                                        </SpecialistNavLink>\n                                    </Col>\n                                ))\n                            ) : (\n                                skeleton.map((ite, idx) => (\n                                    <Col key={idx + 1} xs={8} sm={6} md={4}>\n                                        <OfferingGroupItemSkeleton/>\n                                    </Col>\n                                ))\n                            )\n                    }\n                </Row>\n            </InfiniteScroll>\n        </OfferGroupWrapper>\n    )\n}"]},"metadata":{},"sourceType":"module"}