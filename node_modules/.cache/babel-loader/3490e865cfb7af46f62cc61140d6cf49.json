{"ast":null,"code":"import { combine, createStore } from 'effector';\nimport { fetchAccountAvatars, fetchAccountCoupons, fetchAccountInfo, fetchAccountPData, fetchAccountVerify, fetchUpdateAccount } from './effects';\nimport Cookies from 'js-cookie';\nimport jwtDecode from 'jwt-decode';\nimport { getAccountInfo, getLinkedUsers, getOrganizations, getSpecialisms, getSpecOrganizations, getUpdated } from './helper';\nimport { PROFILE_TYPE } from '../../Constants';\nimport { getCurrentAccount } from './events';\nconst $accountInfo = createStore({\n  loading: false,\n  data: null,\n  error: false\n}).on(fetchAccountInfo.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAccountInfo.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {}\n})).on(fetchAccountInfo.done, (state, res) => ({ ...state,\n  data: res.result.data,\n  error: false\n}));\nconst $accountAvatars = createStore({\n  loading: false,\n  result: {},\n  data: [],\n  error: false\n}).on(fetchAccountAvatars.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAccountAvatars.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: [],\n  result: {}\n})).on(fetchAccountAvatars.done, (state, res) => ({ ...state,\n  data: res.result.data.results,\n  error: false\n}));\nconst $accountPData = createStore({\n  loading: false,\n  data: null,\n  error: false\n}).on(fetchAccountPData.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAccountPData.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: []\n})).on(fetchAccountPData.done, (state, res) => ({ ...state,\n  data: res.result.data,\n  error: false\n}));\nconst $accountVideoVerify = createStore({\n  loading: false,\n  data: {},\n  error: false\n}).on(fetchAccountVerify.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAccountVerify.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: {}\n})).on(fetchAccountVerify.done, (state, {\n  result\n}) => {\n  return { ...state,\n    data: result\n  };\n});\nconst currentProfile = localStorage.getItem('currentProfile');\nconst $profiles = createStore({\n  currentProfile: currentProfile ? JSON.parse(currentProfile) : null,\n  linkedUsers: [],\n  organizations: [],\n  accountInfo: {},\n  specialisms: []\n}).on(fetchAccountInfo.done, (state, {\n  result: {\n    data\n  },\n  params\n}) => {\n  const slug_name = jwtDecode(Cookies.get('token')).username;\n  const accountInfo = getAccountInfo(data, slug_name);\n  const linkedUsers = [{ ...accountInfo\n  }, ...getLinkedUsers(data.linked_users)].sort((a, b) => {\n    return a.slug_name.localeCompare(b.slug_name);\n  });\n  const specialisms = getSpecialisms(data.specialisms, slug_name);\n  const organizations = [...getOrganizations(data.organizations, data), ...getSpecOrganizations(data.specialisms, data)];\n\n  if (params && params.actions) {\n    params.actions();\n  }\n\n  const info = {\n    category: data.main_cat,\n    lang: data.user_lang,\n    region: data.region,\n    status: data.status,\n    avatar: data.avatar,\n    currency: data.currency || null\n  };\n\n  if (params && params.actions) {\n    params.actions();\n  }\n\n  let currentAccount;\n\n  if (state.currentProfile) {\n    if (state.currentProfile.type === PROFILE_TYPE.USER) {\n      currentAccount = { ...state.currentProfile,\n        ...info\n      };\n    } else {\n      const organization = organizations.find(item => item.slug_name === state.currentProfile.slug_name);\n\n      if (organization) {\n        currentAccount = { ...state.currentProfile,\n          status: organization.status,\n          category: organization.category,\n          region: organization.region\n        };\n      } else {\n        currentAccount = state.currentProfile;\n      }\n    }\n  } else {\n    currentAccount = accountInfo;\n  }\n\n  return { ...state,\n    accountInfo,\n    linkedUsers,\n    specialisms,\n    organizations,\n    currentProfile: currentAccount\n  };\n}).on(getCurrentAccount, (state, payloads = null) => {\n  let currentAccount = null;\n  const {\n    organizations,\n    linkedUsers\n  } = state;\n\n  if (payloads) {\n    const {\n      type,\n      slug_name\n    } = payloads;\n\n    if (type === PROFILE_TYPE.ORGANIZATION) {\n      currentAccount = organizations.find(item => item.slug_name === slug_name);\n    }\n\n    if (type === PROFILE_TYPE.USER) {\n      currentAccount = linkedUsers.find(item => item.slug_name === slug_name);\n    }\n  }\n\n  return { ...state,\n    currentProfile: currentAccount\n  };\n}).on(fetchUpdateAccount.done, (state, {\n  result: {\n    data: result\n  },\n  params\n}) => {\n  if (params && params.actions) {\n    params.actions();\n  }\n\n  const {\n    currentProfile,\n    linkedUsers,\n    accountInfo\n  } = state;\n  const data = {\n    category: result.main_cat,\n    lang: result.user_lang,\n    region: result.region,\n    status: result.status,\n    currency: result.currency || null\n  };\n  return { ...state,\n    accountInfo: { ...accountInfo,\n      ...data\n    },\n    currentProfile: { ...currentProfile,\n      ...data\n    },\n    linkedUsers: getUpdated(linkedUsers, currentProfile.slug_name, data)\n  };\n}).on(fetchUpdateAccount.fail, (state, {\n  params\n}) => {\n  if (params && params.actions) {\n    params.actions(true);\n  }\n\n  return { ...state\n  };\n});\n$profiles.watch(state => {\n  const {\n    currentProfile\n  } = state;\n\n  if (currentProfile && Object.values(currentProfile).length > 0) {\n    localStorage.setItem('currentProfile', JSON.stringify(currentProfile));\n  } else {\n    localStorage.removeItem('currentProfile');\n  }\n});\nconst $accountCoupons = createStore({\n  loading: false,\n  data: [],\n  error: false\n}).on(fetchAccountCoupons.pending, (state, loading) => ({ ...state,\n  loading\n})).on(fetchAccountCoupons.fail, (state, {\n  error\n}) => ({ ...state,\n  error,\n  data: []\n})).on(fetchAccountCoupons.done, (state, {\n  result\n}) => {\n  return { ...state,\n    data: result.data\n  };\n});\nexport const $accountModel = combine({\n  $profiles,\n  $accountInfo,\n  $accountPData,\n  $accountAvatars,\n  $accountCoupons,\n  $accountVideoVerify\n});","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Models/account-model/stores.js"],"names":["combine","createStore","fetchAccountAvatars","fetchAccountCoupons","fetchAccountInfo","fetchAccountPData","fetchAccountVerify","fetchUpdateAccount","Cookies","jwtDecode","getAccountInfo","getLinkedUsers","getOrganizations","getSpecialisms","getSpecOrganizations","getUpdated","PROFILE_TYPE","getCurrentAccount","$accountInfo","loading","data","error","on","pending","state","fail","done","res","result","$accountAvatars","results","$accountPData","$accountVideoVerify","currentProfile","localStorage","getItem","$profiles","JSON","parse","linkedUsers","organizations","accountInfo","specialisms","params","slug_name","get","username","linked_users","sort","a","b","localeCompare","actions","info","category","main_cat","lang","user_lang","region","status","avatar","currency","currentAccount","type","USER","organization","find","item","payloads","ORGANIZATION","watch","Object","values","length","setItem","stringify","removeItem","$accountCoupons","$accountModel"],"mappings":"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","sourcesContent":["import {combine, createStore} from 'effector'\r\nimport {\r\n    fetchAccountAvatars,\r\n    fetchAccountCoupons,\r\n    fetchAccountInfo,\r\n    fetchAccountPData,\r\n    fetchAccountVerify,\r\n    fetchUpdateAccount\r\n} from './effects'\r\nimport Cookies from 'js-cookie'\r\nimport jwtDecode from 'jwt-decode'\r\nimport {\r\n    getAccountInfo,\r\n    getLinkedUsers,\r\n    getOrganizations,\r\n    getSpecialisms,\r\n    getSpecOrganizations,\r\n    getUpdated\r\n} from './helper'\r\nimport {PROFILE_TYPE} from '../../Constants'\r\nimport {getCurrentAccount} from './events'\r\n\r\n\r\nconst $accountInfo = createStore({loading: false, data: null, error: false})\r\n    .on(fetchAccountInfo.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAccountInfo.fail, (state, {error}) => ({\r\n        ...state, error, data: {}\r\n    }))\r\n    .on(fetchAccountInfo.done, (state, res) => ({\r\n        ...state, data: res.result.data, error: false\r\n    }))\r\n\r\nconst $accountAvatars = createStore({loading: false, result: {}, data: [], error: false})\r\n    .on(fetchAccountAvatars.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAccountAvatars.fail, (state, {error}) => ({\r\n        ...state, error, data: [], result: {}\r\n    }))\r\n    .on(fetchAccountAvatars.done, (state, res) => ({\r\n        ...state, data: res.result.data.results, error: false\r\n    }))\r\n\r\nconst $accountPData = createStore({loading: false, data: null, error: false})\r\n    .on(fetchAccountPData.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAccountPData.fail, (state, {error}) => ({\r\n        ...state, error, data: []\r\n    }))\r\n    .on(fetchAccountPData.done, (state, res) => ({\r\n        ...state, data: res.result.data, error: false\r\n    }))\r\n\r\nconst $accountVideoVerify = createStore({loading: false, data: {}, error: false})\r\n    .on(fetchAccountVerify.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAccountVerify.fail, (state, {error}) => ({\r\n        ...state, error, data: {}\r\n    }))\r\n    .on(fetchAccountVerify.done, (state, {result}) => {\r\n        return {\r\n            ...state,\r\n            data: result\r\n        }\r\n    })\r\n\r\nconst currentProfile = localStorage.getItem('currentProfile')\r\n\r\nconst $profiles = createStore({\r\n    currentProfile: currentProfile ? JSON.parse(currentProfile) : null,\r\n    linkedUsers: [],\r\n    organizations: [],\r\n    accountInfo: {},\r\n    specialisms: []\r\n})\r\n    .on(fetchAccountInfo.done, (state, {result: {data}, params}) => {\r\n        const slug_name = jwtDecode(Cookies.get('token')).username\r\n        const accountInfo = getAccountInfo(data, slug_name)\r\n        const linkedUsers = [{...accountInfo}, ...getLinkedUsers(data.linked_users)].sort((a, b) => {\r\n            return a.slug_name.localeCompare(b.slug_name)\r\n        })\r\n        const specialisms = getSpecialisms(data.specialisms, slug_name)\r\n        const organizations = [\r\n            ...getOrganizations(data.organizations, data),\r\n            ...getSpecOrganizations(data.specialisms, data)\r\n        ]\r\n        \r\n        if (params && params.actions) {\r\n            params.actions()\r\n        }\r\n        \r\n        const info = {\r\n            category: data.main_cat,\r\n            lang: data.user_lang,\r\n            region: data.region,\r\n            status: data.status,\r\n            avatar: data.avatar,\r\n            currency: data.currency || null\r\n        }\r\n        \r\n        if (params && params.actions) {\r\n            params.actions()\r\n        }\r\n        \r\n        let currentAccount\r\n        \r\n        if (state.currentProfile) {\r\n            if (state.currentProfile.type === PROFILE_TYPE.USER) {\r\n                currentAccount = {...state.currentProfile, ...info}\r\n            } else {\r\n                \r\n                const organization = organizations.find(item => item.slug_name === state.currentProfile.slug_name)\r\n                \r\n                if (organization) {\r\n                    currentAccount = {\r\n                        ...state.currentProfile,\r\n                        status: organization.status,\r\n                        category: organization.category,\r\n                        region: organization.region\r\n                    }\r\n                } else {\r\n                    currentAccount = state.currentProfile\r\n                }\r\n            }\r\n        } else {\r\n            currentAccount = accountInfo\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            accountInfo,\r\n            linkedUsers,\r\n            specialisms,\r\n            organizations,\r\n            currentProfile: currentAccount\r\n        }\r\n    })\r\n    .on(getCurrentAccount, (state, payloads = null) => {\r\n        let currentAccount = null\r\n        const {organizations, linkedUsers} = state\r\n        \r\n        if (payloads) {\r\n            const {type, slug_name} = payloads\r\n            if (type === PROFILE_TYPE.ORGANIZATION) {\r\n                currentAccount = organizations.find(item => item.slug_name === slug_name)\r\n            }\r\n            \r\n            if (type === PROFILE_TYPE.USER) {\r\n                currentAccount = linkedUsers.find(item => item.slug_name === slug_name)\r\n            }\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            currentProfile: currentAccount\r\n        }\r\n    })\r\n    .on(fetchUpdateAccount.done, (state, {result: {data: result}, params}) => {\r\n        if (params && params.actions) {\r\n            params.actions()\r\n        }\r\n        const {currentProfile, linkedUsers, accountInfo} = state\r\n        const data = {\r\n            category: result.main_cat,\r\n            lang: result.user_lang,\r\n            region: result.region,\r\n            status: result.status,\r\n            currency: result.currency || null\r\n        }\r\n        \r\n        return {\r\n            ...state,\r\n            accountInfo: {...accountInfo, ...data},\r\n            currentProfile: {...currentProfile, ...data},\r\n            linkedUsers: getUpdated(linkedUsers, currentProfile.slug_name, data)\r\n        }\r\n    })\r\n    .on(fetchUpdateAccount.fail, (state, {params}) => {\r\n        if (params && params.actions) {\r\n            params.actions(true)\r\n        }\r\n        return {\r\n            ...state\r\n        }\r\n    })\r\n\r\n$profiles.watch((state) => {\r\n    const {currentProfile} = state\r\n    if (currentProfile && Object.values(currentProfile).length > 0) {\r\n        localStorage.setItem('currentProfile', JSON.stringify(currentProfile))\r\n    } else {\r\n        localStorage.removeItem('currentProfile')\r\n    }\r\n})\r\n\r\n\r\nconst $accountCoupons = createStore({loading: false, data: [], error: false})\r\n    .on(fetchAccountCoupons.pending, (state, loading) => ({...state, loading}))\r\n    .on(fetchAccountCoupons.fail, (state, {error}) => ({...state, error, data: []}))\r\n    .on(fetchAccountCoupons.done, (state, {result}) => {\r\n        \r\n        return {...state, data: result.data}\r\n    })\r\n\r\n\r\nexport const $accountModel = combine({\r\n    $profiles,\r\n    $accountInfo,\r\n    $accountPData,\r\n    $accountAvatars,\r\n    $accountCoupons,\r\n    $accountVideoVerify\r\n})"]},"metadata":{},"sourceType":"module"}