{"ast":null,"code":"import { useStore } from 'effector-react';\nimport { useParams } from 'react-router-dom';\nimport { useCallback, useEffect, useState } from 'react';\nimport { $streamModel } from '../../Models/stream-model';\nexport function useCurrentAnons() {\n  const {\n    slug_name\n  } = useParams();\n  const [currentStream, setCurrentStream] = useState(null);\n  const {\n    $channelStreamScheduleList: {\n      data: schedule\n    }\n  } = useStore($streamModel);\n  const getCurrentAnons = useCallback(() => {\n    let tmp = {};\n\n    if (slug_name && schedule[slug_name]) {\n      const data = schedule[slug_name];\n      const curTime = new Date().getTime();\n\n      for (let i = 0; i < data.length; i++) {\n        const prevTime = new Date(data[i].date).getTime();\n        let nextTime = null;\n\n        if (data[i + 1]) {\n          nextTime = new Date(data[i + 1].date).getTime();\n\n          if (curTime >= prevTime && curTime < nextTime) {\n            tmp = data[i];\n            break;\n          }\n        } else {\n          tmp = data[i];\n        }\n      }\n\n      setCurrentStream(tmp);\n    } else {\n      setCurrentStream(null);\n    }\n  }, [slug_name, schedule]);\n  useEffect(() => {\n    getCurrentAnons();\n  }, [getCurrentAnons]);\n  return {\n    currentStream\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/stream/use-current-anons.js"],"names":["useStore","useParams","useCallback","useEffect","useState","$streamModel","useCurrentAnons","slug_name","currentStream","setCurrentStream","$channelStreamScheduleList","data","schedule","getCurrentAnons","tmp","curTime","Date","getTime","i","length","prevTime","date","nextTime"],"mappings":"AAAA,SAAQA,QAAR,QAAuB,gBAAvB;AACA,SAAQC,SAAR,QAAwB,kBAAxB;AACA,SAAQC,WAAR,EAAqBC,SAArB,EAAgCC,QAAhC,QAA+C,OAA/C;AACA,SAAQC,YAAR,QAA2B,2BAA3B;AAEA,OAAO,SAASC,eAAT,GAA2B;AAC9B,QAAM;AAACC,IAAAA;AAAD,MAAcN,SAAS,EAA7B;AACA,QAAM,CAACO,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM;AAACM,IAAAA,0BAA0B,EAAE;AAACC,MAAAA,IAAI,EAAEC;AAAP;AAA7B,MAAiDZ,QAAQ,CAACK,YAAD,CAA/D;AAEA,QAAMQ,eAAe,GAAGX,WAAW,CAAC,MAAM;AACtC,QAAIY,GAAG,GAAG,EAAV;;AACA,QAAIP,SAAS,IAAIK,QAAQ,CAACL,SAAD,CAAzB,EAAsC;AAClC,YAAMI,IAAI,GAAGC,QAAQ,CAACL,SAAD,CAArB;AACA,YAAMQ,OAAO,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAhB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAAI,CAACQ,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AAClC,cAAME,QAAQ,GAAG,IAAIJ,IAAJ,CAASL,IAAI,CAACO,CAAD,CAAJ,CAAQG,IAAjB,EAAuBJ,OAAvB,EAAjB;AACA,YAAIK,QAAQ,GAAG,IAAf;;AACA,YAAIX,IAAI,CAACO,CAAC,GAAG,CAAL,CAAR,EAAiB;AACbI,UAAAA,QAAQ,GAAG,IAAIN,IAAJ,CAASL,IAAI,CAACO,CAAC,GAAG,CAAL,CAAJ,CAAYG,IAArB,EAA2BJ,OAA3B,EAAX;;AACA,cAAIF,OAAO,IAAIK,QAAX,IAAuBL,OAAO,GAAGO,QAArC,EAA+C;AAC3CR,YAAAA,GAAG,GAAGH,IAAI,CAACO,CAAD,CAAV;AACA;AACH;AACJ,SAND,MAMO;AACHJ,UAAAA,GAAG,GAAGH,IAAI,CAACO,CAAD,CAAV;AACH;AACJ;;AACDT,MAAAA,gBAAgB,CAACK,GAAD,CAAhB;AACH,KAjBD,MAiBO;AACHL,MAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACH;AACJ,GAtBkC,EAsBhC,CAACF,SAAD,EAAYK,QAAZ,CAtBgC,CAAnC;AAwBAT,EAAAA,SAAS,CAAC,MAAM;AACZU,IAAAA,eAAe;AAClB,GAFQ,EAEN,CAACA,eAAD,CAFM,CAAT;AAIA,SAAO;AAACL,IAAAA;AAAD,GAAP;AACH","sourcesContent":["import {useStore} from 'effector-react'\nimport {useParams} from 'react-router-dom'\nimport {useCallback, useEffect, useState} from 'react'\nimport {$streamModel} from '../../Models/stream-model'\n\nexport function useCurrentAnons() {\n    const {slug_name} = useParams()\n    const [currentStream, setCurrentStream] = useState(null)\n    const {$channelStreamScheduleList: {data: schedule}} = useStore($streamModel)\n    \n    const getCurrentAnons = useCallback(() => {\n        let tmp = {}\n        if (slug_name && schedule[slug_name]) {\n            const data = schedule[slug_name]\n            const curTime = new Date().getTime()\n            for (let i = 0; i < data.length; i++) {\n                const prevTime = new Date(data[i].date).getTime()\n                let nextTime = null\n                if (data[i + 1]) {\n                    nextTime = new Date(data[i + 1].date).getTime()\n                    if (curTime >= prevTime && curTime < nextTime) {\n                        tmp = data[i]\n                        break\n                    }\n                } else {\n                    tmp = data[i]\n                }\n            }\n            setCurrentStream(tmp)\n        } else {\n            setCurrentStream(null)\n        }\n    }, [slug_name, schedule])\n    \n    useEffect(() => {\n        getCurrentAnons()\n    }, [getCurrentAnons])\n    \n    return {currentStream}\n}"]},"metadata":{},"sourceType":"module"}