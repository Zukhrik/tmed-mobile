{"ast":null,"code":"import _objectSpread from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as Yup from'yup';import{useFormik}from'formik';import{useStore}from'effector-react';import{useEffect,useState}from'react';import{$accountModel,accountAvatarsMount}from'../../Models/account-model';var defaultValue={business_ava:undefined,passport_series:'',passport_number:'',passport_scan:''};export function useVerificationLegalData(){var validationSchema=Yup.object().shape();var _useState=useState(false),_useState2=_slicedToArray(_useState,2),mounted=_useState2[0],setMounted=_useState2[1];var _useState3=useState(defaultValue),_useState4=_slicedToArray(_useState3,2),initialValues=_useState4[0],setInitialValues=_useState4[1];var _useStore=useStore($accountModel),$accountAvatars=_useStore.$accountAvatars,$accountPDataMount=_useStore.$accountPDataMount;var formik=useFormik({initialValues:initialValues,validationSchema:validationSchema,enableReinitialize:true});var getData=function getData(value){return value||'';};useEffect(function(){var avatarsData=$accountAvatars.data;var accountPDataMount=$accountPDataMount.data;if(!!$accountPDataMount&&!!avatarsData&&!mounted){var business_ava=avatarsData.length>0&&avatarsData.find(function(item){return item.business_ava;});setInitialValues(_objectSpread(_objectSpread({},defaultValue),{},{business_ava:business_ava?{stringUrl:business_ava.image,file:null}:false,passport_number:getData(accountPDataMount&&accountPDataMount.passport_number),passport_series:getData(accountPDataMount&&accountPDataMount.passport_series)}));setMounted(true);}},[$accountAvatars,$accountPDataMount,mounted]);useEffect(function(){accountAvatarsMount();},[]);return{formik:formik};}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/account/use-verification-legal-data.js"],"names":["Yup","useFormik","useStore","useEffect","useState","$accountModel","accountAvatarsMount","defaultValue","business_ava","undefined","passport_series","passport_number","passport_scan","useVerificationLegalData","validationSchema","object","shape","mounted","setMounted","initialValues","setInitialValues","$accountAvatars","$accountPDataMount","formik","enableReinitialize","getData","value","avatarsData","data","accountPDataMount","length","find","item","stringUrl","image","file"],"mappings":"yUAAA,MAAO,GAAKA,CAAAA,GAAZ,KAAqB,KAArB,CACA,OAAQC,SAAR,KAAwB,QAAxB,CACA,OAAQC,QAAR,KAAuB,gBAAvB,CACA,OAAQC,SAAR,CAAmBC,QAAnB,KAAkC,OAAlC,CACA,OAAQC,aAAR,CAAuBC,mBAAvB,KAAiD,4BAAjD,CAEA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,YAAY,CAAEC,SADG,CAEjBC,eAAe,CAAE,EAFA,CAGjBC,eAAe,CAAE,EAHA,CAIjBC,aAAa,CAAE,EAJE,CAArB,CAOA,MAAO,SAASC,CAAAA,wBAAT,EAAoC,CACvC,GAAMC,CAAAA,gBAAgB,CAAGd,GAAG,CAACe,MAAJ,GAAaC,KAAb,EAAzB,CACA,cAA8BZ,QAAQ,CAAC,KAAD,CAAtC,wCAAOa,OAAP,eAAgBC,UAAhB,eACA,eAA0Cd,QAAQ,CAACG,YAAD,CAAlD,yCAAOY,aAAP,eAAsBC,gBAAtB,eACA,cAA8ClB,QAAQ,CAACG,aAAD,CAAtD,CAAOgB,eAAP,WAAOA,eAAP,CAAwBC,kBAAxB,WAAwBA,kBAAxB,CAEA,GAAMC,CAAAA,MAAM,CAAGtB,SAAS,CAAC,CACrBkB,aAAa,CAAbA,aADqB,CAErBL,gBAAgB,CAAhBA,gBAFqB,CAGrBU,kBAAkB,CAAE,IAHC,CAAD,CAAxB,CAMA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAW,CACvB,MAAOA,CAAAA,KAAK,EAAI,EAAhB,CACH,CAFD,CAIAvB,SAAS,CAAC,UAAM,CACZ,GAAMwB,CAAAA,WAAW,CAAGN,eAAe,CAACO,IAApC,CACA,GAAMC,CAAAA,iBAAiB,CAAGP,kBAAkB,CAACM,IAA7C,CAEA,GAAI,CAAC,CAACN,kBAAF,EAAwB,CAAC,CAACK,WAA1B,EAAyC,CAACV,OAA9C,CAAuD,CACnD,GAAMT,CAAAA,YAAY,CAAGmB,WAAW,CAACG,MAAZ,CAAqB,CAArB,EAA0BH,WAAW,CAACI,IAAZ,CAAiB,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACxB,YAAT,EAArB,CAA/C,CAEAY,gBAAgB,gCACTb,YADS,MAEZC,YAAY,CAAEA,YAAY,CAAG,CAACyB,SAAS,CAAEzB,YAAY,CAAC0B,KAAzB,CAAgCC,IAAI,CAAE,IAAtC,CAAH,CAAiD,KAF/D,CAGZxB,eAAe,CAAEc,OAAO,CAACI,iBAAiB,EAAIA,iBAAiB,CAAClB,eAAxC,CAHZ,CAIZD,eAAe,CAAEe,OAAO,CAACI,iBAAiB,EAAIA,iBAAiB,CAACnB,eAAxC,CAJZ,GAAhB,CAMAQ,UAAU,CAAC,IAAD,CAAV,CACH,CACJ,CAfQ,CAeN,CAACG,eAAD,CAAkBC,kBAAlB,CAAsCL,OAAtC,CAfM,CAAT,CAiBAd,SAAS,CAAC,UAAM,CACZG,mBAAmB,GACtB,CAFQ,CAEN,EAFM,CAAT,CAIA,MAAO,CACHiB,MAAM,CAANA,MADG,CAAP,CAGH","sourcesContent":["import * as Yup from 'yup'\r\nimport {useFormik} from 'formik'\r\nimport {useStore} from 'effector-react'\r\nimport {useEffect, useState} from 'react'\r\nimport {$accountModel, accountAvatarsMount} from '../../Models/account-model'\r\n\r\nconst defaultValue = {\r\n    business_ava: undefined,\r\n    passport_series: '',\r\n    passport_number: '',\r\n    passport_scan: ''\r\n}\r\n\r\nexport function useVerificationLegalData() {\r\n    const validationSchema = Yup.object().shape()\r\n    const [mounted, setMounted] = useState(false)\r\n    const [initialValues, setInitialValues] = useState(defaultValue)\r\n    const {$accountAvatars, $accountPDataMount} = useStore($accountModel)\r\n    \r\n    const formik = useFormik({\r\n        initialValues,\r\n        validationSchema,\r\n        enableReinitialize: true\r\n    })\r\n    \r\n    const getData = (value) => {\r\n        return value || ''\r\n    }\r\n    \r\n    useEffect(() => {\r\n        const avatarsData = $accountAvatars.data\r\n        const accountPDataMount = $accountPDataMount.data\r\n        \r\n        if (!!$accountPDataMount && !!avatarsData && !mounted) {\r\n            const business_ava = avatarsData.length > 0 && avatarsData.find(item => item.business_ava)\r\n            \r\n            setInitialValues({\r\n                ...defaultValue,\r\n                business_ava: business_ava ? {stringUrl: business_ava.image, file: null} : false,\r\n                passport_number: getData(accountPDataMount && accountPDataMount.passport_number),\r\n                passport_series: getData(accountPDataMount && accountPDataMount.passport_series)\r\n            })\r\n            setMounted(true)\r\n        }\r\n    }, [$accountAvatars, $accountPDataMount, mounted])\r\n    \r\n    useEffect(() => {\r\n        accountAvatarsMount()\r\n    }, [])\r\n    \r\n    return {\r\n        formik\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}