{"ast":null,"code":"import { useCallback } from 'react';\nimport { useUrlParams } from '../app';\nimport { useStore } from 'effector-react';\nimport order from '../../Service/order';\nimport { useLocation, useParams } from 'react-router-dom';\nimport { $appModel, saveURLMount } from '../../Models/app';\nimport { $accountModel } from '../../Models/account-model';\nimport { getOrgOrderCartsMount } from '../../Models/order-model';\nimport { changeLoadingStatusOffering, changeOrgOfferingStatus } from '../../Models/offerings-model';\nimport { useMutation } from 'react-query';\nimport { queryClient } from '../../App';\nexport function useOrgOrder() {\n  const {\n    pathname\n  } = useLocation();\n  const {\n    organization\n  } = useParams();\n  const {\n    $detectLocationInfo\n  } = useStore($appModel);\n  const {\n    urlData: {\n      specialist_id: specId\n    }\n  } = useUrlParams();\n  const {\n    $profiles: {\n      currentProfile\n    }\n  } = useStore($accountModel);\n  const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || '';\n  const checkoutOffering = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (!event.loading) {\n      changeLoadingStatusOffering({\n        id: event.id,\n        status: true\n      });\n\n      if (!event.inCart) {\n        const params = {\n          org_slug_name: event.organization,\n          data: {\n            offering_id: event.id,\n            responsible_id: specId ? specId : orgSpecList[0].id\n          }\n        };\n        order.postOrgOrderCart(params).then(res => {\n          if (res) {\n            saveURLMount(pathname);\n            changeOrgOfferingStatus({\n              offering_id: params.data.offering_id,\n              status: true,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      } else {\n        order.deleteOrderCart({\n          offering_id: event.id\n        }).then(res => {\n          if (res) {\n            changeOrgOfferingStatus({\n              offering_id: event.id,\n              status: false,\n              loadingStatus: false\n            });\n            getOrgOrderCartsMount({\n              org_slug_name: event.organization,\n              params: {\n                limit: 1,\n                offset: 0\n              },\n              clear: true\n            });\n          }\n        }).catch(e => {\n          console.log(e.response);\n        });\n      }\n    }\n  }, [specId, pathname]);\n  const create = useMutation(order.postOrgOrderCart, {\n    onMutate: itemId => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const previousTodo = queryClient.getQueryData(['/org/offerings', organization]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization], previousTodo);\n    },\n    onError: (err, itemId, rollback) => rollback(),\n    onSettled: itemId => {\n      queryClient.invalidateQueries(['/org/offerings', organization]);\n    }\n  });\n  const remove = useMutation(order.deleteOrderCart, {\n    onMutate: itemId => {\n      queryClient.cancelQueries(['/org/offerings', organization]);\n      const previousTodo = queryClient.getQueryData(['/org/offerings', organization]);\n      queryClient.setQueryData(['/org/offerings', organization]);\n      return () => queryClient.setQueryData(['/org/offerings', organization], previousTodo);\n    },\n    onError: (err, newData, rollback) => rollback(),\n    onSettled: itemId => {\n      queryClient.invalidateQueries(['/org/offerings', organization]);\n    }\n  });\n  const onCreatingCartItem = useCallback(event => {\n    const orgSpecList = event.responsible;\n\n    if (event.inCart) {\n      remove.mutate({\n        offering_id: event.id\n      });\n    } else {\n      const params = {\n        org_slug_name: event.organization,\n        data: {\n          offering_id: event.id,\n          responsible_id: specId ? specId : orgSpecList[0].id\n        }\n      };\n      create.mutate(params);\n    }\n  }, [create, specId, remove]);\n  const getIsLoading = useCallback(id => {\n    console.log(remove.variables);\n\n    if (create.isLoading || remove.isLoading) {\n      var _create$variables, _create$variables$dat, _remove$variables;\n\n      return (create === null || create === void 0 ? void 0 : (_create$variables = create.variables) === null || _create$variables === void 0 ? void 0 : (_create$variables$dat = _create$variables.data) === null || _create$variables$dat === void 0 ? void 0 : _create$variables$dat.offering_id) === id || (remove === null || remove === void 0 ? void 0 : (_remove$variables = remove.variables) === null || _remove$variables === void 0 ? void 0 : _remove$variables.offering_id) === id;\n    }\n\n    return false;\n  }, [create, remove]);\n  return {\n    currency,\n    checkoutOffering,\n    create,\n    remove,\n    getIsLoading,\n    onCreatingCartItem\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/order/use-org-order.js"],"names":["useCallback","useUrlParams","useStore","order","useLocation","useParams","$appModel","saveURLMount","$accountModel","getOrgOrderCartsMount","changeLoadingStatusOffering","changeOrgOfferingStatus","useMutation","queryClient","useOrgOrder","pathname","organization","$detectLocationInfo","urlData","specialist_id","specId","$profiles","currentProfile","currency","code","checkoutOffering","event","orgSpecList","responsible","loading","id","status","inCart","params","org_slug_name","data","offering_id","responsible_id","postOrgOrderCart","then","res","loadingStatus","limit","offset","clear","catch","e","console","log","response","deleteOrderCart","create","onMutate","itemId","cancelQueries","previousTodo","getQueryData","setQueryData","onError","err","rollback","onSettled","invalidateQueries","remove","newData","onCreatingCartItem","mutate","getIsLoading","variables","isLoading"],"mappings":"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","sourcesContent":["import {useCallback} from 'react'\nimport {useUrlParams} from '../app'\nimport {useStore} from 'effector-react'\nimport order from '../../Service/order'\nimport {useLocation, useParams} from 'react-router-dom'\nimport {$appModel, saveURLMount} from '../../Models/app'\nimport {$accountModel} from '../../Models/account-model'\nimport {getOrgOrderCartsMount} from '../../Models/order-model'\nimport {changeLoadingStatusOffering, changeOrgOfferingStatus} from '../../Models/offerings-model'\nimport {useMutation} from 'react-query'\nimport {queryClient} from '../../App'\n\nexport function useOrgOrder() {\n    const {pathname} = useLocation()\n    const {organization} = useParams()\n    const {$detectLocationInfo} = useStore($appModel)\n    const {urlData: {specialist_id: specId}} = useUrlParams()\n    const {$profiles: {currentProfile}} = useStore($accountModel)\n    const currency = currentProfile ? currentProfile.currency.code : $detectLocationInfo.currency || ''\n    \n    const checkoutOffering = useCallback((event) => {\n        const orgSpecList = event.responsible\n    \n        if (!event.loading) {\n            changeLoadingStatusOffering({id: event.id, status: true})\n            if (!event.inCart) {\n                const params = {\n                    org_slug_name: event.organization,\n                    data: {\n                        offering_id: event.id,\n                        responsible_id: specId ? specId : orgSpecList[0].id\n                    }\n                }\n                order.postOrgOrderCart(params)\n                    .then((res) => {\n                        if (res) {\n                            saveURLMount(pathname)\n                            changeOrgOfferingStatus({\n                                offering_id: params.data.offering_id,\n                                status: true,\n                                loadingStatus: false\n                            })\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            } else {\n                order.deleteOrderCart({offering_id: event.id})\n                    .then((res) => {\n                        if (res) {\n                            changeOrgOfferingStatus({offering_id: event.id, status: false, loadingStatus: false})\n                            getOrgOrderCartsMount({\n                                org_slug_name: event.organization,\n                                params: {limit: 1, offset: 0},\n                                clear: true\n                            })\n                        }\n                    })\n                    .catch((e) => {\n                        console.log(e.response)\n                    })\n            }\n        }\n        \n    }, [specId, pathname])\n    \n    const create = useMutation(order.postOrgOrderCart, {\n        onMutate: itemId => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const previousTodo = queryClient.getQueryData(['/org/offerings', organization])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization], previousTodo)\n        },\n        onError: (err, itemId, rollback) => rollback(),\n        onSettled: itemId => {\n            queryClient.invalidateQueries(['/org/offerings', organization])\n        }\n    })\n    \n    const remove = useMutation(order.deleteOrderCart, {\n        onMutate: itemId => {\n            queryClient.cancelQueries(['/org/offerings', organization])\n            \n            const previousTodo = queryClient.getQueryData(['/org/offerings', organization])\n            \n            queryClient.setQueryData(['/org/offerings', organization])\n            \n            return () => queryClient.setQueryData(['/org/offerings', organization], previousTodo)\n        },\n        onError: (err, newData, rollback) => rollback(),\n        onSettled: itemId => {\n            queryClient.invalidateQueries(['/org/offerings', organization])\n        }\n    })\n    \n    const onCreatingCartItem = useCallback((event) => {\n        const orgSpecList = event.responsible\n        if (event.inCart) {\n            remove.mutate({offering_id: event.id})\n        } else {\n            const params = {\n                org_slug_name: event.organization,\n                data: {\n                    offering_id: event.id,\n                    responsible_id: specId ? specId : orgSpecList[0].id\n                }\n            }\n            create.mutate(params)\n        }\n    }, [create, specId, remove])\n    \n    const getIsLoading = useCallback((id) => {\n        console.log(remove.variables)\n        if(create.isLoading || remove.isLoading) {\n            return create?.variables?.data?.offering_id === id || remove?.variables?.offering_id === id\n        }\n        \n        return false\n    }, [create, remove])\n    \n    return {\n        currency,\n        checkoutOffering,\n        create,\n        remove,\n        getIsLoading,\n        onCreatingCartItem\n    }\n}"]},"metadata":{},"sourceType":"module"}