{"ast":null,"code":"var _jsxFileName = \"/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Chat/AllChatList/index.jsx\";\nimport React from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Row } from 'antd';\nimport { useStore } from 'effector-react';\nimport { $chatModel } from '../../../Models/chat-model';\nimport { ChatItem } from '../ChatItem';\nimport { StyledChatCol } from '../style';\nexport const AllChatList = () => {\n  const {\n    $allChatList: {\n      userChats,\n      loading,\n      userChatResult\n    },\n    $userMessages: {\n      typing\n    }\n  } = useStore($chatModel);\n\n  const getSortedData = data => {\n    return Object.values(data).sort((a, b) => new Date(b.last_message.date).getTime() - new Date(a.last_message.date).getTime());\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, Object.values(userChats).length > 0 && /*#__PURE__*/React.createElement(InfiniteScroll, {\n    pageStart: 0,\n    loadMore: () => false,\n    hasMore: !!userChatResult.next && !loading,\n    initialLoad: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 24,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 25\n    }\n  }, getSortedData(userChats).map((item, idx) => {\n    return /*#__PURE__*/React.createElement(StyledChatCol, {\n      span: 24,\n      key: `${idx + 1}`,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(ChatItem, Object.assign({\n      path: `/chat/@${item.receiver.username}`\n    }, item, {\n      typing: typing && typing[item.receiver.username],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 45\n      }\n    })));\n  }))));\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Views/Chat/AllChatList/index.jsx"],"names":["React","InfiniteScroll","Row","useStore","$chatModel","ChatItem","StyledChatCol","AllChatList","$allChatList","userChats","loading","userChatResult","$userMessages","typing","getSortedData","data","Object","values","sort","a","b","Date","last_message","date","getTime","length","next","map","item","idx","receiver","username"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,cAAP,MAA2B,yBAA3B;AACA,SAAQC,GAAR,QAAkB,MAAlB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;AACA,SAAQC,UAAR,QAAyB,4BAAzB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,aAAR,QAA4B,UAA5B;AAEA,OAAO,MAAMC,WAAW,GAAG,MAAM;AAC7B,QAAM;AAACC,IAAAA,YAAY,EAAE;AAACC,MAAAA,SAAD;AAAYC,MAAAA,OAAZ;AAAqBC,MAAAA;AAArB,KAAf;AAAqDC,IAAAA,aAAa,EAAE;AAACC,MAAAA;AAAD;AAApE,MAAgFV,QAAQ,CAACC,UAAD,CAA9F;;AACA,QAAMU,aAAa,GAAIC,IAAD,IAAU;AAC5B,WAAOC,MAAM,CAACC,MAAP,CAAcF,IAAd,EAAoBG,IAApB,CAAyB,CAACC,CAAD,EAAIC,CAAJ,KAAU,IAAIC,IAAJ,CAASD,CAAC,CAACE,YAAF,CAAeC,IAAxB,EAA8BC,OAA9B,KAA0C,IAAIH,IAAJ,CAASF,CAAC,CAACG,YAAF,CAAeC,IAAxB,EAA8BC,OAA9B,EAA7E,CAAP;AACH,GAFD;;AAIA,sBACI,0CAEQR,MAAM,CAACC,MAAP,CAAcR,SAAd,EAAyBgB,MAAzB,GAAkC,CAAlC,iBACI,oBAAC,cAAD;AACI,IAAA,SAAS,EAAE,CADf;AAEI,IAAA,QAAQ,EAAE,MAAM,KAFpB;AAGI,IAAA,OAAO,EAAE,CAAC,CAACd,cAAc,CAACe,IAAjB,IAAyB,CAAChB,OAHvC;AAII,IAAA,WAAW,EAAE,KAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAMI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQI,aAAa,CAACL,SAAD,CAAb,CAAyBkB,GAAzB,CAA6B,CAACC,IAAD,EAAOC,GAAP,KAAe;AACxC,wBACI,oBAAC,aAAD;AAAe,MAAA,IAAI,EAAE,EAArB;AAAyB,MAAA,GAAG,EAAG,GAAEA,GAAG,GAAG,CAAE,EAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,QAAD;AACI,MAAA,IAAI,EAAG,UAASD,IAAI,CAACE,QAAL,CAAcC,QAAS;AAD3C,OAEQH,IAFR;AAGI,MAAA,MAAM,EAAEf,MAAM,IAAIA,MAAM,CAACe,IAAI,CAACE,QAAL,CAAcC,QAAf,CAH5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADJ,CADJ;AASH,GAVD,CAFR,CANJ,CAHZ,CADJ;AA8BH,CApCM","sourcesContent":["import React from 'react'\nimport InfiniteScroll from 'react-infinite-scroller'\nimport {Row} from 'antd'\nimport {useStore} from 'effector-react'\nimport {$chatModel} from '../../../Models/chat-model'\nimport {ChatItem} from '../ChatItem'\nimport {StyledChatCol} from '../style'\n\nexport const AllChatList = () => {\n    const {$allChatList: {userChats, loading, userChatResult}, $userMessages: {typing}} = useStore($chatModel)\n    const getSortedData = (data) => {\n        return Object.values(data).sort((a, b) => new Date(b.last_message.date).getTime() - new Date(a.last_message.date).getTime())\n    }\n\n    return (\n        <>\n            {\n                Object.values(userChats).length > 0 && (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={() => false}\n                        hasMore={!!userChatResult.next && !loading}\n                        initialLoad={false}\n                    >\n                        <Row gutter={24}>\n                            {\n                                getSortedData(userChats).map((item, idx) => {\n                                    return (\n                                        <StyledChatCol span={24} key={`${idx + 1}`}>\n                                            <ChatItem\n                                                path={`/chat/@${item.receiver.username}`}\n                                                {...item}\n                                                typing={typing && typing[item.receiver.username]}\n                                            />\n                                        </StyledChatCol>\n                                    )\n                                })\n                            }\n                        </Row>\n                    </InfiniteScroll>\n                )\n            }\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}