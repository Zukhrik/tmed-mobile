{"ast":null,"code":"import { useCallback, useEffect, useState } from 'react';\nimport { removeMessageEvent, temporaryMessageMount } from '../../Models/chat-model';\nimport copy from 'copy-text-to-clipboard';\nimport moment from 'moment';\nimport chat from '../../Service/chat';\nexport function useChatAction({\n  partner_slug,\n  formik,\n  inputRef\n}) {\n  //Local states\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [msgInfo, setMsgInfo] = useState(null);\n  const [showDelMenu, setShowDelMenu] = useState(false);\n\n  const handleMsgClick = (event, data, me) => {\n    setAnchorEl({\n      el: event.currentTarget,\n      me\n    });\n    setMsgInfo(data);\n  };\n\n  const handleClosePopup = () => {\n    setAnchorEl(null);\n    setMsgInfo(null);\n  };\n\n  useEffect(() => {\n    if (!!anchorEl) {\n      setShowDelMenu(false);\n    }\n  }, [anchorEl]);\n  const handleCopy = useCallback(async () => {\n    if (msgInfo) {\n      copy(msgInfo.text);\n      setAnchorEl(null);\n    }\n  }, [msgInfo]);\n  const handleEdit = useCallback(() => {\n    if (msgInfo) {\n      setAnchorEl(null);\n      setMsgInfo(null);\n      inputRef.current.focus();\n      temporaryMessageMount({\n        type: 'edit',\n        ...msgInfo\n      });\n      formik.setFieldValue('text', msgInfo.text);\n    }\n  }, [msgInfo, formik, inputRef]);\n  const handleReply = useCallback(() => {\n    if (msgInfo) {\n      temporaryMessageMount({\n        type: 'reply',\n        ...msgInfo\n      });\n      setAnchorEl(null);\n      setMsgInfo(null);\n    }\n  }, [msgInfo]);\n  const handleCancelEditAndReply = useCallback(action => {\n    temporaryMessageMount(null);\n    setMsgInfo(null);\n    setShowDelMenu(false);\n  }, []);\n  const handleRemove = useCallback(type => {\n    if (msgInfo) {\n      if (type) {\n        const data = {\n          id: msgInfo.id,\n          partner: partner_slug\n        };\n\n        if (type === 'irrevocably') {\n          data['params'] = {\n            [type]: '1'\n          };\n        }\n\n        removeMessageEvent({\n          key: partner_slug,\n          id: msgInfo.id,\n          date: moment(msgInfo.date).format('YYYY-MM-DD')\n        });\n        handleClosePopup();\n        temporaryMessageMount(null);\n        chat.removeMessageToUser(data).then(res => {\n          console.log(res);\n        });\n      } else {\n        setShowDelMenu(true);\n      }\n    }\n  }, [partner_slug, msgInfo]);\n  return {\n    msgInfo,\n    anchorEl,\n    handleCopy,\n    handleEdit,\n    handleReply,\n    showDelMenu,\n    handleRemove,\n    handleMsgClick,\n    handleClosePopup,\n    handleCancelEditAndReply\n  };\n}","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/t-med(mobile)/src/Hooks/chat/use-chat-action.js"],"names":["useCallback","useEffect","useState","removeMessageEvent","temporaryMessageMount","copy","moment","chat","useChatAction","partner_slug","formik","inputRef","anchorEl","setAnchorEl","msgInfo","setMsgInfo","showDelMenu","setShowDelMenu","handleMsgClick","event","data","me","el","currentTarget","handleClosePopup","handleCopy","text","handleEdit","current","focus","type","setFieldValue","handleReply","handleCancelEditAndReply","action","handleRemove","id","partner","key","date","format","removeMessageToUser","then","res","console","log"],"mappings":"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","sourcesContent":["import {useCallback, useEffect, useState} from 'react'\nimport {removeMessageEvent, temporaryMessageMount} from '../../Models/chat-model'\nimport copy from 'copy-text-to-clipboard'\nimport moment from 'moment'\nimport chat from '../../Service/chat'\n\nexport function useChatAction({partner_slug, formik, inputRef}) {\n    //Local states\n    const [anchorEl, setAnchorEl] = useState(null)\n    const [msgInfo, setMsgInfo] = useState(null)\n    const [showDelMenu, setShowDelMenu] = useState(false)\n\n    const handleMsgClick = (event, data, me) => {\n        setAnchorEl({el: event.currentTarget, me})\n        setMsgInfo(data)\n    }\n\n    const handleClosePopup = () => {\n        setAnchorEl(null)\n        setMsgInfo(null)\n    }\n\n    useEffect(() => {\n        if (!!anchorEl) {\n            setShowDelMenu(false)\n        }\n    }, [anchorEl])\n\n\n    const handleCopy = useCallback(async () => {\n        if (msgInfo) {\n            copy(msgInfo.text)\n            setAnchorEl(null)\n        }\n    }, [msgInfo])\n\n    const handleEdit = useCallback(() => {\n        if (msgInfo) {\n            setAnchorEl(null)\n            setMsgInfo(null)\n            inputRef.current.focus()\n            temporaryMessageMount({type: 'edit', ...msgInfo})\n            formik.setFieldValue('text', msgInfo.text)\n        }\n    }, [msgInfo, formik, inputRef])\n\n    const handleReply = useCallback(() => {\n        if (msgInfo) {\n            temporaryMessageMount({type: 'reply', ...msgInfo})\n            setAnchorEl(null)\n            setMsgInfo(null)\n        }\n    }, [msgInfo])\n\n    const handleCancelEditAndReply = useCallback((action) => {\n        temporaryMessageMount(null)\n        setMsgInfo(null)\n        setShowDelMenu(false)\n    }, [])\n\n    const handleRemove = useCallback((type) => {\n        if (msgInfo) {\n            if (type) {\n                const data = {\n                    id: msgInfo.id,\n                    partner: partner_slug\n                }\n                if (type === 'irrevocably') {\n                    data['params'] = {[type]: '1'}\n                }\n                removeMessageEvent({\n                    key: partner_slug,\n                    id: msgInfo.id,\n                    date: moment(msgInfo.date).format('YYYY-MM-DD')\n                })\n                handleClosePopup()\n                temporaryMessageMount(null)\n\n                chat.removeMessageToUser(data)\n                    .then((res) => {\n                        console.log(res)\n                    })\n            } else {\n                setShowDelMenu(true)\n            }\n        }\n    }, [partner_slug, msgInfo])\n\n    return {\n        msgInfo,\n        anchorEl,\n        handleCopy,\n        handleEdit,\n        handleReply,\n        showDelMenu,\n        handleRemove,\n        handleMsgClick,\n        handleClosePopup,\n        handleCancelEditAndReply,\n    }\n}"]},"metadata":{},"sourceType":"module"}