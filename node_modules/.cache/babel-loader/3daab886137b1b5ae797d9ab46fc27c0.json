{"ast":null,"code":"import * as Yup from 'yup';\nimport Cookies from 'js-cookie';\nimport { useFormik } from 'formik';\nimport jwtDecode from 'jwt-decode';\nimport auth from '../../Service/auth';\nimport { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { AsYouType } from 'libphonenumber-js';\nimport { tokenMount } from '../../Models/app';\nimport { useTranslation } from 'react-i18next';\nimport { getCurrentAccount } from '../../Models/account-model';\nexport const usePhoneVerify = () => {\n  const [deadline, setDeadline] = useState(Date.now() + 1000 * 60);\n  const [showResend, setShowResend] = useState(false);\n  const [phone, setPhone] = useState(null);\n  const {\n    location,\n    push\n  } = useHistory();\n  const {\n    t\n  } = useTranslation();\n  const validationSchema = Yup.object().shape({\n    activation_code: Yup.string().required(t('required_field')).test('regexTest', t('required_field'), value => {\n      return value && value.match(/^(\\d\\s*){6}$/);\n    })\n  });\n  const formik = useFormik({\n    initialValues: {\n      activation_code: ''\n    },\n    validationSchema,\n    onSubmit: ({\n      activation_code\n    }) => {\n      auth.activateCode({\n        activation_code: activation_code.replace(/\\s/g, '')\n      }).then(res => {\n        if (res) {\n          let users = {};\n\n          if (Cookies.get('users')) {\n            const oldUsers = JSON.parse(Cookies.get('users'));\n            users = { ...oldUsers\n            };\n          }\n\n          users[jwtDecode(res.data.access).username] = res.data;\n          tokenMount(res.data.access);\n          Cookies.set('users', JSON.stringify(users));\n          Cookies.set('token', res.data.access);\n          Cookies.set('refresh-token', res.data.refresh);\n          getCurrentAccount();\n          push('/');\n        }\n      });\n    }\n  });\n  useEffect(() => {\n    if (location.state && location.state.phone) {\n      const p = new AsYouType('UZ').input(location.state.phone);\n      setPhone(p);\n    }\n  }, [location.state]);\n\n  const onFinish = () => {\n    setShowResend(true);\n  };\n\n  const resend = () => {\n    if (location.state.phone) {\n      auth.resendCode({\n        phone: `+${location.state.phone}`\n      }).then(() => {\n        setDeadline(Date.now() + 1000 * 60);\n        setShowResend(false);\n      });\n    }\n  };\n\n  return {\n    phone,\n    formik,\n    resend,\n    deadline,\n    onFinish,\n    showResend\n  };\n};","map":{"version":3,"sources":["/Users/zuhriddinkamilzanov/Desktop/tMed-mobile/src/Hooks/auth/use-phone-verify.js"],"names":["Yup","Cookies","useFormik","jwtDecode","auth","useEffect","useState","useHistory","AsYouType","tokenMount","useTranslation","getCurrentAccount","usePhoneVerify","deadline","setDeadline","Date","now","showResend","setShowResend","phone","setPhone","location","push","t","validationSchema","object","shape","activation_code","string","required","test","value","match","formik","initialValues","onSubmit","activateCode","replace","then","res","users","get","oldUsers","JSON","parse","data","access","username","set","stringify","refresh","state","p","input","onFinish","resend","resendCode"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\r\nimport Cookies from 'js-cookie'\r\nimport {useFormik} from 'formik'\r\nimport jwtDecode from 'jwt-decode'\r\nimport auth from '../../Service/auth'\r\nimport {useEffect, useState} from 'react'\r\nimport {useHistory} from 'react-router-dom'\r\nimport {AsYouType} from 'libphonenumber-js'\r\nimport {tokenMount} from '../../Models/app'\r\nimport {useTranslation} from 'react-i18next'\r\nimport {getCurrentAccount} from '../../Models/account-model'\r\n\r\nexport const usePhoneVerify = () => {\r\n    const [deadline, setDeadline] = useState(Date.now() + 1000 * 60)\r\n    const [showResend, setShowResend] = useState(false)\r\n    const [phone, setPhone] = useState(null)\r\n    const {location, push} = useHistory()\r\n    const {t} = useTranslation()\r\n    \r\n    const validationSchema = Yup.object().shape({\r\n        activation_code: Yup.string()\r\n            .required(t('required_field'))\r\n            .test('regexTest', t('required_field'), (value) => {\r\n                return value && value.match(/^(\\d\\s*){6}$/)\r\n            })\r\n    })\r\n    \r\n    const formik = useFormik({\r\n        initialValues: {\r\n            activation_code: ''\r\n        },\r\n        validationSchema,\r\n        onSubmit: ({activation_code}) => {\r\n            auth.activateCode({activation_code: activation_code.replace(/\\s/g, '')})\r\n                .then((res) => {\r\n                    if (res) {\r\n                        let users = {}\r\n                        if (Cookies.get('users')) {\r\n                            const oldUsers = JSON.parse(Cookies.get('users'))\r\n                            users = {...oldUsers}\r\n                        }\r\n                        users[jwtDecode(res.data.access).username] = res.data\r\n                        tokenMount(res.data.access)\r\n                        Cookies.set('users', JSON.stringify(users))\r\n                        Cookies.set('token', res.data.access)\r\n                        Cookies.set('refresh-token', res.data.refresh)\r\n                        getCurrentAccount()\r\n                        push('/')\r\n                    }\r\n                })\r\n        }\r\n    })\r\n    \r\n    useEffect(() => {\r\n        if (location.state && location.state.phone) {\r\n            const p = new AsYouType('UZ').input(location.state.phone)\r\n            setPhone(p)\r\n        }\r\n    }, [location.state])\r\n    \r\n    const onFinish = () => {\r\n        setShowResend(true)\r\n    }\r\n    \r\n    const resend = () => {\r\n        if (location.state.phone) {\r\n            auth.resendCode({phone: `+${location.state.phone}`})\r\n                .then(() => {\r\n                    setDeadline(Date.now() + 1000 * 60)\r\n                    setShowResend(false)\r\n                })\r\n        }\r\n    }\r\n    \r\n    return {\r\n        phone,\r\n        formik,\r\n        resend,\r\n        deadline,\r\n        onFinish,\r\n        showResend\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}