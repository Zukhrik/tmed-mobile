{"version":3,"file":"effector.cjs.js","sources":["effector/is.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/collection.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/createDomain.ts","effector/split.ts","effector/attach.ts","effector/createApi.ts","effector/fromObservable.ts","effector/guard.ts","effector/restore.ts"],"sourcesContent":["//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n\nfunction assertNodeSetItem(value: any, method: string, valueName: string, reason: string) {\n  if ((!isObject(value) && !isFunction(value)) || (!('family' in value) && !('graphite' in value))) {\n    throwError(`${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`)\n  }\n}\nexport function assertNodeSet(value: any, method: string, valueName: string) {\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i]\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, '')\n    }\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}É”${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  const unitMeta = getGraph(unit).meta\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: unitMeta.template || readTemplate(),\n    sidRoot: unitMeta.sidRoot || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {Node, NodeUnit, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === STORE) {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import {Node, NodeUnit} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getParent, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n} from './tag'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Node\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: any, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nconst getPageRef = (page: any, node: Node, id: string) => {\n  const pageForRef = getPageForRef(page, id)\n  return (pageForRef ? pageForRef : node).reg[id]\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: any\n  forkPage?: any\n  stack?: Stack\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop\n  let skip\n  let node\n  let value\n  let page\n  let reg\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    reg = (page ? page : node).reg\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case BARRIER: {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue kernelLoop\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = getPageForRef(page, data.store.id)\n                reg = page ? page.reg : node.reg\n                // }\n              }\n              // value = getPageRef(page, node, data.store.id).current\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, node, data.target.id).current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip =\n                getValue(stack) ===\n                readRef(getPageRef(page, node, data.store.id))\n              break\n          }\n          break\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue kernelLoop\n          }\n        case 'compute':\n          isWatch = node.meta.op === 'watch'\n          stack.value = tryRun(local, data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < node.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          node.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' â†’ *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject, assertNodeSet} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A} from './tag'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (part.updateFilter) config.updateFilter = part.updateFilter\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: unit.kind = kind,\n    name: unit.shortName = name,\n    sid: unit.sid = readSidRoot(sid),\n    named,\n    unitId: unit.id = id,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' â†’? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n    regional: true,\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (params: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, params)\n    return params\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, MAP, fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* â†’ ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return event\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      if (Array.isArray(nodeSet)) {\n        for (const event of nodeSet) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(nodeSet, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: MAP,\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(\n        updateStore(event, store, 'on', true, fn, updateFilter),\n      ),\n    )\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.check.changed({\n        store: oldState,\n      }),\n      updateFilter && step.mov({store: oldState, to: REG_A}),\n      updateFilter &&\n        step.filter({\n          fn: (update, _, {a}) => updateFilter(update, a),\n        }),\n      step.update({\n        store: plainState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n  updateFilter?: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    updateFilter &&\n      step.filter({\n        fn: (update, _, {a}) => updateFilter(update, a),\n      }),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  getGraph(store).meta.isCombine = true\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: MAP,\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  node.meta.onCopy = ['runner']\n  node.meta.unit = instance.kind = EFFECT\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, stack) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            stack,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  stack,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  stack: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page: stack.page,\n    forkPage: getForkPage(stack),\n  })\n\nexport const sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes, forEach} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\nimport {merge} from './merge'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nfunction validateSampleConfig(config: any) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      if (config[field] == null) {\n        throwError(`sample: ${field} should be defined`)\n      }\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && isObject(source) && validateSampleConfig(source)) {\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'sample', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    createNode({\n      parent: source,\n      node: [\n        step.update({store: sourceState}),\n        step.mov({\n          from: VALUE,\n          store: true,\n          target: hasSource,\n        }),\n      ],\n      family: {\n        owners: [source, target, clock],\n        links: target,\n      },\n      meta: {op: SAMPLE, sample: 'source'},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {getForkPage, getGraph, getLinks, getOwners, getParent} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage, currentPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Node, StateRef} from './index.h'\nimport {removeItem, forEach, includes, forIn} from './collection'\nimport {DOMAIN, STORE, EVENT, EFFECT, SAMPLER, MAP, FORK_COUNTER} from './tag'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  const isScope = isObject(domain) && (domain as any).cloneOf\n  if (!is.domain(domain) && !isScope) {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  let storeWatches: Node[]\n  let storeWatchesRefs: any[]\n  if (isScope) {\n    storeWatches = []\n    storeWatchesRefs = []\n    forIn(normalizedValues, (val, sid) => {\n      //@ts-ignore\n      const node = domain.sidMap[sid]\n      if (node) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(val)\n        ;(domain as any).changedStores.add(node.meta.forkOf.id)\n      }\n    })\n  } else {\n    const fillResult = fillValues({\n      flatGraphUnits: flatGraph(domain),\n      values: normalizedValues,\n      collectWatches: true,\n    })\n    storeWatches = fillResult.storeWatches\n    storeWatchesRefs = fillResult.storeWatchesRefs.map(({current}) => current)\n  }\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs,\n    forkPage: isScope ? domain : false,\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Node[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches: Node[] = []\n  const storeWatchesRefs: StateRef[] = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  forEach(flatGraphUnits, node => {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === STORE) {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === STORE) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    forIn(reg, (ref, id) => {\n      refsMap[id] = ref\n    })\n  })\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      forEach(ref.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      })\n    }\n    if (!ref.after) return\n    const value = ref.current\n    forEach(ref.after, cmd => {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case MAP:\n          to.current = cmd.fn(value)\n          break\n      }\n    })\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  forEach(items, ({id}) => {\n    refGraph[id] = []\n  })\n  //prettier-ignore\n  forEach(items, ({id, before, after}) => {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  })\n  return refGraph\n}\n\n/**\n serialize state on server\n */\nexport function serialize(\n  {clones, changedStores}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  forEach(clones, ({meta, scope, reg}) => {\n    if (meta.unit !== STORE) return\n    const {sid} = meta\n    if (!sid) return\n    if (onlyChanges || meta.isCombine) {\n      if (!changedStores.has(meta.forkOf.id)) return\n    }\n    result[sid] = reg[scope.state.id].current\n  })\n  forEach(ignore, ({sid}) => {\n    if (sid) delete result[sid]\n  })\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const savedForkPage = forkPage\n  const localUnit = forkPage.find(unit)\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: localUnit,\n          params: {\n            params,\n            req,\n          },\n          forkPage: savedForkPage,\n        })\n      }\n    : (params: any) => {\n        launch({target: localUnit, params, forkPage: savedForkPage})\n        return params\n      }\n}\n\nfunction normalizeValues(\n  values: Map<Store<any>, any> | Record<string, any>,\n  assertEach = (key: any, value: any) => {},\n) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      assertEach(key, value)\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\n\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(\n    values || {},\n    unit =>\n      !is.store(unit) &&\n      throwError('Values map can contain only stores as keys'),\n  )\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(\n      handlers,\n      unit =>\n        !is.effect(unit) &&\n        throwError(`Handlers map can contain only effects as keys`),\n    )\n    const handlerKeys = Object.keys(handlers)\n    forEach(forked.clones, ({scope, meta}) => {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    })\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    forEach(sourceList, ({reg, meta}) => {\n      const {nativeTemplate} = meta\n      forIn(reg, (ref, id) => {\n        sourceRefsMap[id] = ref\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      })\n    })\n    forEach(forked.clones, node => {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === STORE) {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n          forked.changedStores.add(node.meta.forkOf.id)\n        }\n      }\n      forIn(reg, (ref, id) => {\n        refsMap[id] = ref\n      })\n    })\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        forEach(sourceRef.before, cmd => {\n          switch (cmd.type) {\n            case MAP: {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        })\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      forEach(sourceRef.after, cmd => {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case MAP:\n            to.current = cmd.fn(value)\n            break\n        }\n      })\n    }\n  }\n}\n\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\n\nfunction flatGraph(unit: any) {\n  const list = [] as Node[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n\n/**\n everything we need to clone graph section\n reachable from given unit\n */\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const changedStores = new Set<string>()\n  const putStoreToChanged = step.compute({\n    fn(upd, _, stack) {\n      if (\n        !stack.node.meta.isCombine ||\n        (getParent(stack) && getParent(stack).node.meta.op !== 'combine')\n      )\n        changedStores.add(stack.node.meta.forkOf.id)\n      return upd\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const nodeMap = {} as Record<string, Node>\n  const sidMap = {} as Record<string, Node>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: {...step.data},\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: {forkOf: node, ...meta},\n      scope: {...scope},\n    })\n    result.family = {\n      type: node.family.type,\n      links: [...getLinks(node)],\n      owners: [...getOwners(node)],\n    }\n    nodeMap[node.id] = result\n    if (meta.sid) sidMap[meta.sid] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    forIn(reg, (ref, id) => {\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    })\n    if (onCopy) {\n      forEach(onCopy, (copyField: string) => {\n        const origValue = scope[copyField]\n        scope[copyField] = Array.isArray(origValue)\n          ? origValue.map(findClone)\n          : findClone(origValue)\n      })\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case STORE:\n        node.meta.wrapped = wrapStore(node)\n        if (node.meta.sid) node.seq.push(putStoreToChanged)\n        break\n      // case EVENT:\n      //   break\n      case EFFECT:\n        node.next.push(forkInFlightCounter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        break\n      }\n      // case 'watch':\n      //   break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    changedStores,\n    nodeMap,\n    sidMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n\n  function findClone(unit: any) {\n    const node = getGraph(unit)\n    const index = list.indexOf(node)\n    if (index === -1) {\n      let unitName = 'unit'\n      if (unit !== node && unit.id !== unit.shortName) unitName = unit.shortName\n      throwError(`${unitName} not found in forked scope`)\n    }\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Node) {\n  return {\n    kind: STORE,\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\n\nfunction forEachRelatedNode(\n  node: Node,\n  cb: (node: Node, index: number, siblings: Node[]) => void,\n) {\n  const unit = node.meta.unit\n  if (unit === 'fork' || unit === FORK_COUNTER) return\n  forEach(node.next, cb)\n  forEach(getOwners(node), cb)\n  forEach(getLinks(node), cb)\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT} from './tag'\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE)\nexport const event = is(EVENT)\nexport const effect = is(EFFECT)\nexport const domain = is(DOMAIN)\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = BARRIER,\n}) =>\n  cmd(BARRIER, false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: any\n  target?: any\n}) => Mov = ({from = STORE, store, target, to = target ? STORE : STACK}) =>\n  cmd('mov', from === STORE, {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, FILTER, false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: STACK, target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Node, StateRef} from './index.h'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.É”\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\n","import {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, NodeUnit} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit,\n  child: NodeUnit | NodeUnit[],\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope,\n    meta,\n    family: {\n      owners: [parent, child],\n      links: child,\n    },\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  if (config) meta.config = config\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta,\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [step.run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {\n        owners: unit,\n      },\n      regional: true,\n    }),\n  )\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {step} from './typedef'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.create = res => {\n    launch(trigger, res)\n    return res\n  }\n  getGraph(trigger).seq.push(\n    step.compute({\n      fn(upd, _, stack) {\n        stack.forkPage = null\n        return upd\n      },\n    }),\n  )\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {Event} from './unit.h'\nimport {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {forIn, includes} from './collection'\nimport {createStateRef} from './stateRef'\nimport {readTemplate} from './region'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {step} from './typedef'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {REG_A} from './tag'\nimport {throwError} from './throw'\nimport {createEvent} from './createUnit'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    if (!matchIsShape) throwError('match should be an object')\n    forIn(match, (_, key) => {\n      //@ts-ignore\n      targets[key] = createEvent(metadata)\n    })\n    targets.__ = createEvent(metadata)\n  }\n  //@ts-ignore\n  const template = readTemplate()\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && step.barrier({priority: 'sampler'}),\n      matchIsUnit &&\n        step.mov({\n          store: getStoreState(match),\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const before: any[] = (lastValues.before = [])\n    const updaterSteps = [\n      step.mov({\n        store: lastValues,\n        to: REG_A,\n      }),\n      step.compute({\n        fn(upd, {key}, {a}) {\n          a[key] = upd\n        },\n      }),\n    ]\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        units.push(key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(storeOrFn, [], {\n          node: updaterSteps,\n          scope: {key},\n        })\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          before.push({\n            type: 'field',\n            field: key,\n            from: storeRef,\n          })\n          if (template) {\n            if (!includes(template.plain, storeRef)) {\n              updater.seq.unshift(template.loader)\n            }\n          }\n        }\n      }\n    })\n    if (needBarrier! && template) {\n      template.plain.push(lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && step.barrier({priority: 'sampler'}),\n      needBarrier! &&\n        step.mov({\n          store: lastValues,\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    throwError('expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {\n      onCopy: Object.keys(targets),\n      op: 'split',\n    },\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {\n      type: 'crosslink',\n      owners: Array.from(owners),\n    },\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {STORE, EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!mapParams)\n    mapParams = source\n      ? (_: any, source: any) => source\n      : (params: any) => params\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    stack: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      stack,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          }),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(source, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: STORE,\n      store: getStoreState(state),\n      to: REG_A,\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  own(effect, [attached])\n  runner.scope.effect = effect\n  runner.meta.onCopy.push(EFFECT)\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {merge} from './merge'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  let {filter, greedy, clock, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  const filterIsUnit = is.unit(filter)\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'guard', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) source = combine(source)\n  if (clock) {\n    assertNodeSet(clock, 'guard', 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, 'guard', 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filter,\n      clock: source,\n      target: createNode({\n        node: [\n          step.filter({\n            fn: ({guard}) => guard,\n          }),\n          step.compute({\n            fn: ({data}) => data,\n          }),\n        ],\n        child: target,\n        meta,\n        family: {\n          owners: [source, filter, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: clock\n        ? [\n            step.filter({\n              fn: ({source, clock}, {fn}) => fn(source, clock),\n            }),\n            step.compute({\n              fn: ({source}) => source,\n            }),\n          ]\n        : [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n"],"names":["assertNodeSetItem","value","method","valueName","reason","isObject","isFunction","throwError","assertNodeSet","Array","isArray","i","length","withRegion","unit","cb","unitMeta","getGraph","meta","regionStack","parent","template","readTemplate","sidRoot","getParent","createNode","node","from","source","to","target","child","scope","family","familyRaw","type","regional","sources","arrifyNodes","links","owners","seq","reg","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","pushFirstHeapItem","isRoot","stop","skip","lastStartedState","isWatch","kernelLoop","deleteMin","idx","stack","local","fail","stepn","step","data","barrierID","fullID","priority","barriers","has","add","pushHeap","delete","store","STORE","getPageForRef","readRef","getPageRef","current","undefined","tryRun","op","unitObjectName","objOrArr","name","comma","key","is","compositeName","fullName","toString","createName","path","composite","shortName","concat","forIn","obj","forEach","list","fn","createEvent","nameOrConfig","maybeConfig","event","args","oldPage","setCurrentPage","create","callCreate","graphite","initUnit","find","watch","bind","watchUnit","map","config","mapped","mapName","createComputation","MAP","filter","createEventFiltration","callStack","filterMap","defined","prepend","contramapped","upward","applyParentHook","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","updateFilter","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","nodeMap","reset","units","on","nodeSet","currentSubscription","get","firstState","lastResult","storeState","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","defaultConfig","changed","update","_","a","isStrict","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","err","createEffect","instance","getType","onCopy","kind","use","anyway","finally","done","named","status","error","doneData","failData","effectRunner","getHandler","getCurrent","onResolve","onSettled","ok","onReject","then","fx","runner","upd","savedFork","setForkPage","inFlight","x","pending","amount","merge","events","forward","sample","sid","greedy","clock","metadata","processArgsToConfig","atLeastOneFieldExists","sampleConfigFields","field","validateSampleConfig","needToCombine","isUpward","targetTemplate","nativeTemplate","sourceRef","createLinkNode","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","createRefGraph","refsMap","items","Object","values","refGraph","cmd","normalizeValues","assertEach","toposort","rawGraph","ignore","topologicalSortHelper","temp","neighbors","graph","n","visited","Set","reverse","size","processed","ignored","shift","removeItem","flatGraph","traverse","forEachRelatedNode","observableSymbol","Symbol","observable","effect","domain","message","Error","assertObject","idCount","nextUnitID","nextStepID","bind2","arg","hasRef","nextBarrierID","barrier","mov","check","compute","run","getConfig","opts","getNestedConfig","É”","val","ownerUnit","owner","link","readSidRoot","heap","b","ret","isSameType","v","r","l","queue","ix","first","last","getPriority","bucket","t","newForkPage","newPage","console","joinName","tag","rawConfig","injected","pos","indexOf","splice","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","forkedNode","normalizeConfig","part","loc","hookType","hooks","rawConfigA","rawConfigB","isDomain","unitId","thru","subscribe","observer","stateFirst","storeRef","ref","clone","stateNew","rawShape","isFresh","isCombine","childRef","defaultShape","sidechain","createHook","trigger","acc","res","hook","launchCase","scopeTargets","start","ctx","reject","parentFork","forkInFlightCounter","defers","launchUnits","launchParams","mapParams","runnerSteps","attached","runnerFn","computedParams","readStateRef","setters","createDomain","onCreateEvent","onCreateEffect","onCreateStore","onCreateDomain","handlers","needToFill","forked","findClone","index","unitName","clones","refs","changedStores","putStoreToChanged","forkOf","fxID","resolve","sidMap","newRef","copyField","origValue","siblings","wrapped","wrapStore","cloneOf","cloneGraph","sourceList","sourceRefsMap","predefinedRefs","templateOwnedRefs","valuesSidList","getOwnPropertyNames","execRef","fillValues","handlerKeys","keys","observableItem","disposer","complete","rawName","filterIsUnit","guard","isScope","storeWatches","storeWatchesRefs","normalizedValues","fillResult","flatGraphUnits","collectWatches","savedForkPage","localUnit","onlyChanges","currentComposite","targets","match","knownCases","cases","matchIsUnit","matchIsFunction","matchIsShape","__","splitterSeq","caseNames","String","lastValues","needBarrier","updaterSteps","storeOrFn","updater","caseName"],"mappings":"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"}