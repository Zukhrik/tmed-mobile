{"version":3,"file":"compat.js","sources":["effector/is.ts","effector/region.ts","effector/createNode.ts","effector/tag.ts","effector/kernel.ts","effector/naming.ts","effector/collection.ts","effector/createUnit.ts","effector/combine.ts","effector/defer.ts","effector/createEffect.ts","effector/merge.ts","effector/sample.ts","effector/fork.ts","effector/observable.ts","effector/validate.ts","effector/throw.ts","effector/id.ts","effector/bind.ts","effector/step.ts","effector/stateRef.ts","effector/caller.ts","effector/getter.ts","effector/own.ts","effector/config.ts","effector/clearNode.ts","effector/subscription.ts","effector/forward.ts","effector/watch.ts","effector/createDomain.ts","effector/split.ts","effector/attach.ts","effector/createApi.ts","effector/fromObservable.ts","effector/guard.ts","effector/restore.ts"],"sourcesContent":["//eslint-disable-next-line\nexport * as is from './validate'\nimport {throwError} from './throw'\n\nexport const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\nexport const isFunction = (value: any) => typeof value === 'function'\n\nexport const assertObject = (value: any) => {\n  if (!isObject(value) && !isFunction(value))\n    throwError('expect first argument be an object') // or function\n}\n\nfunction assertNodeSetItem(value: any, method: string, valueName: string, reason: string) {\n  if ((!isObject(value) && !isFunction(value)) || (!('family' in value) && !('graphite' in value))) {\n    throwError(`${method}: expect ${valueName} to be a unit (store, event or effect)${reason}`)\n  }\n}\nexport function assertNodeSet(value: any, method: string, valueName: string) {\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i]\n      assertNodeSetItem(item, method, `${i} item of ${valueName}`, '')\n    }\n  } else {\n    assertNodeSetItem(value, method, valueName, ' or array of units')\n  }\n}\n","import {getValue, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\n\ntype RegionStack = {\n  parent: RegionStack | null\n  value: any\n  template: any\n  sidRoot?: string\n}\n\nexport let regionStack: RegionStack | null = null\n\nexport const readTemplate = () => regionStack && regionStack.template\nexport const readSidRoot = (sid?: string | null) => {\n  if (sid && regionStack && regionStack.sidRoot)\n    sid = `${regionStack.sidRoot}É”${sid}`\n  return sid\n}\n\nexport function withRegion(unit: any, cb: () => void) {\n  const unitMeta = getGraph(unit).meta\n  regionStack = {\n    parent: regionStack,\n    value: unit,\n    template: unitMeta.template || readTemplate(),\n    sidRoot: unitMeta.sidRoot || (regionStack && regionStack.sidRoot),\n  }\n  try {\n    return cb()\n  } finally {\n    regionStack = getParent(regionStack)\n  }\n}\n\nexport const withFactory = ({\n  sid,\n  name,\n  loc,\n  method,\n  fn,\n}: {\n  sid: string\n  name?: string\n  loc?: any\n  method?: string\n  fn: () => any\n}) => {\n  const sidNode = createNode({\n    meta: {\n      sidRoot: readSidRoot(sid),\n      name,\n      loc,\n      method,\n    },\n  })\n  return withRegion(sidNode, fn)\n}\n","import {Node, NodeUnit, Cmd, StateRef} from './index.h'\nimport {getGraph, getOwners, getLinks, getValue} from './getter'\nimport {nextNodeID} from './id'\nimport {CROSSLINK, STORE} from './tag'\nimport {regionStack} from './region'\nimport {own} from './own'\n\nconst arrifyNodes = (\n  list: NodeUnit | Array<NodeUnit | NodeUnit[]> = [],\n): Node[] => {\n  const result = []\n  if (Array.isArray(list)) {\n    for (let i = 0; i < list.length; i++) {\n      if (Array.isArray(list[i])) result.push(...(list[i] as any))\n      else result.push(list[i])\n    }\n  } else {\n    result.push(list)\n  }\n  return result.map(getGraph)\n}\nexport const addToReg = (\n  {hasRef, type, data}: any,\n  reg: Record<string, StateRef>,\n) => {\n  let store\n  if (hasRef) {\n    store = data.store\n    reg[store.id] = store\n  }\n  if (type === 'mov' && data.to === STORE) {\n    store = data.target\n    reg[store.id] = store\n  }\n}\nexport function createNode({\n  node = [],\n  from,\n  source,\n  parent = from || source,\n  to,\n  target,\n  child = to || target,\n  scope = {},\n  meta = {},\n  family: familyRaw = {type: 'regular'},\n  regional,\n}: {\n  node?: Array<Cmd | false | void | null>\n  from?: NodeUnit | NodeUnit[]\n  source?: NodeUnit | NodeUnit[]\n  parent?: NodeUnit | NodeUnit[]\n  to?: NodeUnit | NodeUnit[]\n  target?: NodeUnit | NodeUnit[]\n  child?: NodeUnit | NodeUnit[]\n  scope?: {[name: string]: any}\n  meta?: {[name: string]: any}\n  family?: {\n    type?: 'regular' | 'crosslink' | 'domain'\n    links?: NodeUnit | NodeUnit[]\n    owners?: NodeUnit | Array<NodeUnit | NodeUnit[]>\n  }\n  regional?: boolean\n} = {}): Node {\n  const sources = arrifyNodes(parent)\n  const links = arrifyNodes(familyRaw.links)\n  const owners = arrifyNodes(familyRaw.owners)\n  const seq: Cmd[] = []\n  const reg: {[id: string]: StateRef} = {}\n  for (let i = 0; i < node.length; i++) {\n    const item = node[i]\n    if (!item) continue\n    seq.push(item)\n    addToReg(item, reg)\n  }\n  const result: Node = {\n    id: nextNodeID(),\n    seq,\n    next: arrifyNodes(child),\n    meta,\n    scope,\n    family: {\n      type: familyRaw.type || CROSSLINK,\n      links,\n      owners,\n    },\n    reg,\n  }\n  for (let i = 0; i < links.length; i++) {\n    getOwners(links[i]).push(result)\n  }\n  for (let i = 0; i < owners.length; i++) {\n    getLinks(owners[i]).push(result)\n  }\n  for (let i = 0; i < sources.length; i++) {\n    sources[i].next.push(result)\n  }\n  if (regional && regionStack) {\n    own(getValue(regionStack), [result])\n  }\n  return result\n}\n","export const STORE = 'store'\nexport const EVENT = 'event'\nexport const EFFECT = 'effect'\nexport const DOMAIN = 'domain'\nexport const SAMPLER = 'sampler'\nexport const CROSSLINK = 'crosslink'\nexport const MAP = 'map'\nexport const STACK = 'stack'\nexport const BARRIER = 'barrier'\nexport const VALUE = 'value'\nexport const FORK_COUNTER = 'forkInFlightCounter'\nexport const SAMPLE = 'sample'\nexport const FILTER = 'filter'\nexport const REG_A = 'a'\n","import {Node, NodeUnit} from './index.h'\nimport {readRef} from './stateRef'\nimport {getForkPage, getGraph, getParent, getValue} from './getter'\nimport {\n  STORE,\n  EFFECT,\n  SAMPLER,\n  STACK,\n  BARRIER,\n  VALUE,\n  FILTER,\n  REG_A,\n} from './tag'\n\n/** Names of priority groups */\ntype PriorityTag = 'child' | 'pure' | 'barrier' | 'sampler' | 'effect'\n\n/**\n * Position in the current branch,\n * including call stack, priority type\n * and index of next step in the executed Node\n */\ntype Layer = {\n  idx: number\n  stack: Stack\n  type: PriorityTag\n  id: number\n}\n\n/** Call stack */\ntype Stack = {\n  value: any\n  a: any\n  b: any\n  parent: Stack | null\n  node: Node\n  page: {[id: string]: any} | null\n  forkPage?: any\n}\n\n/** Queue as linked list or skew heap */\ntype QueueItem = {\n  /** node value */\n  v: Layer\n  /** left node. always null in queue but used in skew heap */\n  l: QueueItem | null\n  /** right node */\n  r: QueueItem | null\n}\ntype QueueBucket = {\n  first: QueueItem | null\n  last: QueueItem | null\n  size: number\n}\n\n/** Dedicated local metadata */\ntype Local = {\n  fail: boolean\n  scope: {[key: string]: any}\n}\n\nlet heap: QueueItem | null = null\n\nconst merge = (a: QueueItem | null, b: QueueItem | null): QueueItem | null => {\n  if (!a) return b\n  if (!b) return a\n\n  let ret\n  const isSameType = a.v.type === b.v.type\n  if (\n    /**\n     * if both nodes has the same PriorityType\n     * and first node is created after second one\n     */\n    (isSameType && a.v.id > b.v.id) ||\n    /** if first node is \"sampler\" and second node is \"barrier\" */\n    (!isSameType && a.v.type === SAMPLER)\n  ) {\n    ret = a\n    a = b\n    b = ret\n  }\n  ret = merge(a.r, b)\n  a.r = a.l\n  a.l = ret\n\n  return a\n}\n\n/** queue buckets for each PriorityType */\nconst queue: QueueBucket[] = []\nlet ix = 0\nwhile (ix < 5) {\n  /**\n   * although \"sampler\" and \"barrier\" are using heap instead of linked list,\n   * their buckets are still useful: they maintains size of heap queue\n   */\n  queue.push({first: null, last: null, size: 0})\n  ix += 1\n}\n\nconst deleteMin = () => {\n  for (let i = 0; i < 5; i++) {\n    const list = queue[i]\n    if (list.size > 0) {\n      /**\n       * second bucket is for \"barrier\" PriorityType (used in combine)\n       * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n       */\n      if (i === 2 || i === 3) {\n        list.size -= 1\n        const value = heap!.v\n        heap = merge(heap!.l, heap!.r)\n        return value\n      }\n      if (list.size === 1) {\n        list.last = null\n      }\n      const item = list.first\n      list.first = item!.r\n      list.size -= 1\n      return item!.v\n    }\n  }\n}\nconst pushFirstHeapItem = (\n  type: PriorityTag,\n  page: {[id: string]: any} | null,\n  node: Node,\n  parent: Stack | null,\n  value: any,\n  forkPage: any | void,\n) =>\n  pushHeap(\n    0,\n    {\n      a: null,\n      b: null,\n      node,\n      parent,\n      value,\n      page,\n      forkPage,\n    },\n    type,\n  )\nconst pushHeap = (idx: number, stack: Stack, type: PriorityTag, id = 0) => {\n  const priority = getPriority(type)\n  const bucket: QueueBucket = queue[priority]\n  const item: QueueItem = {\n    v: {\n      idx,\n      stack,\n      type,\n      id,\n    },\n    //@ts-ignore\n    l: 0,\n    //@ts-ignore\n    r: 0,\n  }\n  /**\n   * second bucket is for \"barrier\" PriorityType (used in combine)\n   * and third bucket is for \"sampler\" PriorityType (used in sample and guard)\n   */\n  if (priority === 2 || priority === 3) {\n    heap = merge(heap, item)\n  } else {\n    if (bucket.size === 0) {\n      bucket.first = item\n    } else {\n      bucket.last!.r = item\n    }\n    bucket.last = item\n  }\n  bucket.size += 1\n}\n\nconst getPriority = (t: PriorityTag) => {\n  switch (t) {\n    case 'child':\n      return 0\n    case 'pure':\n      return 1\n    case BARRIER:\n      return 2\n    case SAMPLER:\n      return 3\n    case EFFECT:\n      return 4\n    default:\n      return -1\n  }\n}\n\nconst barriers = new Set()\n\nlet isRoot = true\nexport let isWatch = false\nexport let currentPage: any = null\nexport let forkPage: any\nexport const setForkPage = (newForkPage: any) => {\n  forkPage = newForkPage\n}\nexport const setCurrentPage = (newPage: any) => {\n  currentPage = newPage\n}\n\nconst getPageForRef = (page: any, id: string) => {\n  if (page) {\n    while (page && !page.reg[id]) {\n      page = getParent(page)\n    }\n    if (page) return page\n  }\n  return null\n}\nconst getPageRef = (page: any, node: Node, id: string) => {\n  const pageForRef = getPageForRef(page, id)\n  return (pageForRef ? pageForRef : node).reg[id]\n}\n\nexport function launch(config: {\n  target: NodeUnit | NodeUnit[]\n  params?: any\n  defer?: boolean\n  page?: any\n  forkPage?: any\n  stack?: Stack\n}): void\nexport function launch(unit: NodeUnit, payload?: any, upsert?: boolean): void\nexport function launch(unit: any, payload?: any, upsert?: boolean) {\n  let pageForLaunch = currentPage\n  let stackForLaunch = null\n  let forkPageForLaunch = forkPage\n  if (unit.target) {\n    payload = unit.params\n    upsert = unit.defer\n    pageForLaunch = 'page' in unit ? unit.page : pageForLaunch\n    if (unit[STACK]) stackForLaunch = unit[STACK]\n    forkPageForLaunch = getForkPage(unit) || forkPageForLaunch\n    unit = unit.target\n  }\n  if (forkPageForLaunch && forkPage && forkPageForLaunch !== forkPage) {\n    forkPage = null\n  }\n  if (Array.isArray(unit)) {\n    for (let i = 0; i < unit.length; i++) {\n      pushFirstHeapItem(\n        'pure',\n        pageForLaunch,\n        getGraph(unit[i]),\n        stackForLaunch,\n        payload[i],\n        forkPageForLaunch,\n      )\n    }\n  } else {\n    pushFirstHeapItem(\n      'pure',\n      pageForLaunch,\n      getGraph(unit),\n      stackForLaunch,\n      payload,\n      forkPageForLaunch,\n    )\n  }\n  if (upsert && !isRoot) return\n  /** main execution code */\n  const lastStartedState = {isRoot, currentPage, forkPage, isWatch}\n  isRoot = false\n  let stop\n  let skip\n  let node\n  let value\n  let page\n  let reg\n  kernelLoop: while ((value = deleteMin())) {\n    const {idx, stack, type} = value\n    node = stack.node\n    currentPage = page = stack.page\n    forkPage = getForkPage(stack)\n    reg = (page ? page : node).reg\n    const local: Local = {\n      fail: false,\n      scope: node.scope,\n    }\n    stop = skip = false\n    for (let stepn = idx; stepn < node.seq.length && !stop; stepn++) {\n      const step = node.seq[stepn]\n      const data = step.data\n      switch (step.type) {\n        case BARRIER: {\n          let id = data.barrierID\n          if (page) {\n            id = `${page.fullID}_${id}`\n          }\n          const priority = data.priority\n          if (stepn !== idx || type !== priority) {\n            if (!barriers.has(id)) {\n              barriers.add(id)\n              pushHeap(stepn, stack, priority, id)\n            }\n            continue kernelLoop\n          }\n          barriers.delete(id)\n          break\n        }\n        case 'mov': {\n          let value\n          //prettier-ignore\n          switch (data.from) {\n            case STACK: value = getValue(stack); break\n            case REG_A: /** fall-through case */\n            case 'b':\n              value = stack[data.from]\n              break\n            case VALUE: value = data.store; break\n            case STORE:\n              if (!reg[data.store.id]) {\n                // if (!page.parent) {\n                stack.page = page = getPageForRef(page, data.store.id)\n                reg = page ? page.reg : node.reg\n                // }\n              }\n              // value = getPageRef(page, node, data.store.id).current\n              value = readRef(reg[data.store.id])\n              break\n          }\n          //prettier-ignore\n          switch (data.to) {\n            case STACK: stack.value = value; break\n            case REG_A: /** fall-through case */\n            case 'b':\n              stack[data.to] = value\n              break\n            case STORE:\n              getPageRef(page, node, data.target.id).current = value\n              break\n          }\n          break\n        }\n        case 'check':\n          switch (data.type) {\n            case 'defined':\n              skip = getValue(stack) === undefined\n              break\n            case 'changed':\n              skip =\n                getValue(stack) ===\n                readRef(getPageRef(page, node, data.store.id))\n              break\n          }\n          break\n        case FILTER:\n          /**\n           * handled edge case: if step.fn will throw,\n           * tryRun will return null\n           * thereby forcing that branch to stop\n           */\n          skip = !tryRun(local, data, stack)\n          break\n        case 'run':\n          /** exec 'compute' step when stepn === idx */\n          if (stepn !== idx || type !== EFFECT) {\n            pushHeap(stepn, stack, EFFECT)\n            continue kernelLoop\n          }\n        case 'compute':\n          isWatch = node.meta.op === 'watch'\n          stack.value = tryRun(local, data, stack)\n          isWatch = lastStartedState.isWatch\n          break\n      }\n      stop = local.fail || skip\n    }\n    if (!stop) {\n      for (let stepn = 0; stepn < node.next.length; stepn++) {\n        pushFirstHeapItem(\n          'child',\n          page,\n          node.next[stepn],\n          stack,\n          getValue(stack),\n          getForkPage(stack),\n        )\n      }\n    }\n  }\n  isRoot = lastStartedState.isRoot\n  currentPage = lastStartedState.currentPage\n  forkPage = getForkPage(lastStartedState)\n}\n\n/** try catch for external functions */\nconst tryRun = (local: Local, {fn}: any, stack: Stack) => {\n  try {\n    return fn(getValue(stack), local.scope, stack)\n  } catch (err) {\n    console.error(err)\n    local.fail = true\n  }\n}\n","import {Store, Domain} from './unit.h'\nimport {is} from './is'\nimport {getParent} from './getter'\n\nexport const joinName = (unit: any, tag: string) => '' + unit.shortName + tag\n\nexport const mapName = (unit: any, name?: string) =>\n  name == null ? joinName(unit, ' â†’ *') : name\n\nexport function unitObjectName(objOrArr: any, method: string = 'combine') {\n  let name = method + '('\n  let comma = ''\n  let i = 0\n  //@ts-ignore\n  for (const key in objOrArr) {\n    //@ts-ignore\n    const unit = objOrArr[key]\n    if (unit != null) {\n      name += comma\n      //@ts-ignore\n      name += is.unit(unit) ? unit.compositeName.fullName : unit.toString()\n    }\n    i += 1\n    /* inlined max object names constant */\n    if (i === 25) break\n    comma = ', '\n  }\n  name += ')'\n  return name\n}\n\nexport function setStoreName<State>(store: Store<State>, rawName: string) {\n  const compositeName = createName(rawName, getParent(store))\n  store.shortName = rawName\n  if (!store.compositeName) {\n    store.compositeName = compositeName\n    return\n  }\n  const currentComposite = store.compositeName\n  currentComposite.path = compositeName.path\n  currentComposite.shortName = compositeName.shortName\n  currentComposite.fullName = compositeName.fullName\n}\n\nexport type CompositeName = {\n  shortName: string\n  fullName: string\n  path: string[]\n}\n\nexport function createName(name: string, parent?: Domain): CompositeName {\n  let path: string[]\n  let fullName\n  let composite\n  const shortName = name\n  if (!parent) {\n    if (name.length === 0) {\n      path = []\n    } else {\n      path = [name]\n    }\n    fullName = name\n  } else {\n    composite = parent.compositeName\n    if (name.length === 0) {\n      path = composite.path\n      fullName = composite.fullName\n    } else {\n      path = composite.path.concat([name])\n      if (composite.fullName.length === 0) {\n        fullName = name\n      } else {\n        fullName = '' + composite.fullName + '/' + name\n      }\n    }\n  }\n  return {shortName, fullName, path}\n}\n","export function forIn<T>(\n  obj: Record<string, T>,\n  cb: (value: T, key: string) => void,\n) {\n  for (const key in obj) {\n    cb(obj[key], key)\n  }\n}\n\nexport const includes = (list: any[], item: any) => list.includes(item)\n\nexport const removeItem = (list: any[], item: any) => {\n  const pos = list.indexOf(item)\n  if (pos !== -1) {\n    list.splice(pos, 1)\n  }\n}\n\nexport function forEach<T>(\n  list: T[],\n  fn: (item: T, index: number, list: T[]) => void,\n): void\nexport function forEach<T>(list: Set<T>, fn: (item: T) => void): void\nexport function forEach(list: any, fn: Function) {\n  list.forEach(fn)\n}\n","import {observableSymbol} from './observable'\n\nimport {is, isObject, isFunction, assertObject, assertNodeSet} from './is'\nimport {Store, Event} from './unit.h'\n\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {nextUnitID} from './id'\nimport {callStackAReg, callARegStack, callStack} from './caller'\nimport {bind} from './bind'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, currentPage, forkPage, setCurrentPage} from './kernel'\n\nimport {Subscriber, Config} from './index.h'\nimport {createName, mapName, joinName} from './naming'\nimport {createLinkNode} from './forward'\nimport {watchUnit} from './watch'\nimport {createSubscription} from './subscription'\nimport {readTemplate, readSidRoot} from './region'\nimport {\n  getSubscribers,\n  getConfig,\n  getNestedConfig,\n  getStoreState,\n  getGraph,\n  getParent,\n} from './getter'\nimport {includes} from './collection'\nimport {throwError} from './throw'\nimport {DOMAIN, STORE, EVENT, MAP, FILTER, REG_A} from './tag'\n\nconst normalizeConfig = (part: any, config: any) => {\n  if (isObject(part)) {\n    normalizeConfig(getConfig(part), config)\n    if (part.name != null) {\n      if (isObject(part.name)) normalizeConfig(part.name, config)\n      else if (isFunction(part.name)) config.handler = part.name\n      else config.name = part.name\n    }\n    if (part.loc) config.loc = part.loc\n    if (part.sid || part.sid === null) config.sid = part.sid\n    if (part.handler) config.handler = part.handler\n    if (part.updateFilter) config.updateFilter = part.updateFilter\n    if (getParent(part)) config.parent = getParent(part)\n    if ('strict' in part) config.strict = part.strict\n    if (part.named) config.named = part.named\n    normalizeConfig(getNestedConfig(part), config)\n  }\n  return config\n}\n\nexport const applyParentHook = (\n  source: any,\n  target: any,\n  hookType: 'event' | 'effect' = EVENT,\n) => {\n  if (getParent(source)) getParent(source).hooks[hookType](target)\n}\n\nlet isStrict: boolean\nexport const initUnit = (\n  kind: any,\n  unit: any,\n  rawConfigA: any,\n  rawConfigB?: any,\n) => {\n  const config = normalizeConfig(\n    {\n      name: rawConfigB,\n      config: rawConfigA,\n    },\n    {},\n  )\n  const isDomain = kind === DOMAIN\n  const id = nextUnitID()\n  let {parent = null, sid = null, strict = true, named = null} = config\n  const name = named ? named : config.name || (isDomain ? '' : id)\n  const compositeName = createName(name, parent)\n\n  const meta: Record<string, any> = {\n    unit: unit.kind = kind,\n    name: unit.shortName = name,\n    sid: unit.sid = readSidRoot(sid),\n    named,\n    unitId: unit.id = id,\n  }\n  unit.parent = parent\n  unit.compositeName = compositeName\n  unit.defaultConfig = config\n  unit.thru = (fn: Function) => fn(unit)\n  unit.getType = () => compositeName.fullName\n  if (!isDomain) {\n    unit.subscribe = (observer: Subscriber<any>) => {\n      assertObject(observer)\n      return unit.watch(\n        isFunction(observer)\n          ? observer\n          : (upd: any) => {\n              if (observer.next) {\n                observer.next(upd)\n              }\n            },\n      )\n    }\n    unit[observableSymbol] = () => unit\n    const template = readTemplate()\n    if (template) meta.nativeTemplate = template\n  }\n  isStrict = strict\n  return meta\n}\nexport const createNamedEvent = (named: string) => createEvent({named})\n\nconst createComputation = (from: any, to: any, op: any, fn: Function) =>\n  createLinkNode(from, to, {\n    scope: {fn},\n    node: [step.compute({fn: callStack})],\n    meta: {op},\n  })\n\nconst createEventFiltration = (event: any, op: string, fn: any, node: any) => {\n  let config\n  if (isObject(fn)) {\n    config = fn\n    fn = fn.fn\n  }\n  const mapped = createEvent(joinName(event, ' â†’? *'), config)\n  createLinkNode(event, mapped, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n  return mapped\n}\n\nfunction callCreate(unit: any, template: any, payload: any, args: any[]): any {\n  const oldPage = currentPage\n  let page = null\n  if (template) {\n    page = currentPage\n    while (page && page.template !== template) {\n      page = getParent(page)\n    }\n  }\n  setCurrentPage(page)\n  const result = unit.create(payload, args)\n  setCurrentPage(oldPage)\n  return result\n}\n\nexport function createEvent<Payload = any>(\n  nameOrConfig?: any,\n  maybeConfig?: any,\n): Event<Payload> {\n  const event: any = (payload: Payload, ...args: any[]) => {\n    if (currentPage) {\n      return callCreate(event, template, payload, args)\n    }\n    return event.create(payload, args)\n  }\n  event.graphite = createNode({\n    meta: initUnit(EVENT, event, maybeConfig, nameOrConfig),\n    regional: true,\n  })\n  //eslint-disable-next-line no-unused-vars\n  event.create = (params: any, _: any) => {\n    const target = forkPage ? forkPage.find(event) : event\n    launch(target, params)\n    return params\n  }\n  event.watch = bind(watchUnit, event)\n  event.map = (fn: any) => {\n    let config\n    let name\n    if (isObject(fn)) {\n      config = fn\n      name = fn.name\n      fn = fn.fn\n    }\n    const mapped = createEvent(mapName(event, name), config)\n    createComputation(event, mapped, MAP, fn)\n    return mapped\n  }\n  event.filter = (fn: any) =>\n    createEventFiltration(event, FILTER, fn.fn ? fn : fn.fn, [\n      step.filter({fn: callStack}),\n    ])\n  event.filterMap = (fn: any) =>\n    createEventFiltration(event, 'filterMap', fn, [\n      step.compute({fn: callStack}),\n      step.check.defined(),\n    ])\n  event.prepend = (fn: any) => {\n    const contramapped: Event<any> = createEvent('* â†’ ' + event.shortName, {\n      parent: getParent(event),\n    })\n    const template = readTemplate()\n    if (template) {\n      getGraph(contramapped).seq.push(template.upward)\n    }\n    createComputation(contramapped, event, 'prepend', fn)\n    applyParentHook(event, contramapped)\n    return contramapped\n  }\n  const template = readTemplate()\n  return event\n}\n\nexport function createStore<State>(\n  defaultState: State,\n  props?: Config,\n): Store<State> {\n  const plainState = createStateRef(defaultState)\n  const oldState = createStateRef(defaultState)\n  const updates = createNamedEvent('updates')\n  const template = readTemplate()\n  plainState.after = [{type: 'copy', to: oldState}]\n  if (template) {\n    template.plain.push(plainState, oldState)\n  }\n  const plainStateId = plainState.id\n  const store: any = {\n    subscribers: new Map(),\n    updates,\n    defaultState,\n    stateRef: plainState,\n    getState() {\n      let targetRef = plainState\n      let reachedPage\n      if (currentPage) {\n        let page = currentPage\n        while (page && !page.reg[plainStateId]) {\n          page = getParent(page)\n        }\n        if (page) reachedPage = page\n      }\n      if (!reachedPage && forkPage && forkPage.reg[plainStateId]) {\n        reachedPage = forkPage\n      }\n      if (reachedPage) targetRef = reachedPage.reg[plainStateId]\n      return readRef(targetRef)\n    },\n    setState(state: any) {\n      let target\n      if (forkPage) {\n        target = forkPage.nodeMap[getGraph(store).id]\n      }\n      if (!target) target = store\n      launch({\n        target,\n        params: state,\n        defer: true,\n      })\n    },\n    reset(...units: any[]) {\n      for (const unit of units) store.on(unit, () => store.defaultState)\n      return store\n    },\n    on(nodeSet: any, fn: Function) {\n      assertNodeSet(nodeSet, '.on', 'first argument')\n      if (Array.isArray(nodeSet)) {\n        for (const event of nodeSet) {\n          onEvent(event, fn)\n        }\n      } else {\n        onEvent(nodeSet, fn)\n      }\n      return store\n    },\n    off(unit: any) {\n      const currentSubscription = getSubscribers(store).get(unit)\n      if (currentSubscription) {\n        currentSubscription()\n        getSubscribers(store).delete(unit)\n      }\n      return store\n    },\n    map(fn: any, firstState?: any) {\n      let config\n      let name\n      if (isObject(fn)) {\n        config = fn\n        name = fn.name\n        firstState = fn.firstState\n        fn = fn.fn\n      }\n      let lastResult\n      const storeState = store.getState()\n      const template = readTemplate()\n      if (template) {\n        lastResult = null\n      } else if (storeState !== undefined) {\n        lastResult = fn(storeState, firstState)\n      }\n\n      const innerStore: Store<any> = createStore(lastResult, {\n        name: mapName(store, name),\n        config,\n        strict: false,\n      })\n      const linkNode = updateStore(store, innerStore, MAP, false, fn)\n\n      getStoreState(innerStore).before = [\n        {\n          type: MAP,\n          fn,\n          from: plainState,\n        },\n      ]\n      if (template) {\n        if (!includes(template.plain, plainState)) {\n          if (!includes(linkNode.seq, template.loader)) {\n            linkNode.seq.unshift(template.loader)\n          }\n        }\n      }\n      return innerStore\n    },\n    watch(eventOrFn: any, fn?: Function) {\n      if (!fn || !is.unit(eventOrFn)) {\n        const subscription = watchUnit(store, eventOrFn)\n        const template = readTemplate()\n        if (template) {\n          template.watch.push({\n            of: plainState,\n            fn: eventOrFn,\n          })\n        } else {\n          eventOrFn(store.getState())\n        }\n        return subscription\n      }\n      if (!isFunction(fn)) throwError('second argument should be a function')\n      return eventOrFn.watch((payload: any) => fn(store.getState(), payload))\n    },\n  }\n  function onEvent(event: any, fn: Function) {\n    store.off(event)\n    getSubscribers(store).set(\n      event,\n      createSubscription(\n        updateStore(event, store, 'on', true, fn, updateFilter),\n      ),\n    )\n  }\n  const meta = initUnit(STORE, store, props)\n  const updateFilter = store.defaultConfig.updateFilter\n  store.graphite = createNode({\n    scope: {state: plainState},\n    node: [\n      step.check.defined(),\n      step.check.changed({\n        store: oldState,\n      }),\n      updateFilter && step.mov({store: oldState, to: REG_A}),\n      updateFilter &&\n        step.filter({\n          fn: (update, _, {a}) => updateFilter(update, a),\n        }),\n      step.update({\n        store: plainState,\n      }),\n      step.update({\n        store: oldState,\n      }),\n    ],\n    child: updates,\n    meta,\n    regional: true,\n  })\n  if (isStrict && defaultState === undefined)\n    throwError(\"current state can't be undefined, use null instead\")\n  own(store, [updates])\n  return store\n}\n\nconst updateStore = (\n  from: any,\n  store: Store<any>,\n  op: string,\n  stateFirst: boolean,\n  fn: Function,\n  updateFilter?: Function,\n) => {\n  const storeRef = getStoreState(store)\n  const node = [\n    step.mov({store: storeRef, to: REG_A}),\n    step.compute({\n      fn: stateFirst ? callARegStack : callStackAReg,\n    }),\n    step.check.defined(),\n    step.check.changed({store: storeRef}),\n    updateFilter &&\n      step.filter({\n        fn: (update, _, {a}) => updateFilter(update, a),\n      }),\n    step.update({store: storeRef}),\n  ]\n  const template = readTemplate()\n  if (template) {\n    node.unshift(template.loader)\n    node.push(template.upward)\n    if (is.store(from)) {\n      const ref = getStoreState(from)\n      if (!includes(template.plain, ref)) {\n        //if (!includes(node, template.loader)) {\n        //  node.unshift(template.loader)\n        //}\n        if (!includes(template.closure, ref)) {\n          template.closure.push(ref)\n        }\n        if (!storeRef.before) storeRef.before = []\n        storeRef.before.push({\n          type: 'closure',\n          of: ref,\n        })\n      }\n    } else {\n      //if (!includes(node, template.loader)) {\n      //  node.unshift(template.loader)\n      //}\n    }\n  }\n  return createLinkNode(from, store, {\n    scope: {fn},\n    node,\n    meta: {op},\n  })\n}\n","import {Store} from './unit.h'\nimport {createStore} from './createUnit'\nimport {createStateRef} from './stateRef'\nimport {step} from './typedef'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {is, isFunction, isObject} from './is'\nimport {unitObjectName} from './naming'\nimport {createLinkNode} from './forward'\nimport {throwError} from './throw'\nimport {readTemplate} from './region'\nimport {forIn, includes} from './collection'\nimport {BARRIER, MAP, REG_A, VALUE} from './tag'\n\nexport function combine(...args: any[]): Store<any> {\n  let handler\n  let stores\n  let config\n  onConfigNesting(args[0], (injectedData, userConfig) => {\n    config = injectedData\n    args = userConfig\n  })\n  const rawHandler = args[args.length - 1]\n  if (isFunction(rawHandler)) {\n    stores = args.slice(0, -1)\n    handler = rawHandler\n  } else {\n    stores = args\n  }\n\n  let structStoreShape\n  let shapeReady\n  if (stores.length === 1) {\n    const obj = stores[0]\n    /*\n      without edge case combine(Color, (Color) => '~')\n      */\n    if (!is.store(obj)) {\n      /*\n      case combine([R,G,B], ([R,G,B]) => '~')\n      case combine({R,G,B}, ({R,G,B}) => '~')\n\n      edge case combine([Color], ([Color]) => '~')\n      edge case combine({Color}, ({Color}) => '~')\n\n      edge case combine([R,G,B])\n      edge case combine({R,G,B})\n\n      edge case combine([Color])\n      edge case combine({Color})\n      */\n      structStoreShape = obj\n      shapeReady = true\n    }\n  }\n  if (!shapeReady) {\n    /*\n    case combine(R,G,B, (R,G,B) => '~')\n    */\n    structStoreShape = stores\n    /*\n    without edge case combine(R,G,B)\n    without edge case combine(Color)\n    */\n    if (handler) {\n      handler = spreadArgs(handler)\n    }\n  }\n  if (!isObject(structStoreShape)) throwError('shape should be an object')\n  return storeCombination(\n    Array.isArray(structStoreShape),\n    structStoreShape,\n    config,\n    handler,\n  )\n}\n\nconst spreadArgs = (fn: Function) => (list: any[]) => fn(...list)\n\nconst storeCombination = (\n  isArray: boolean,\n  obj: any,\n  config?: string,\n  fn?: (upd: any) => any,\n) => {\n  const clone = isArray ? (list: any) => list.slice() : (obj: any) => ({...obj})\n  const defaultState: any = isArray ? [] : {}\n  const template = readTemplate()\n  const stateNew = clone(defaultState)\n  const rawShape = createStateRef(stateNew)\n  const isFresh = createStateRef(true)\n  rawShape.type = isArray ? 'list' : 'shape'\n  if (template) {\n    template.plain.push(rawShape, isFresh)\n  }\n  const store = createStore(stateNew, {\n    name: config ? config : unitObjectName(obj),\n  })\n  getGraph(store).meta.isCombine = true\n  const node = [\n    step.check.defined(),\n    step.mov({\n      store: rawShape,\n      to: REG_A,\n    }),\n    //prettier-ignore\n    step.filter({\n      fn: (upd, {key}, {a}) => upd !== a[key],\n    }),\n    step.mov({\n      store: isFresh,\n      to: 'b',\n    }),\n    step.compute({\n      fn(upd, {clone, key}, reg) {\n        if (reg.b) {\n          reg.a = clone(reg.a)\n        }\n        reg.a[key] = upd\n      },\n    }),\n    step.mov({\n      from: REG_A,\n      target: rawShape,\n    }),\n    step.mov({\n      from: VALUE,\n      store: false,\n      target: isFresh,\n    }),\n    step.barrier({priority: BARRIER}),\n    step.mov({\n      from: VALUE,\n      store: true,\n      target: isFresh,\n    }),\n    step.mov({store: rawShape}),\n    fn && step.compute({fn}),\n    step.check.changed({\n      store: getStoreState(store),\n    }),\n  ]\n  const before: any[] = (rawShape.before = [])\n  forIn(obj, (child: Store<any> | any, key) => {\n    if (!is.store(child)) {\n      stateNew[key] = defaultState[key] = child\n      return\n    }\n    defaultState[key] = child.defaultState\n    stateNew[key] = child.getState()\n    const linkNode = createLinkNode(child, store, {\n      scope: {key, clone},\n      node,\n      meta: {op: 'combine'},\n    })\n    const childRef = getStoreState(child)\n    before.push({\n      type: 'field',\n      field: key,\n      from: childRef,\n    })\n    if (template) {\n      if (!includes(template.plain, childRef)) {\n        linkNode.seq.unshift(template.loader)\n      }\n    }\n  })\n\n  store.defaultShape = obj\n  rawShape.after = [\n    fn\n      ? {\n          type: MAP,\n          to: getStoreState(store),\n          fn,\n        }\n      : {\n          type: 'copy',\n          to: getStoreState(store),\n        },\n  ]\n  if (!template) {\n    store.defaultState = fn\n      ? (getStoreState(store).current = fn(stateNew))\n      : defaultState\n  }\n  return store\n}\n","export function createDefer(): {\n  rs: (value: any) => any\n  rj: (value: any) => any\n  req: Promise<any>\n} {\n  const result = {} as {\n    rs: (value: any) => any\n    rj: (value: any) => any\n    req: Promise<any>\n  }\n  result.req = new Promise((rs, rj) => {\n    result.rs = rs\n    result.rj = rj\n  })\n  result.req.catch(err => {})\n  return result\n}\n","import {step} from './typedef'\nimport {getForkPage, getGraph, getParent} from './getter'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {launch, setForkPage, forkPage, isWatch} from './kernel'\nimport {createNamedEvent, createStore, createEvent} from './createUnit'\nimport {createDefer} from './defer'\nimport {isObject, isFunction} from './is'\nimport {throwError} from './throw'\nimport {EFFECT} from './tag'\n\nexport function createEffect<Payload, Done>(\n  nameOrConfig: any,\n  maybeConfig: any,\n) {\n  const instance: any = createEvent(nameOrConfig, maybeConfig)\n  let handler =\n    instance.defaultConfig.handler ||\n    (() => throwError(`no handler used in ${instance.getType()}`))\n  const node = getGraph(instance)\n  node.meta.onCopy = ['runner']\n  node.meta.unit = instance.kind = EFFECT\n  instance.use = (fn: Function) => {\n    if (!isFunction(fn)) throwError('.use argument should be a function')\n    handler = fn\n    return instance\n  }\n  const anyway = (instance.finally = createNamedEvent('finally'))\n  const done = (instance.done = (anyway as any).filterMap({\n    named: 'done',\n    fn({status, params, result}: any) {\n      if (status === 'done') return {params, result}\n    },\n  }))\n  const fail = (instance.fail = (anyway as any).filterMap({\n    named: 'fail',\n    fn({status, params, error}: any) {\n      if (status === 'fail') return {params, error}\n    },\n  }))\n  const doneData = (instance.doneData = done.map({\n    named: 'doneData',\n    fn: ({result}: any) => result,\n  }))\n  const failData = (instance.failData = fail.map({\n    named: 'failData',\n    fn: ({error}: any) => error,\n  }))\n\n  const effectRunner = createNode({\n    scope: {\n      getHandler: instance.use.getCurrent = () => handler,\n      finally: anyway,\n    },\n    node: [\n      step.run({\n        fn({params, req}, {finally: anyway, getHandler}, stack) {\n          const onResolve = onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          })\n          const onReject = onSettled({\n            params,\n            req,\n            ok: false,\n            anyway,\n            stack,\n          })\n          let result\n          try {\n            result = getHandler()(params)\n          } catch (err) {\n            return void onReject(err)\n          }\n          if (isObject(result) && isFunction(result.then)) {\n            result.then(onResolve, onReject)\n          } else {\n            onResolve(result)\n          }\n        },\n      }),\n    ],\n    meta: {\n      op: 'fx',\n      fx: 'runner',\n      onCopy: ['finally'],\n    },\n  })\n  node.scope.runner = effectRunner\n  node.seq.push(\n    step.compute({\n      fn(params, scope, stack) {\n        // empty stack means that this node was launched directly\n        if (!getParent(stack)) return params\n        return {\n          params,\n          req: {\n            rs(data: any) {},\n            rj(data: any) {},\n          },\n        }\n      },\n    }),\n    step.run({\n      fn(upd, {runner}, stack) {\n        launch({\n          target: runner,\n          params: upd,\n          defer: true,\n          forkPage: getForkPage(stack),\n        })\n        return upd.params\n      },\n    }),\n  )\n  instance.create = (params: Payload) => {\n    const req = createDefer()\n    const payload = {params, req}\n    if (forkPage) {\n      if (!isWatch) {\n        const savedFork = forkPage\n        req.req\n          .finally(() => {\n            setForkPage(savedFork)\n          })\n          .catch(() => {})\n      }\n      launch(forkPage.find(instance), payload)\n    } else {\n      launch(instance, payload)\n    }\n    return req.req\n  }\n\n  const inFlight = (instance.inFlight = createStore(0, {named: 'inFlight'})\n    .on(instance, x => x + 1)\n    .on(anyway, x => x - 1))\n\n  const pending = (instance.pending = inFlight.map({\n    //@ts-ignore\n    fn: amount => amount > 0,\n    named: 'pending',\n  }))\n\n  own(instance, [\n    anyway,\n    done,\n    fail,\n    doneData,\n    failData,\n    pending,\n    inFlight,\n    effectRunner,\n  ])\n  return instance\n}\n\nexport const onSettled = ({\n  params,\n  req,\n  ok,\n  anyway,\n  stack,\n}: {\n  params: any\n  req: {\n    rs(_: any): any\n    rj(_: any): any\n  }\n  ok: boolean\n  anyway: any\n  stack: any\n}) => (data: any) =>\n  launch({\n    target: [anyway, sidechain],\n    params: [\n      ok\n        ? {\n            status: 'done',\n            params,\n            result: data,\n          }\n        : {\n            status: 'fail',\n            params,\n            error: data,\n          },\n      {\n        fn: ok ? req.rs : req.rj,\n        value: data,\n      },\n    ],\n    defer: true,\n    page: stack.page,\n    forkPage: getForkPage(stack),\n  })\n\nexport const sidechain = createNode({\n  node: [\n    step.run({\n      fn({fn, value}) {\n        fn(value)\n      },\n    }),\n  ],\n  meta: {op: 'fx', fx: 'sidechain'},\n})\n","import {Store, Event, Effect} from './unit.h'\nimport {createEvent} from './createUnit'\nimport {forward} from './forward'\nimport {unitObjectName} from './naming'\nimport {assertNodeSet} from './is'\n\nexport function merge<T>(\n  events: Array<Event<T> | Store<T> | Effect<T, any, any>>,\n  config?: object,\n): Event<T> {\n  const result = createEvent(config || unitObjectName(events, 'merge'))\n  assertNodeSet(events, 'merge', 'first argument')\n  forward({\n    from: events,\n    to: result,\n    meta: {op: 'merge'},\n  })\n  return result\n}\n","import {combine} from './combine'\nimport {step} from './typedef'\nimport {createStateRef, readRef} from './stateRef'\nimport {callStackAReg, callARegStack} from './caller'\nimport {processArgsToConfig} from './config'\nimport {getStoreState, getGraph} from './getter'\nimport {own} from './own'\nimport {assertNodeSet, is, isObject} from './is'\nimport {createStore} from './createUnit'\nimport {createEvent} from './createUnit'\nimport {createLinkNode} from './forward'\nimport {createNode} from './createNode'\nimport {readTemplate} from './region'\nimport {throwError} from './throw'\nimport {includes, forEach} from './collection'\nimport {REG_A, SAMPLE, SAMPLER, STACK, STORE, VALUE} from './tag'\nimport {merge} from './merge'\n\nconst sampleConfigFields = ['source', 'clock', 'target']\n\nfunction validateSampleConfig(config: any) {\n  let atLeastOneFieldExists = false\n  forEach(sampleConfigFields, field => {\n    if (field in config) {\n      if (config[field] == null) {\n        throwError(`sample: ${field} should be defined`)\n      }\n      atLeastOneFieldExists = true\n    }\n  })\n  return atLeastOneFieldExists\n}\n\nexport function sample(...args: any): any {\n  let target\n  let name\n  let [[source, clock, fn], metadata] = processArgsToConfig(args)\n  let sid\n  let greedy\n  //config case\n  if (clock === undefined && isObject(source) && validateSampleConfig(source)) {\n    clock = source.clock\n    fn = source.fn\n    greedy = source.greedy\n    //optional target & name accepted only from config\n    target = source.target\n    name = source.name\n    sid = source.sid\n    source = source.source\n  }\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'sample', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) {\n    source = combine(source)\n  }\n  if (clock === undefined) {\n    //still undefined!\n    clock = source\n  }\n  assertNodeSet(clock, 'sample', 'clock')\n  name = metadata || name || source.shortName\n  const template = readTemplate()\n  const isUpward = !!target\n  if (!target) {\n    if (is.store(source) && is.store(clock)) {\n      const initialState = fn\n        ? fn(readRef(getStoreState(source)), readRef(getStoreState(clock)))\n        : readRef(getStoreState(source))\n      target = createStore(initialState, {name, sid})\n    } else {\n      target = createEvent(name)\n      if (template) {\n        getGraph(target).seq.push(template.loader)\n      }\n    }\n  }\n  const targetTemplate =\n    isUpward && is.unit(target) && getGraph(target).meta.nativeTemplate\n  if (is.store(source)) {\n    const sourceRef = getStoreState(source)\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {fn, targetTemplate},\n        node: [\n          template && template.loader,\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({\n            store: sourceRef,\n            to: fn ? REG_A : STACK,\n          }),\n          fn && step.compute({fn: callARegStack}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: STORE},\n      }),\n    ])\n    if (template) {\n      if (\n        !includes(template.plain, sourceRef) &&\n        !includes(template.closure, sourceRef)\n      ) {\n        template.closure.push(sourceRef)\n      }\n    }\n  } else {\n    const hasSource = createStateRef(false)\n    const sourceState = createStateRef()\n    const clockState = createStateRef()\n    if (template) {\n      template.plain.push(hasSource, sourceState, clockState)\n    }\n    createNode({\n      parent: source,\n      node: [\n        step.update({store: sourceState}),\n        step.mov({\n          from: VALUE,\n          store: true,\n          target: hasSource,\n        }),\n      ],\n      family: {\n        owners: [source, target, clock],\n        links: target,\n      },\n      meta: {op: SAMPLE, sample: 'source'},\n      regional: true,\n    })\n    own(source, [\n      createLinkNode(clock, target, {\n        scope: {\n          fn,\n          targetTemplate,\n        },\n        node: [\n          template && template.loader,\n          step.update({store: clockState}),\n          step.mov({store: hasSource}),\n          step.filter({fn: hasSource => hasSource}),\n          //@ts-ignore\n          !greedy && step.barrier({priority: SAMPLER}),\n          step.mov({store: sourceState}),\n          step.mov({\n            store: clockState,\n            to: REG_A,\n          }),\n          fn && step.compute({fn: callStackAReg}),\n          template && isUpward && template.upward,\n        ],\n        meta: {op: SAMPLE, sample: 'clock'},\n      }),\n    ])\n  }\n  return target\n}\n","import {getForkPage, getGraph, getLinks, getOwners, getParent} from './getter'\nimport {bind} from './bind'\nimport {createDefer} from './defer'\nimport {watchUnit} from './watch'\nimport {is, isObject} from './is'\nimport {throwError} from './throw'\nimport {launch, forkPage, setForkPage, currentPage} from './kernel'\nimport {createNode} from './createNode'\nimport {step} from './typedef'\nimport {Domain, Store} from './unit.h'\nimport {Node, StateRef} from './index.h'\nimport {removeItem, forEach, includes, forIn} from './collection'\nimport {DOMAIN, STORE, EVENT, EFFECT, SAMPLER, MAP, FORK_COUNTER} from './tag'\n\n/**\n hydrate state on client\n\n const root = createDomain()\n hydrate(root, {\n  values: window.__initialState__\n})\n\n */\nexport function hydrate(domain: Domain, {values}: {values: any}) {\n  const isScope = isObject(domain) && (domain as any).cloneOf\n  if (!is.domain(domain) && !isScope) {\n    throwError('first argument of hydrate should be domain or scope')\n  }\n  if (!isObject(values)) {\n    throwError('values property should be an object')\n  }\n  const normalizedValues = normalizeValues(values)\n  let storeWatches: Node[]\n  let storeWatchesRefs: any[]\n  if (isScope) {\n    storeWatches = []\n    storeWatchesRefs = []\n    forIn(normalizedValues, (val, sid) => {\n      //@ts-ignore\n      const node = domain.sidMap[sid]\n      if (node) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(val)\n        ;(domain as any).changedStores.add(node.meta.forkOf.id)\n      }\n    })\n  } else {\n    const fillResult = fillValues({\n      flatGraphUnits: flatGraph(domain),\n      values: normalizedValues,\n      collectWatches: true,\n    })\n    storeWatches = fillResult.storeWatches\n    storeWatchesRefs = fillResult.storeWatchesRefs.map(({current}) => current)\n  }\n\n  launch({\n    target: storeWatches,\n    params: storeWatchesRefs,\n    forkPage: isScope ? domain : false,\n  })\n}\n\nfunction fillValues({\n  flatGraphUnits,\n  values,\n  collectWatches,\n}: {\n  flatGraphUnits: Node[]\n  values: Record<string, any>\n  collectWatches: boolean\n}) {\n  const storeWatches: Node[] = []\n  const storeWatchesRefs: StateRef[] = []\n  const refsMap = {} as Record<string, StateRef>\n  const predefinedRefs = new Set()\n  const valuesSidList = Object.getOwnPropertyNames(values)\n  forEach(flatGraphUnits, node => {\n    const {reg} = node\n    const {op, unit, sid} = node.meta\n    if (unit === STORE) {\n      if (sid && includes(valuesSidList, sid)) {\n        const {state} = node.scope\n        state.current = values[sid]\n        predefinedRefs.add(state)\n      }\n    }\n    if (collectWatches && op === 'watch') {\n      const owner = node.family.owners[0]\n      if (owner.meta.unit === STORE) {\n        storeWatches.push(node)\n        storeWatchesRefs.push(owner.scope.state)\n      }\n    }\n    forIn(reg, (ref, id) => {\n      refsMap[id] = ref\n    })\n  })\n  const refGraph = createRefGraph(refsMap)\n  const result = toposort(refGraph)\n  forEach(result, id => {\n    execRef(refsMap[id])\n  })\n\n  return {\n    storeWatches,\n    storeWatchesRefs,\n  }\n\n  function execRef(ref: StateRef) {\n    let isFresh = false\n    if (ref.before && !predefinedRefs.has(ref)) {\n      forEach(ref.before, cmd => {\n        switch (cmd.type) {\n          case MAP: {\n            const from = cmd.from\n            ref.current = cmd.fn(from.current)\n            break\n          }\n          case 'field': {\n            const from = cmd.from\n            if (!isFresh) {\n              isFresh = true\n              if (Array.isArray(ref.current)) {\n                ref.current = [...ref.current]\n              } else {\n                ref.current = {...ref.current}\n              }\n            }\n            ref.current[cmd.field] = from.current\n            break\n          }\n          case 'closure':\n            break\n        }\n      })\n    }\n    if (!ref.after) return\n    const value = ref.current\n    forEach(ref.after, cmd => {\n      const to = cmd.to\n      // if (predefinedRefs.has(to)) continue\n      switch (cmd.type) {\n        case 'copy':\n          to.current = value\n          break\n        case MAP:\n          to.current = cmd.fn(value)\n          break\n      }\n    })\n  }\n}\n\nfunction createRefGraph(refsMap: Record<string, StateRef>) {\n  const items = Object.values(refsMap)\n  const refGraph = {} as Record<string, string[]>\n  forEach(items, ({id}) => {\n    refGraph[id] = []\n  })\n  //prettier-ignore\n  forEach(items, ({id, before, after}) => {\n    before && forEach(before, cmd => {\n      refGraph[cmd.from.id].push(id)\n    })\n    after && forEach(after, cmd => {\n      refGraph[id].push(cmd.to.id)\n    })\n  })\n  return refGraph\n}\n\n/**\n serialize state on server\n */\nexport function serialize(\n  {clones, changedStores}: any,\n  {\n    ignore = [],\n    onlyChanges,\n  }: {ignore?: Array<Store<any>>; onlyChanges?: boolean} = {},\n) {\n  const result = {} as Record<string, any>\n  forEach(clones, ({meta, scope, reg}) => {\n    if (meta.unit !== STORE) return\n    const {sid} = meta\n    if (!sid) return\n    if (onlyChanges || meta.isCombine) {\n      if (!changedStores.has(meta.forkOf.id)) return\n    }\n    result[sid] = reg[scope.state.id].current\n  })\n  forEach(ignore, ({sid}) => {\n    if (sid) delete result[sid]\n  })\n  return result\n}\n\n/** bind event to scope */\nexport function scopeBind(unit: any) {\n  if (!forkPage) {\n    throwError('scopeBind cannot be called outside of forked .watch')\n  }\n  const savedForkPage = forkPage\n  const localUnit = forkPage.find(unit)\n  return is.effect(unit)\n    ? (params: any) => {\n        const req = createDefer()\n        launch({\n          target: localUnit,\n          params: {\n            params,\n            req,\n          },\n          forkPage: savedForkPage,\n        })\n      }\n    : (params: any) => {\n        launch({target: localUnit, params, forkPage: savedForkPage})\n        return params\n      }\n}\n\nfunction normalizeValues(\n  values: Map<Store<any>, any> | Record<string, any>,\n  assertEach = (key: any, value: any) => {},\n) {\n  if (values instanceof Map) {\n    const result = {} as Record<string, any>\n    for (const [key, value] of values) {\n      if (!is.unit(key)) throwError('Map key should be a unit')\n      assertEach(key, value)\n      result[key.sid!] = value\n    }\n    return result\n  }\n  return values\n}\n\nexport function fork(\n  domain: Domain,\n  {values, handlers}: {values?: any; handlers?: any} = {},\n) {\n  if (!is.domain(domain)) throwError('first argument of fork should be domain')\n  const needToFill = !!values\n  values = normalizeValues(\n    values || {},\n    unit =>\n      !is.store(unit) &&\n      throwError('Values map can contain only stores as keys'),\n  )\n  const forked = cloneGraph(domain)\n  if (needToFill) {\n    fillValues()\n  }\n  if (handlers) {\n    handlers = normalizeValues(\n      handlers,\n      unit =>\n        !is.effect(unit) &&\n        throwError(`Handlers map can contain only effects as keys`),\n    )\n    const handlerKeys = Object.keys(handlers)\n    forEach(forked.clones, ({scope, meta}) => {\n      if (meta.sid && includes(handlerKeys, meta.sid)) {\n        scope.runner.scope.getHandler = () => handlers[meta.sid]\n      }\n    })\n  }\n  return forked\n\n  function fillValues() {\n    const sourceList = flatGraph(domain)\n    const sourceRefsMap = {} as Record<string, StateRef>\n    const refsMap = {} as Record<string, StateRef>\n    const predefinedRefs = new Set()\n    const templateOwnedRefs = new Set<string>()\n    const valuesSidList = Object.getOwnPropertyNames(values)\n    forEach(sourceList, ({reg, meta}) => {\n      const {nativeTemplate} = meta\n      forIn(reg, (ref, id) => {\n        sourceRefsMap[id] = ref\n        if (nativeTemplate) {\n          templateOwnedRefs.add(id)\n        }\n      })\n    })\n    forEach(forked.clones, node => {\n      const {reg} = node\n      const {unit, sid} = node.meta\n      if (unit === STORE) {\n        if (sid && includes(valuesSidList, sid)) {\n          const {state} = node.scope\n          reg[state.id].current = values[sid]\n          predefinedRefs.add(state)\n          forked.changedStores.add(node.meta.forkOf.id)\n        }\n      }\n      forIn(reg, (ref, id) => {\n        refsMap[id] = ref\n      })\n    })\n    const refGraph = createRefGraph(sourceRefsMap)\n    const result = toposort(refGraph, templateOwnedRefs)\n    forEach(result, id => {\n      execRef(refsMap[id], sourceRefsMap[id])\n    })\n\n    function execRef(ref: StateRef, sourceRef?: StateRef) {\n      let isFresh = false\n      if (sourceRef && sourceRef.before && !predefinedRefs.has(ref)) {\n        forEach(sourceRef.before, cmd => {\n          switch (cmd.type) {\n            case MAP: {\n              const from = refsMap[cmd.from.id]\n              ref.current = cmd.fn(from.current)\n              break\n            }\n            case 'field': {\n              const from = refsMap[cmd.from.id]\n              if (!isFresh) {\n                isFresh = true\n                if (Array.isArray(ref.current)) {\n                  ref.current = [...ref.current]\n                } else {\n                  ref.current = {...ref.current}\n                }\n              }\n              ref.current[cmd.field] = from.current\n              break\n            }\n            case 'closure':\n              break\n          }\n        })\n      }\n      if (!sourceRef || !sourceRef.after) return\n      const value = ref.current\n      forEach(sourceRef.after, cmd => {\n        const to = refsMap[cmd.to.id]\n        // if (predefinedRefs.has(to)) continue\n        switch (cmd.type) {\n          case 'copy':\n            to.current = value\n            break\n          case MAP:\n            to.current = cmd.fn(value)\n            break\n        }\n      })\n    }\n  }\n}\n\nfunction toposort(rawGraph: Record<string, string[]>, ignore?: Set<string>) {\n  const graph = {} as Record<string, string[]>\n  for (const id in rawGraph) {\n    graph[id] = [...new Set(rawGraph[id])]\n  }\n  const result = [] as string[]\n  const visited = {} as Record<string, boolean>\n  const temp = {} as Record<string, boolean>\n  for (const node in graph) {\n    if (!visited[node] && !temp[node]) {\n      topologicalSortHelper(node)\n    }\n  }\n  result.reverse()\n  if (ignore && ignore.size > 0) {\n    const processed = [] as string[]\n    const ignored = [...ignore]\n    let item: string | void\n    while ((item = ignored.shift())) {\n      processed.push(item)\n      forEach(graph[item], child => {\n        if (includes(processed, child) || includes(ignored, child)) return\n        ignored.push(child)\n      })\n    }\n    forEach(processed, item => {\n      removeItem(result, item)\n    })\n  }\n  return result\n\n  function topologicalSortHelper(node: string) {\n    temp[node] = true\n    const neighbors = graph[node]\n    for (let i = 0; i < neighbors.length; i++) {\n      const n = neighbors[i]\n      if (temp[n]) {\n        continue\n        // throw Error('found cycle in DAG')\n      }\n      if (!visited[n]) {\n        topologicalSortHelper(n)\n      }\n    }\n    temp[node] = false\n    visited[node] = true\n    result.push(node)\n  }\n}\n\nexport function allSettled(\n  start: any,\n  {scope, params: ctx}: {scope: any; params?: any},\n) {\n  if (!is.unit(start))\n    return Promise.reject(Error('first argument should be unit'))\n  const defer = createDefer()\n  //@ts-ignore\n  defer.parentFork = forkPage\n  const {forkInFlightCounter} = scope.graphite.scope\n  forkInFlightCounter.scope.defers.push(defer)\n  const contextStart = scope.find(start)\n\n  const launchUnits = [contextStart]\n  const launchParams = []\n  if (is.effect(start)) {\n    launchParams.push({\n      params: ctx,\n      req: {\n        rs(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'done', value}\n        },\n        rj(value: any) {\n          //@ts-ignore\n          defer.value = {status: 'fail', value}\n        },\n      },\n    })\n  } else {\n    launchParams.push(ctx)\n  }\n  launchUnits.push(forkInFlightCounter)\n  launchParams.push(null)\n  launch({\n    target: launchUnits,\n    params: launchParams,\n    forkPage: scope,\n  })\n  return defer.req\n}\n\nfunction flatGraph(unit: any) {\n  const list = [] as Node[]\n  ;(function traverse(node) {\n    if (includes(list, node)) return\n    list.push(node)\n    forEachRelatedNode(node, traverse)\n  })(getGraph(unit))\n  return list\n}\n\n/**\n everything we need to clone graph section\n reachable from given unit\n */\nfunction cloneGraph(unit: any) {\n  const list = flatGraph(unit)\n  const refs = new Map()\n  const scope = {\n    defers: [],\n    inFlight: 0,\n    fxID: 0,\n  }\n  const changedStores = new Set<string>()\n  const putStoreToChanged = step.compute({\n    fn(upd, _, stack) {\n      if (\n        !stack.node.meta.isCombine ||\n        (getParent(stack) && getParent(stack).node.meta.op !== 'combine')\n      )\n        changedStores.add(stack.node.meta.forkOf.id)\n      return upd\n    },\n  })\n  const forkInFlightCounter = createNode({\n    scope,\n    node: [\n      step.compute({\n        fn(_, scope, stack) {\n          if (!stack.parent) {\n            scope.fxID += 1\n            return\n          }\n          if (stack.parent.node.meta.named === 'finally') {\n            scope.inFlight -= 1\n          } else {\n            scope.inFlight += 1\n            scope.fxID += 1\n          }\n        },\n      }),\n      step.barrier({priority: SAMPLER}),\n      step.run({\n        fn(_, scope) {\n          const {inFlight, defers, fxID} = scope\n          if (inFlight > 0 || defers.length === 0) return\n          Promise.resolve().then(() => {\n            if (scope.fxID !== fxID) return\n            forEach(defers.splice(0, defers.length), (defer: any) => {\n              setForkPage(defer.parentFork)\n              defer.rs(defer.value)\n            })\n          })\n        },\n      }),\n    ],\n    meta: {unit: FORK_COUNTER},\n  })\n  const nodeMap = {} as Record<string, Node>\n  const sidMap = {} as Record<string, Node>\n  const clones = list.map(node => {\n    const {seq, next, meta, scope} = node\n    const result = createNode({\n      node: seq.map(step => ({\n        id: step.id,\n        type: step.type,\n        data: {...step.data},\n        hasRef: step.hasRef,\n      })) as any,\n      child: [...next],\n      meta: {forkOf: node, ...meta},\n      scope: {...scope},\n    })\n    result.family = {\n      type: node.family.type,\n      links: [...getLinks(node)],\n      owners: [...getOwners(node)],\n    }\n    nodeMap[node.id] = result\n    if (meta.sid) sidMap[meta.sid] = result\n    return result\n  })\n  const page = {} as Record<string, StateRef>\n  forEach(clones, node => {\n    const {\n      reg,\n      scope,\n      meta: {onCopy, op, unit},\n    } = node\n    forIn(reg, (ref, id) => {\n      let newRef = refs.get(ref)\n      if (!newRef) {\n        newRef = {\n          id: ref.id,\n          current: ref.current, //ref.id in values ? values[ref.id] : ref.current,\n        }\n        refs.set(ref, newRef)\n      }\n      page[id] = reg[id] = newRef\n    })\n    if (onCopy) {\n      forEach(onCopy, (copyField: string) => {\n        const origValue = scope[copyField]\n        scope[copyField] = Array.isArray(origValue)\n          ? origValue.map(findClone)\n          : findClone(origValue)\n      })\n    }\n    forEachRelatedNode(node, (node, i, siblings) => {\n      siblings[i] = findClone(node)\n    })\n    const itemTag = op || unit\n    switch (itemTag) {\n      case STORE:\n        node.meta.wrapped = wrapStore(node)\n        if (node.meta.sid) node.seq.push(putStoreToChanged)\n        break\n      // case EVENT:\n      //   break\n      case EFFECT:\n        node.next.push(forkInFlightCounter)\n        break\n      case 'fx': {\n        scope.finally.next.push(forkInFlightCounter)\n        break\n      }\n      // case 'watch':\n      //   break\n    }\n  })\n\n  return {\n    cloneOf: unit,\n    changedStores,\n    nodeMap,\n    sidMap,\n    clones,\n    find: findClone,\n    reg: page,\n    getState: (store: any) => findClone(store).meta.wrapped.getState(),\n    graphite: createNode({\n      family: {\n        type: DOMAIN,\n        links: [forkInFlightCounter, ...clones],\n      },\n      meta: {unit: 'fork'},\n      scope: {forkInFlightCounter},\n    }),\n  }\n\n  function findClone(unit: any) {\n    const node = getGraph(unit)\n    const index = list.indexOf(node)\n    if (index === -1) {\n      let unitName = 'unit'\n      if (unit !== node && unit.id !== unit.shortName) unitName = unit.shortName\n      throwError(`${unitName} not found in forked scope`)\n    }\n    return clones[index]\n  }\n}\n\nfunction wrapStore(node: Node) {\n  return {\n    kind: STORE,\n    getState: () => node.reg[node.scope.state.id].current,\n    updates: {\n      watch: bind(watchUnit, node),\n    },\n    graphite: node,\n    family: node.family,\n  }\n}\n\nfunction forEachRelatedNode(\n  node: Node,\n  cb: (node: Node, index: number, siblings: Node[]) => void,\n) {\n  const unit = node.meta.unit\n  if (unit === 'fork' || unit === FORK_COUNTER) return\n  forEach(node.next, cb)\n  forEach(getOwners(node), cb)\n  forEach(getLinks(node), cb)\n}\n","export const observableSymbol: any =\n  (typeof Symbol !== 'undefined' && Symbol.observable) || '@@observable'\n","import {kind} from './index.h'\nimport {DOMAIN, STORE, EVENT, EFFECT} from './tag'\nimport {isObject, isFunction} from './is'\n\nexport const unit = (obj: any) =>\n  (isFunction(obj) || isObject(obj)) && 'kind' in obj\n\nconst is = (type: kind) => (obj: any) => unit(obj) && obj.kind === type\n\nexport const store = is(STORE)\nexport const event = is(EVENT)\nexport const effect = is(EFFECT)\nexport const domain = is(DOMAIN)\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","const idCount = () => {\n  let id = 0\n  return () => (++id).toString(36)\n}\n\nexport const nextUnitID = idCount()\nexport const nextStepID = idCount()\nexport const nextNodeID = idCount()\n","export const bind = (fn: Function, target: any) => fn.bind(null, target)\nexport const bind2 = (fn: Function, target: any, arg: any) =>\n  fn.bind(null, target, arg)\n","import {StateRef, Run, Filter, Compute, Barrier, Check, Mov} from './index.h'\nimport {nextStepID} from './id'\nimport {bind2} from './bind'\nimport {BARRIER, FILTER, STACK, STORE} from './tag'\n\nconst cmd = (type: any, hasRef: boolean, data: any): any => ({\n  id: nextStepID(),\n  type,\n  data,\n  hasRef,\n})\n\nlet nextBarrierID = 0\n\nexport const barrier: (data: {priority?: 'barrier' | 'sampler'}) => Barrier = ({\n  priority = BARRIER,\n}) =>\n  cmd(BARRIER, false, {\n    barrierID: ++nextBarrierID,\n    priority,\n  })\nexport const mov: (data: {\n  from?: 'value' | 'store' | 'stack' | 'a' | 'b'\n  to?: 'stack' | 'a' | 'b' | 'store'\n  store?: any\n  target?: any\n}) => Mov = ({from = STORE, store, target, to = target ? STORE : STACK}) =>\n  cmd('mov', from === STORE, {from, store, to, target})\nexport const check: {\n  defined(): Check\n  changed(config: {store: StateRef}): Check\n} = {\n  defined: () => cmd('check', false, {type: 'defined'}),\n  changed: ({store}) => cmd('check', true, {type: 'changed', store}),\n}\nexport const compute: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Compute = bind2(cmd, 'compute', false)\nexport const filter: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Filter = bind2(cmd, FILTER, false)\nexport const run: (data: {\n  fn: (data: any, scope: {[key: string]: any}, stack: any) => any\n}) => Run = bind2(cmd, 'run', false)\nexport const update: (data: {store: StateRef}) => Mov = ({store}) =>\n  mov({from: STACK, target: store})\n","import {StateRef} from './index.h'\nimport {nextStepID} from './id'\n\nexport const createStateRef = (current?: any): StateRef => ({\n  id: nextStepID(),\n  current,\n})\nexport const readRef = ({current}: StateRef | {current: any}) => current\n","export const callStackAReg = (stack: any, {fn}: any, {a}: any) => fn(stack, a)\nexport const callARegStack = (stack: any, {fn}: any, {a}: any) => fn(a, stack)\nexport const callStack = (stack: any, {fn}: any, _: any) => fn(stack)\n","import {Node, StateRef} from './index.h'\n\nexport const getGraph = (graph: any): Node => graph.graphite || graph\nexport const getOwners = (node: Node) => node.family.owners\nexport const getLinks = (node: Node) => node.family.links\nexport const getStoreState = (store: any): StateRef => store.stateRef\nexport const getConfig = (opts: any) => opts.config\nexport const getNestedConfig = (opts: any) => opts.É”\nexport const getValue = (stack: any) => stack.value\nexport const getSubscribers = (store: any) => store.subscribers\nexport const getParent = (unit: any) => unit.parent\nexport const getForkPage = (val: any) => val.forkPage\n","import {NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks} from './getter'\nimport {DOMAIN, CROSSLINK} from './tag'\n\nexport const own = (ownerUnit: NodeUnit, links: NodeUnit[]) => {\n  const owner = getGraph(ownerUnit)\n  for (let i = 0; i < links.length; i++) {\n    const link = getGraph(links[i])\n    if (owner.family.type !== DOMAIN) link.family.type = CROSSLINK\n    getOwners(link).push(owner)\n    getLinks(owner).push(link)\n  }\n}\n","import {getConfig, getNestedConfig} from './getter'\nimport {assertObject} from './is'\n\nexport const onConfigNesting = (\n  rawConfig: any,\n  fn: (babelData: any, userConfig: any) => void,\n) => {\n  assertObject(rawConfig)\n  if (getNestedConfig(rawConfig)) {\n    fn(getConfig(rawConfig), getNestedConfig(rawConfig))\n  }\n}\n\nexport const processArgsToConfig = (args: any[]): [any[], any | void] => {\n  let metadata\n  onConfigNesting(args[0], (injected, config) => {\n    metadata = injected\n    args = config\n  })\n  return [args, metadata]\n}\n","import {Node, NodeUnit} from './index.h'\nimport {getGraph, getOwners, getLinks, getSubscribers} from './getter'\nimport {is} from './is'\nimport {removeItem} from './collection'\nimport {CROSSLINK} from './tag'\n\nconst removeFromNode = (currentNode: Node, targetNode: Node) => {\n  removeItem(currentNode.next, targetNode)\n  removeItem(getOwners(currentNode), targetNode)\n  removeItem(getLinks(currentNode), targetNode)\n}\nconst clearNodeNormalized = (\n  targetNode: Node,\n  deep: boolean,\n  isDomainUnit: boolean,\n) => {\n  targetNode.next.length = 0\n  targetNode.seq.length = 0\n  //@ts-ignore\n  targetNode.scope = null\n  let currentNode\n  let list = getLinks(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (\n      deep ||\n      (isDomainUnit && !targetNode.meta.sample) ||\n      currentNode.family.type === CROSSLINK\n    ) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n  list = getOwners(targetNode)\n  while ((currentNode = list.pop())) {\n    removeFromNode(currentNode, targetNode)\n    if (isDomainUnit && currentNode.family.type === CROSSLINK) {\n      clearNodeNormalized(\n        currentNode,\n        deep,\n        currentNode.meta.op !== 'on' && isDomainUnit,\n      )\n    }\n  }\n}\nconst clearMap = (map: any) => map.clear()\nexport const clearNode = (\n  graphite: NodeUnit,\n  {\n    deep,\n  }: {\n    deep?: boolean\n  } = {},\n) => {\n  let isDomainUnit = false\n  //@ts-ignore\n  if (graphite.ownerSet) graphite.ownerSet.delete(graphite)\n  if (is.store(graphite)) {\n    clearMap(getSubscribers(graphite))\n  } else if (is.domain(graphite)) {\n    isDomainUnit = true\n    //@ts-ignore\n    const history = graphite.history\n    clearMap(history.events)\n    clearMap(history.effects)\n    clearMap(history.stores)\n    clearMap(history.domains)\n  }\n  clearNodeNormalized(getGraph(graphite), !!deep, isDomainUnit)\n}\n","import {Subscription, NodeUnit} from './index.h'\nimport {bind2} from './bind'\nimport {clearNode} from './clearNode'\n\nexport const createSubscription = (node: NodeUnit): Subscription => {\n  const result = bind2(clearNode, node, undefined)\n  result.unsubscribe = result\n  return result\n}\n","import {onConfigNesting} from './config'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit, Cmd} from './index.h'\nimport {createSubscription} from './subscription'\nimport {assertNodeSet} from './is'\n\nexport const createLinkNode = (\n  parent: NodeUnit,\n  child: NodeUnit | NodeUnit[],\n  {\n    node,\n    scope,\n    meta,\n  }: {\n    node?: Array<Cmd | false | void | null>\n    scope?: {[name: string]: any}\n    meta?: {[name: string]: any}\n  },\n) =>\n  createNode({\n    node,\n    parent,\n    child,\n    scope,\n    meta,\n    family: {\n      owners: [parent, child],\n      links: child,\n    },\n    regional: true,\n  })\nexport const forward = (opts: {\n  from: NodeUnit | NodeUnit[]\n  to: NodeUnit | NodeUnit[]\n  meta?: Record<string, any>\n}): Subscription => {\n  let config\n  onConfigNesting(opts, (injectedData, userConfig) => {\n    config = injectedData\n    opts = userConfig\n  })\n  const {from, to, meta = {op: 'forward'}} = opts\n  assertNodeSet(from, 'forward', '\"from\"')\n  assertNodeSet(to, 'forward', '\"to\"')\n  if (config) meta.config = config\n  return createSubscription(\n    createNode({\n      parent: from,\n      child: to,\n      meta,\n      family: {},\n      regional: true,\n    }),\n  )\n}\n","import {step} from './typedef'\nimport {callStack} from './caller'\nimport {createNode} from './createNode'\nimport {Subscription, NodeUnit} from './index.h'\nimport {createSubscription} from './subscription'\nimport {throwError} from './throw'\nimport {isFunction} from './is'\nimport {forkPage} from './kernel'\nimport {getGraph} from './getter'\n\nexport const watchUnit = (\n  unit: NodeUnit,\n  handler: (payload: any) => any,\n): Subscription => {\n  if (!isFunction(handler)) throwError('.watch argument should be a function')\n  if (forkPage) {\n    const forkedNode = forkPage.nodeMap[getGraph(unit).id]\n    if (forkedNode) unit = forkedNode\n  }\n  return createSubscription(\n    createNode({\n      scope: {fn: handler},\n      node: [step.run({fn: callStack})],\n      parent: unit,\n      meta: {op: 'watch'},\n      family: {\n        owners: unit,\n      },\n      regional: true,\n    }),\n  )\n}\n","import {Store, Event, Effect, Domain} from './unit.h'\nimport {own} from './own'\nimport {createNode} from './createNode'\nimport {Config, NodeUnit} from './index.h'\nimport {\n  createEvent,\n  createStore,\n  createNamedEvent,\n  initUnit,\n} from './createUnit'\nimport {createEffect} from './createEffect'\nimport {forward} from './forward'\nimport {forIn} from './collection'\nimport {getGraph, getParent} from './getter'\nimport {DOMAIN} from './tag'\nimport {launch} from './kernel'\nimport {step} from './typedef'\n\nconst createHook = (trigger: Event<any>, acc: Set<any>, node: any) => {\n  trigger.create = res => {\n    launch(trigger, res)\n    return res\n  }\n  getGraph(trigger).seq.push(\n    step.compute({\n      fn(upd, _, stack) {\n        stack.forkPage = null\n        return upd\n      },\n    }),\n  )\n  trigger.watch(data => {\n    own(node, [data])\n    acc.add(data)\n    if (!data.ownerSet) data.ownerSet = acc\n    if (!getParent(data)) data.parent = node\n  })\n  own(node, [trigger])\n  return (hook: (data: any) => any) => {\n    acc.forEach(hook)\n    return trigger.watch(hook)\n  }\n}\n\nexport function createDomain(nameOrConfig: any, maybeConfig?: any): Domain {\n  const domains: Set<Domain> = new Set()\n  const stores: Set<Store<any>> = new Set()\n  const effects: Set<Effect<any, any, any>> = new Set()\n  const events: Set<Event<any>> = new Set()\n\n  const node = createNode({\n    family: {type: DOMAIN},\n    regional: true,\n  })\n\n  const result: any = {\n    history: {\n      domains,\n      stores,\n      effects,\n      events,\n    },\n    graphite: node,\n  }\n\n  node.meta = initUnit(DOMAIN, result, maybeConfig, nameOrConfig)\n  const [event, effect, store, domain] = [\n    'onEvent',\n    'onEffect',\n    'onStore',\n    'onDomain',\n  ].map(createNamedEvent)\n\n  result.hooks = {\n    event,\n    effect,\n    store,\n    domain,\n  }\n  result.onCreateEvent = createHook(event, events, result)\n  result.onCreateEffect = createHook(effect, effects, result)\n  result.onCreateStore = createHook(store, stores, result)\n  result.onCreateDomain = createHook(domain, domains, result)\n\n  result.createEvent = result.event = (nameOrConfig: any, config?: Config) =>\n    event(\n      createEvent(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createEffect = result.effect = (nameOrConfig: any, config?: Config) =>\n    effect(\n      createEffect(nameOrConfig, {\n        parent: result,\n        config,\n      }),\n    )\n  result.createDomain = result.domain = (nameOrConfig: any, config?: Config) =>\n    createDomain({\n      name: nameOrConfig,\n      parent: result,\n      config,\n    })\n  result.createStore = result.store = (state: any, config?: Config) =>\n    store(\n      createStore(state, {\n        parent: result,\n        config,\n      }),\n    )\n  const parent = getParent(result)\n  if (parent) {\n    forIn(result.hooks, (from: NodeUnit, key) => {\n      forward({from, to: parent.hooks[key]})\n    })\n    parent.hooks.domain(result)\n  }\n  return result\n}\n","import {Event} from './unit.h'\nimport {NodeUnit, Cmd} from './index.h'\nimport {is, isFunction, isObject} from './is'\nimport {forIn, includes} from './collection'\nimport {createStateRef} from './stateRef'\nimport {readTemplate} from './region'\nimport {createLinkNode} from './forward'\nimport {processArgsToConfig} from './config'\nimport {step} from './typedef'\nimport {createNode} from './createNode'\nimport {launch} from './kernel'\nimport {getStoreState} from './getter'\nimport {REG_A} from './tag'\nimport {throwError} from './throw'\nimport {createEvent} from './createUnit'\n\nconst launchCase = (\n  scopeTargets: Record<string, NodeUnit>,\n  field: string,\n  data: any,\n  stack: any,\n) => {\n  const target = scopeTargets[field]\n  if (target) {\n    launch({\n      target,\n      params: Array.isArray(target) ? target.map(() => data) : data,\n      defer: true,\n      stack,\n    })\n  }\n}\n\nexport function split(...args: any[]): any {\n  let targets: Record<string, Event<any> | NodeUnit>\n  let [[source, match], metadata] = processArgsToConfig(args)\n  const knownCases = !match\n  if (knownCases) {\n    targets = source.cases\n    match = source.match\n    source = source.source\n  }\n  const matchIsUnit = is.store(match)\n  const matchIsFunction = !is.unit(match) && isFunction(match)\n  const matchIsShape = !matchIsUnit && !matchIsFunction && isObject(match)\n  if (!targets!) targets = {}\n  if (!knownCases) {\n    if (!matchIsShape) throwError('match should be an object')\n    forIn(match, (_, key) => {\n      //@ts-ignore\n      targets[key] = createEvent(metadata)\n    })\n    targets.__ = createEvent(metadata)\n  }\n  //@ts-ignore\n  const template = readTemplate()\n  const owners = new Set(\n    ([] as NodeUnit[]).concat(source, Object.values(targets)),\n  )\n  const caseNames = Object.keys(\n    matchIsUnit || matchIsFunction ? targets : match,\n  )\n  let splitterSeq: Array<Cmd | false>\n  if (matchIsUnit || matchIsFunction) {\n    if (matchIsUnit) owners.add(match)\n    splitterSeq = [\n      matchIsUnit && step.barrier({priority: 'sampler'}),\n      matchIsUnit &&\n        step.mov({\n          store: getStoreState(match),\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          const value = String(matchIsUnit ? stack.a : match(data))\n          launchCase(\n            scopeTargets,\n            includes(caseNames, value) ? value : '__',\n            data,\n            stack,\n          )\n        },\n      }),\n    ]\n  } else if (matchIsShape) {\n    const lastValues = createStateRef({})\n    lastValues.type = 'shape'\n    const before: any[] = (lastValues.before = [])\n    const updaterSteps = [\n      step.mov({\n        store: lastValues,\n        to: REG_A,\n      }),\n      step.compute({\n        fn(upd, {key}, {a}) {\n          a[key] = upd\n        },\n      }),\n    ]\n    const units = [] as string[]\n    let needBarrier: boolean\n    forIn(match, (storeOrFn: any, key) => {\n      if (is.unit(storeOrFn)) {\n        needBarrier = true\n        units.push(key)\n        owners.add(storeOrFn)\n        const updater = createLinkNode(storeOrFn, [], {\n          node: updaterSteps,\n          scope: {key},\n        })\n        if (is.store(storeOrFn)) {\n          lastValues.current[key] = storeOrFn.getState()\n          const storeRef = getStoreState(storeOrFn)\n          before.push({\n            type: 'field',\n            field: key,\n            from: storeRef,\n          })\n          if (template) {\n            if (!includes(template.plain, storeRef)) {\n              updater.seq.unshift(template.loader)\n            }\n          }\n        }\n      }\n    })\n    if (needBarrier! && template) {\n      template.plain.push(lastValues)\n    }\n    splitterSeq = [\n      needBarrier! && step.barrier({priority: 'sampler'}),\n      needBarrier! &&\n        step.mov({\n          store: lastValues,\n          to: 'a',\n        }),\n      step.filter({\n        fn(data, scopeTargets, stack) {\n          for (let i = 0; i < caseNames.length; i++) {\n            const caseName = caseNames[i]\n            const caseValue = includes(units, caseName)\n              ? stack.a[caseName]\n              : match[caseName](data)\n            if (caseValue) {\n              launchCase(scopeTargets, caseName, data, stack)\n              return\n            }\n          }\n          launchCase(scopeTargets, '__', data, stack)\n        },\n      }),\n    ]\n  } else {\n    throwError('expect match to be unit, function or object')\n  }\n  createNode({\n    meta: {\n      onCopy: Object.keys(targets),\n      op: 'split',\n    },\n    parent: source,\n    scope: targets,\n    node: splitterSeq!,\n    family: {\n      type: 'crosslink',\n      owners: Array.from(owners),\n    },\n    regional: true,\n  })\n  if (!knownCases) return targets\n}\n","import {combine} from './combine'\nimport {createEffect, onSettled} from './createEffect'\nimport {applyParentHook} from './createUnit'\nimport {onConfigNesting} from './config'\nimport {getGraph, getStoreState} from './getter'\nimport {own} from './own'\nimport {is} from './is'\nimport {step} from './typedef'\nimport {launch} from './kernel'\nimport {addToReg} from './createNode'\nimport {STORE, EFFECT, REG_A} from './tag'\n\nexport function attach(config: any) {\n  let injected\n  onConfigNesting(config, (injectedData, userConfig) => {\n    injected = injectedData\n    config = userConfig\n  })\n  let {source, effect, mapParams} = config\n  if (!mapParams)\n    mapParams = source\n      ? (_: any, source: any) => source\n      : (params: any) => params\n  const attached = createEffect(config, injected)\n  const {runner} = getGraph(attached).scope\n\n  let runnerSteps\n  const runnerFn = (\n    {params, req}: any,\n    {finally: anyway, effect}: any,\n    stack: any,\n  ) => {\n    const rj = onSettled({\n      params,\n      req,\n      ok: false,\n      anyway,\n      stack,\n    })\n    let computedParams\n    try {\n      computedParams = mapParams(params, stack.a)\n    } catch (err) {\n      return rj(err)\n    }\n    launch({\n      target: effect,\n      params: {\n        params: computedParams,\n        req: {\n          rs: onSettled({\n            params,\n            req,\n            ok: true,\n            anyway,\n            stack,\n          }),\n          rj,\n        },\n      },\n      page: stack.page,\n      defer: true,\n    })\n  }\n  if (source) {\n    let state\n    if (is.store(source)) {\n      state = source\n      own(source, [attached])\n    } else {\n      state = combine(source)\n      own(attached, [state])\n    }\n    const readStateRef = step.mov({\n      from: STORE,\n      store: getStoreState(state),\n      to: REG_A,\n    })\n    runnerSteps = [\n      /* let another side-effects run first */\n      step.run({fn: _ => _}),\n      /* read state. assumed it already stable here because of previous step */\n      readStateRef,\n      /* no need for step.run because of first step */\n      step.compute({fn: runnerFn}),\n    ]\n    addToReg(readStateRef, runner.reg)\n  } else {\n    runnerSteps = [step.run({fn: runnerFn})]\n  }\n  own(effect, [attached])\n  runner.scope.effect = effect\n  runner.meta.onCopy.push(EFFECT)\n  runner.seq.splice(0, 1, ...runnerSteps)\n  applyParentHook(effect, attached, EFFECT)\n  return attached\n}\n","import {Store, Event} from './unit.h'\nimport {createEvent, applyParentHook} from './createUnit'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\nimport {processArgsToConfig} from './config'\n\nexport function createApi(...args: [Store<any>, {[key: string]: Function}]) {\n  let [[store, setters], metadata] = processArgsToConfig(args)\n  const result: Record<string, Event<any>> = {}\n  forIn(setters, (fn, key) => {\n    const event = (result[key] = createEvent(key, {\n      parent: getParent(store),\n      config: metadata,\n    }))\n    store.on(event, fn)\n    applyParentHook(store, event)\n  })\n  return result\n}\n","import {observableSymbol} from './observable'\nimport {Event} from './unit.h'\nimport {clearNode} from './clearNode'\nimport {createEvent} from './createUnit'\nimport {bind2} from './bind'\nimport {assertObject} from './is'\nimport {throwError} from './throw'\n\nexport function fromObservable<T>(observable: any): Event<T> {\n  assertObject(observable)\n  const observableItem =\n    observableSymbol in observable ? observable[observableSymbol]() : observable\n  if (!observableItem.subscribe)\n    throwError('expect observable to have .subscribe')\n  const event = createEvent<T>()\n  const disposer = bind2(clearNode, event, undefined)\n  observableItem.subscribe({\n    next: event,\n    error: disposer,\n    complete: disposer,\n  })\n  return event\n}\n","import {processArgsToConfig} from './config'\nimport {createLinkNode} from './forward'\nimport {sample} from './sample'\nimport {createEvent} from './createUnit'\nimport {combine} from './combine'\nimport {step} from './typedef'\nimport {callStack} from './caller'\nimport {assertNodeSet, is, isFunction} from './is'\nimport {createNode} from './createNode'\nimport {throwError} from './throw'\nimport {merge} from './merge'\n\nexport function guard(...args: any[]) {\n  const meta: Record<string, any> = {op: 'guard'}\n  let rawName = 'guard'\n  let [[source, config], metadata] = processArgsToConfig(args)\n  if (metadata) {\n    meta.config = metadata\n    if (metadata.name) rawName = metadata.name\n  }\n  if (!config) {\n    config = source\n    source = config.source\n  }\n  let {filter, greedy, clock, name = rawName} = config\n  const target = config.target || createEvent(name, meta.config)\n  const filterIsUnit = is.unit(filter)\n  let needToCombine = true\n  if (source === undefined) {\n    assertNodeSet(clock, 'guard', 'clock')\n    if (Array.isArray(clock)) {\n      clock = merge(clock)\n    }\n    source = clock\n    needToCombine = false\n  }\n  if (needToCombine && !is.unit(source)) source = combine(source)\n  if (clock) {\n    assertNodeSet(clock, 'guard', 'clock')\n    source = sample({\n      source,\n      clock,\n      greedy,\n      fn: filterIsUnit ? null : (source: any, clock: any) => ({source, clock}),\n    })\n  }\n  assertNodeSet(target, 'guard', 'target')\n  if (filterIsUnit) {\n    sample({\n      source: filter,\n      clock: source,\n      target: createNode({\n        node: [\n          step.filter({\n            fn: ({guard}) => guard,\n          }),\n          step.compute({\n            fn: ({data}) => data,\n          }),\n        ],\n        child: target,\n        meta,\n        family: {\n          owners: [source, filter, target, ...[].concat(clock ? clock : [])],\n          links: target,\n        },\n        regional: true,\n      }),\n      fn: (guard: any, data: any) => ({guard, data}),\n      greedy,\n      name,\n    })\n  } else {\n    if (!isFunction(filter)) throwError('`filter` should be function or unit')\n    createLinkNode(source, target, {\n      scope: {fn: filter},\n      node: clock\n        ? [\n            step.filter({\n              fn: ({source, clock}, {fn}) => fn(source, clock),\n            }),\n            step.compute({\n              fn: ({source}) => source,\n            }),\n          ]\n        : [step.filter({fn: callStack})],\n      meta,\n    })\n  }\n  return target\n}\n","import {createStore} from './createUnit'\nimport {is} from './is'\nimport {forIn} from './collection'\nimport {getParent} from './getter'\n\nexport function restore(obj: any, defaultState: any, config?: any): any {\n  if (is.store(obj)) {\n    return obj\n  }\n  if (is.unit(obj)) {\n    const domain = getParent(obj)\n    let result\n    if (is.event(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj, (_, v) => v)\n    }\n    if (is.effect(obj)) {\n      result = createStore(defaultState, {\n        parent: domain,\n        name: obj.shortName,\n        É”: config,\n      }).on(obj.done, (_: any, {result}: any) => result)\n    }\n    if (domain) domain.hooks.store(result)\n    return result\n  }\n  const result: Record<string, any> = Array.isArray(obj) ? [] : {}\n  forIn(obj, (value, key) => {\n    result[key] = is.store(value) ? value : createStore(value, {name: key})\n  })\n  return result\n}\n"],"names":["assertNodeSetItem","value","method","valueName","reason","isObject","isFunction","throwError","assertNodeSet","Array","isArray","i","length","withRegion","unit","cb","unitMeta","getGraph","meta","regionStack","parent","template","readTemplate","sidRoot","getParent","createNode","node","child","to","target","scope","family","familyRaw","type","regional","sources","arrifyNodes","from","source","links","owners","seq","reg","item","push","addToReg","result","id","nextNodeID","next","getOwners","getLinks","own","getValue","launch","payload","upsert","pageForLaunch","currentPage","stackForLaunch","forkPageForLaunch","forkPage","params","defer","page","getForkPage","pushFirstHeapItem","isRoot","stop","skip","lastStartedState","isWatch","kernelLoop","deleteMin","idx","stack","local","fail","stepn","step","data","barrierID","fullID","priority","barriers","has","add","pushHeap","delete","STACK","store","STORE","getPageForRef","readRef","getPageRef","current","undefined","tryRun","op","unitObjectName","objOrArr","name","comma","key","is","compositeName","fullName","toString","createName","path","composite","shortName","concat","forIn","obj","forEach","list","fn","callCreate","args","oldPage","setCurrentPage","create","createEvent","nameOrConfig","maybeConfig","event","graphite","initUnit","find","watch","bind","watchUnit","map","config","mapped","mapName","createComputation","MAP","filter","createEventFiltration","callStack","filterMap","defined","prepend","contramapped","upward","applyParentHook","createStore","defaultState","props","onEvent","off","getSubscribers","set","createSubscription","updateStore","updateFilter","plainState","createStateRef","oldState","updates","createNamedEvent","after","plain","plainStateId","subscribers","Map","stateRef","getState","reachedPage","targetRef","setState","state","nodeMap","reset","units","on","nodeSet","currentSubscription","get","firstState","lastResult","storeState","innerStore","strict","linkNode","getStoreState","before","includes","loader","unshift","eventOrFn","subscription","of","defaultConfig","changed","update","_","a","isStrict","combine","handler","stores","onConfigNesting","injectedData","userConfig","structStoreShape","shapeReady","rawHandler","slice","spreadArgs","storeCombination","createDefer","req","Promise","rs","rj","catch","createEffect","instance","getType","onCopy","kind","use","anyway","finally","done","named","status","error","doneData","failData","effectRunner","getHandler","getCurrent","onResolve","onSettled","ok","onReject","err","then","fx","runner","upd","savedFork","setForkPage","inFlight","x","pending","amount","merge","events","forward","validateSampleConfig","atLeastOneFieldExists","sampleConfigFields","field","sample","sid","greedy","processArgsToConfig","clock","metadata","needToCombine","isUpward","initialState","targetTemplate","nativeTemplate","sourceRef","createLinkNode","callARegStack","closure","hasSource","sourceState","clockState","callStackAReg","createRefGraph","refsMap","items","Object","values","refGraph","cmd","normalizeValues","assertEach","toposort","rawGraph","ignore","topologicalSortHelper","temp","neighbors","graph","n","visited","Set","reverse","size","processed","ignored","shift","removeItem","flatGraph","traverse","forEachRelatedNode","observableSymbol","Symbol","observable","effect","domain","message","Error","assertObject","idCount","nextUnitID","nextStepID","bind2","arg","hasRef","nextBarrierID","barrier","mov","check","compute","run","getConfig","opts","getNestedConfig","É”","val","ownerUnit","owner","link","readSidRoot","heap","b","ret","isSameType","v","r","l","queue","ix","first","last","getPriority","bucket","t","newForkPage","newPage","console","joinName","tag","rawConfig","injected","pos","indexOf","splice","removeFromNode","currentNode","targetNode","clearNodeNormalized","deep","isDomainUnit","pop","clearMap","clear","clearNode","ownerSet","history","effects","domains","unsubscribe","forkedNode","normalizeConfig","part","loc","hookType","hooks","rawConfigA","rawConfigB","isDomain","unitId","thru","subscribe","observer","stateFirst","storeRef","ref","clone","stateNew","rawShape","isFresh","isCombine","childRef","defaultShape","sidechain","createHook","trigger","acc","res","hook","launchCase","scopeTargets","start","ctx","reject","parentFork","forkInFlightCounter","defers","launchUnits","launchParams","mapParams","runnerSteps","attached","runnerFn","computedParams","readStateRef","setters","createDomain","onCreateEvent","onCreateEffect","onCreateStore","onCreateDomain","handlers","needToFill","sourceList","sourceRefsMap","predefinedRefs","templateOwnedRefs","valuesSidList","forked","findClone","index","unitName","clones","refs","changedStores","putStoreToChanged","forkOf","fxID","resolve","sidMap","newRef","copyField","origValue","siblings","wrapped","wrapStore","cloneOf","cloneGraph","getOwnPropertyNames","execRef","handlerKeys","keys","observableItem","disposer","complete","rawName","filterIsUnit","guard","isScope","storeWatches","storeWatchesRefs","normalizedValues","fillResult","flatGraphUnits","collectWatches","fillValues","savedForkPage","localUnit","onlyChanges","currentComposite","targets","match","knownCases","cases","matchIsUnit","matchIsFunction","matchIsShape","__","splitterSeq","caseNames","String","lastValues","needBarrier","updaterSteps","storeOrFn","updater","caseName"],"mappings":"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"}