function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useCallback } from 'react';
import PropTypes from 'prop-types';
import { TextInput } from 'react-native';
/**
 * This is an _experimental_ React Native component.
 * Feedback thread: https://github.com/catamphetamine/react-phone-number-input/issues/296
 */

function PhoneTextInput(_ref, ref) {
  var autoComplete = _ref.autoComplete,
      onChange = _ref.onChange,
      rest = _objectWithoutProperties(_ref, ["autoComplete", "onChange"]);

  // Instead of `onChangeText` it could use `onChange` and get `value` from `nativeEvent.text`.
  var onChangeText = useCallback(function (value) {
    onChange({
      preventDefault: function preventDefault() {
        this.defaultPrevented = true;
      },
      target: {
        value: value
      }
    });
  }, [onChange]); // React Native `<TextInput/>` supports properties:
  // * `placeholder: string?`
  // * `autoFocus: boolean?`
  // * `value: string?`
  // plus the ones mentioned below:

  return React.createElement(TextInput, _extends({
    ref: ref,
    keyboardType: "phone-pad",
    autoCompleteType: autoComplete,
    onChangeText: onChangeText
  }, rest));
}

PhoneTextInput = React.forwardRef(PhoneTextInput);
PhoneTextInput.propTypes = {
  autoComplete: PropTypes.string,
  value: PropTypes.string,
  onChange: PropTypes.func.isRequired
};
export default PhoneTextInput;
//# sourceMappingURL=PhoneTextInput.js.map