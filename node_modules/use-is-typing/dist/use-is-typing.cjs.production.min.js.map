{"version":3,"file":"use-is-typing.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import { useCallback, useEffect, useState, useRef } from 'react';\n\nexport interface UseIsTypingProps {\n  /**\n   * Time in milliseconds before typing indicator gets reset. **Default:** `1000`\n   */\n  timeout?: number;\n}\n\nexport type TextElement = HTMLInputElement | HTMLTextAreaElement;\n\nexport type RegisterElement = <Element extends TextElement = TextElement>(\n  el: Element | null,\n) => void;\n\nexport function useIsTyping({ timeout = 1000 }: UseIsTypingProps = {}): [\n  boolean,\n  RegisterElement,\n] {\n  const [isTyping, setIsTyping] = useState(false);\n  const [currentEl, setCurrentEl] = useState<TextElement | null>(null);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout> | null>(null);\n\n  const reset = useCallback(() => {\n    // Debounce `reset()` based on `timeout`\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    timeoutRef.current = setTimeout(() => {\n      setIsTyping(false);\n    }, timeout);\n  }, [timeout]);\n\n  const register: RegisterElement = useCallback(el => {\n    setCurrentEl(el);\n    if (!el) {\n      setIsTyping(false);\n    }\n  }, []);\n\n  useEffect(() => {\n    // Clear timeout on unmount\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  useEffect(() => {\n    setIsTyping(false);\n    if (!currentEl) {\n      return;\n    }\n\n    const keyUpDownListener = (e: Event) => {\n      const hasValue = (e.target as TextElement).value !== '';\n\n      setIsTyping(hasValue);\n      reset();\n    };\n    const blurListener = () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n      setIsTyping(false);\n    };\n\n    currentEl.addEventListener('keyup', keyUpDownListener);\n    currentEl.addEventListener('keydown', keyUpDownListener);\n    currentEl.addEventListener('blur', blurListener);\n\n    return () => {\n      currentEl.removeEventListener('keydown', keyUpDownListener);\n      currentEl.removeEventListener('keyup', keyUpDownListener);\n      currentEl.removeEventListener('blur', blurListener);\n    };\n  }, [currentEl, reset]);\n\n  return [isTyping, register];\n}\n\nexport default useIsTyping;\n"],"names":["useIsTyping","timeout","useState","isTyping","setIsTyping","currentEl","setCurrentEl","timeoutRef","useRef","reset","useCallback","current","clearTimeout","setTimeout","register","el","useEffect","keyUpDownListener","e","target","value","blurListener","addEventListener","removeEventListener"],"mappings":"oGAegBA,uBAAmD,MAArCC,QAAAA,aAAU,QAINC,YAAS,GAAlCC,OAAUC,SACiBF,WAA6B,MAAxDG,OAAWC,OACZC,EAAaC,SAA6C,MAE1DC,EAAQC,eAAY,WAEpBH,EAAWI,SACbC,aAAaL,EAAWI,SAE1BJ,EAAWI,QAAUE,YAAW,WAC9BT,GAAY,KACXH,KACF,CAACA,IAEEa,EAA4BJ,eAAY,SAAAK,GAC5CT,EAAaS,GACRA,GACHX,GAAY,KAEb,WAEHY,aAAU,kBAED,WACDT,EAAWI,SACbC,aAAaL,EAAWI,YAG3B,IAEHK,aAAU,cACRZ,GAAY,GACPC,OAICY,EAAoB,SAACC,GAGzBd,EAFqD,KAAnCc,EAAEC,OAAuBC,OAG3CX,KAEIY,EAAe,WACfd,EAAWI,SACbC,aAAaL,EAAWI,SAE1BP,GAAY,WAGdC,EAAUiB,iBAAiB,QAASL,GACpCZ,EAAUiB,iBAAiB,UAAWL,GACtCZ,EAAUiB,iBAAiB,OAAQD,GAE5B,WACLhB,EAAUkB,oBAAoB,UAAWN,GACzCZ,EAAUkB,oBAAoB,QAASN,GACvCZ,EAAUkB,oBAAoB,OAAQF,OAEvC,CAAChB,EAAWI,IAER,CAACN,EAAUW"}