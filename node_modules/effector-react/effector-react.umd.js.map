{"version":3,"file":"effector-react.umd.js","sources":["../../src/react/useStore.ts","../../src/react/withDisplayName.ts","../../src/react/createComponent.ts","../../src/react/createReactState.ts","../../src/react/createGate.ts","../../src/react/useIsomorphicLayoutEffect.ts","../../src/react/throw.ts","../../src/react/connect.ts","../../src/react/createContextComponent.ts","../../src/react/createStoreConsumer.ts","../../src/react/nossr.ts","../../src/react/useList.ts"],"sourcesContent":["import {Store, is, clearNode, createStore} from 'effector'\nimport React from 'react'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {throwError} from './throw'\n\nexport function useStore<State>(store: Store<State>): State {\n  if (!is.store(store)) throwError('expect useStore argument to be a store')\n\n  const currentValue = store.getState()\n  const inc = React.useReducer((n: any, action: void) => n + 1, 0)[1]\n  const currentStore = React.useRef({\n    store,\n    value: currentValue,\n    pending: false,\n  })\n  useIsomorphicLayoutEffect(() => {\n    const stop = store.updates.watch(upd => {\n      const ref = currentStore.current\n      if (!ref.pending) {\n        ref.value = upd\n        ref.pending = true\n        inc()\n        ref.pending = false\n      }\n    })\n    const newValue = store.getState()\n    const ref = currentStore.current\n    if (ref.store === store && ref.value !== newValue) {\n      ref.value = newValue\n      ref.pending = true\n      inc()\n      ref.pending = false\n    }\n    ref.store = store\n    return stop\n  }, [store])\n  return currentValue\n}\n\nexport function useStoreMap<State, Result, Keys extends ReadonlyArray<any>>(\n  configOrStore:\n    | {\n        store: Store<State>\n        keys: Keys\n        fn(state: State, keys: Keys): Result\n        updateFilter?: (update: Result, current: Result) => boolean\n      }\n    | Store<State>,\n  separateFn?: (state: State, keys: Keys) => Result,\n): Result {\n  let fn: (state: State, keys: Keys) => Result\n  let updateFilter: (update: Result, current: Result) => boolean\n  let store: Store<State>\n  let keys: Keys\n  if (separateFn) {\n    fn = separateFn\n    store = configOrStore as Store<State>\n    keys = ([] as unknown) as Keys\n  } else {\n    fn = (configOrStore as any).fn\n    store = (configOrStore as any).store\n    keys = (configOrStore as any).keys\n    updateFilter = (configOrStore as any).updateFilter\n  }\n  if (!is.store(store)) throwError('useStoreMap expects a store')\n  if (!Array.isArray(keys)) throwError('useStoreMap expects an array as keys')\n  if (typeof fn !== 'function') throwError('useStoreMap expects a function')\n  const result: Store<Result> = React.useMemo(\n    () =>\n      createStore(fn(store.getState(), keys), {updateFilter}).on(\n        store,\n        (_, state) => fn(state, keys),\n      ),\n    keys,\n  )\n  const state = useStore(result)\n  useIsomorphicLayoutEffect(\n    () => () => {\n      result.off(store)\n      clearNode(result, {deep: true})\n    },\n    keys,\n  )\n  return state\n}\n","export function withDisplayName(name: string, Component: any) {\n  Component.displayName = name\n  return Component\n}\n","import React from 'react'\nimport {Store, is, combine, createEvent} from 'effector'\nimport {useStore} from './useStore'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {StoreView} from './index.h'\nimport {withDisplayName} from './withDisplayName'\nimport {throwError} from './throw'\n\nexport function createComponent<Props, State>(\n  shape: Store<State> | {[key: string]: Store<any> | any},\n  renderProp: (props: Props, state: State) => React.ReactNode,\n): StoreView<State, Props> {\n  let store: Store<any>\n  if (is.store(shape)) {\n    store = shape\n  } else {\n    if (typeof shape === 'object' && shape !== null) {\n      store = combine(shape)\n    } else throwError('shape should be a store or object with stores')\n  }\n  let storeName = 'Unknown'\n  //@ts-ignore\n  if (store && store.shortName) {\n    storeName = store.shortName\n  }\n  const mounted = createEvent<any>()\n  const unmounted = createEvent<any>()\n\n  function RenderComponent(props: Props) {\n    const propsRef = React.useRef(props)\n    const state = useStore(store)\n    useIsomorphicLayoutEffect(() => {\n      mounted({props: propsRef.current, state: store.getState()})\n      return () => {\n        unmounted({props: propsRef.current, state: store.getState()})\n      }\n    }, [])\n    const result = renderProp(props, state)\n    propsRef.current = props\n    return result\n  }\n  RenderComponent.mounted = mounted\n  RenderComponent.unmounted = unmounted\n  return withDisplayName(`${storeName}.View`, RenderComponent)\n}\n","import React from 'react'\nimport {Store} from 'effector'\n\nimport {useStore} from './useStore'\nimport {withDisplayName} from './withDisplayName'\n\nexport function createReactState<State>(\n  store: Store<State>,\n  Component: React.ComponentType<any>,\n) {\n  const wrappedComponentName =\n    Component.displayName || Component.name || 'Unknown'\n  return withDisplayName(`Connect(${wrappedComponentName})`, (props: any) =>\n    React.createElement(Component, Object.assign({}, props, useStore(store))),\n  )\n}\n","import React from 'react'\nimport {createStore, launch, Store, Domain, createEvent} from 'effector'\nimport {Gate} from './index.h'\nimport {useIsomorphicLayoutEffect} from './useIsomorphicLayoutEffect'\nimport {withDisplayName} from './withDisplayName'\n\nexport function useGate<Props>(\n  GateComponent: Gate<Props>,\n  props: Props = {} as any,\n) {\n  const propsRef = React.useRef<any>(null)\n  useIsomorphicLayoutEffect(() => {\n    GateComponent.open(propsRef.current)\n    return () => GateComponent.close(propsRef.current) as any\n  }, [GateComponent])\n  if (!shallowCompare(propsRef.current, props)) {\n    propsRef.current = props\n    GateComponent.set(props)\n  }\n}\n\nfunction shallowCompare(a: any, b: any) {\n  if (a === b) return true\n  if (\n    typeof a === 'object' &&\n    a !== null &&\n    typeof b === 'object' &&\n    b !== null\n  ) {\n    const aKeys = Object.keys(a)\n    const bKeys = Object.keys(b)\n    if (aKeys.length !== bKeys.length) return false\n    for (let i = 0; i < aKeys.length; i++) {\n      const key = aKeys[i]\n      if (a[key] !== b[key]) return false\n    }\n    return true\n  }\n  return false\n}\nexport function createGateImplementation<State>({\n  name = 'gate',\n  domain,\n  defaultState,\n  hook: useGateHook,\n}: {\n  name?: string\n  domain?: Domain\n  defaultState: State | {}\n  hook: typeof useGate\n}): Gate<State> {\n  const fullName = `${domain ? `${domain.compositeName.fullName}/` : ''}${name}`\n  const set = createEvent<State>(`${fullName}.set`)\n  const open = createEvent<State>(`${fullName}.open`)\n  const close = createEvent<State>(`${fullName}.close`)\n  const status = createStore(Boolean(false), {\n    name: `${fullName}.status`,\n  })\n    .on(open, () => Boolean(true))\n    .on(close, () => Boolean(false))\n  const state = createStore(defaultState as State, {\n    name: `${fullName}.state`,\n  })\n    .on(set, (_, state) => state)\n    .reset(close)\n  if (domain) {\n    const {hooks} = domain as any\n    launch({\n      target: [\n        hooks.store,\n        hooks.store,\n        hooks.event,\n        hooks.event,\n        hooks.event,\n      ] as any,\n      params: [status, state, open, close, set],\n    })\n  }\n  function GateComponent(props: State) {\n    useGateHook(GateComponent as any, props)\n    return null\n  }\n  GateComponent.open = open\n  GateComponent.close = close\n  GateComponent.status = status\n  GateComponent.state = state\n  GateComponent.set = set\n  return withDisplayName(`Gate:${fullName}`, GateComponent)\n}\nexport function createGate<Props>(\n  name: string = 'gate',\n  defaultState: Props = {} as any,\n): Gate<Props> {\n  let domain\n  if (typeof name === 'object' && name !== null) {\n    if ('defaultState' in name) {\n      //@ts-ignore\n      defaultState = name.defaultState\n    }\n    //@ts-ignore\n    if (name.domain) domain = name.domain\n    //@ts-ignore\n    name = name.name\n  }\n  return createGateImplementation({\n    name,\n    domain,\n    defaultState,\n    hook: useGate,\n  })\n}\n","import React from 'react'\n\nexport const useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect\n","export const throwError = (message: string) => {\n  throw Error(message)\n}\n","import React from 'react'\n\nimport {Store, is} from 'effector'\nimport {createReactState} from './createReactState'\n\nexport const connect = <State>(Component: React.ComponentType<any>) => (\n  store: Store<State>,\n) => {\n  let View: any = Component\n  if (typeof Component !== 'function') {\n    View = store\n    store = Component as any\n  }\n  return createReactState(store, View)\n}\n","import React from 'react'\nimport {Store} from 'effector'\nimport {useStore} from './useStore'\nimport {withDisplayName} from './withDisplayName'\n\nexport const createContextComponent = <Props, State, Context>(\n  store: Store<State>,\n  context: React.Context<Context>,\n  renderProp: (props: Props, state: State, context: Context) => React.ReactNode,\n): React.ComponentType<Props> =>\n  withDisplayName(\n    `${store.shortName || 'Unknown'}.ContextComponent`,\n    (props: any) => {\n      const ctx = React.useContext(context)\n      const state = useStore(store)\n      return renderProp(props, state, ctx)\n    },\n  )\n","import {Store} from 'effector'\n\nimport {StoreConsumer} from './index.h'\nimport {createComponent} from './createComponent'\n\nexport function createStoreConsumer<State>(\n  store: Store<State>,\n): StoreConsumer<State> {\n  return createComponent(store, ({children}, state) => children(state))\n}\n","import {Event} from 'effector'\n\n/**\nbind event to scope\n\nworks like React.useCallback, but for scopes\n*/\nexport function useEvent<T>(event: Event<T>): (payload: T) => T {\n  return event\n}\n","/* eslint-disable react-hooks/rules-of-hooks */\nimport React from 'react'\nimport {Store, is} from 'effector'\nimport {useStore, useStoreMap} from './useStore'\nimport {withDisplayName} from './withDisplayName'\nimport {throwError} from './throw'\n\nexport function useList<T>(\n  list: Store<T[]>,\n  renderItem:\n    | {\n        keys?: any[]\n        fn(item: T, index: number): React.ReactNode\n        getKey?: (item: T) => string\n      }\n    | ((item: T, index: number) => React.ReactNode),\n): React.ReactNode {\n  let keys = [] as any[]\n  let fn\n  let getKey: (item: T) => string\n  if (typeof renderItem === 'object' && renderItem !== null) {\n    if (renderItem.keys) keys = renderItem.keys\n    fn = renderItem.fn\n    if (renderItem.getKey) getKey = renderItem.getKey\n  } else {\n    fn = renderItem\n  }\n  if (!is.store(list)) throwError('expect useList first argument to be a store')\n  if (typeof fn !== 'function')\n    throwError(\"expect useList's renderItem to be a function\")\n  if (!Array.isArray(keys)) throwError(\"expect useList's keys to be an array\")\n  const Item = React.useMemo(() => {\n    const Item = withDisplayName(\n      `${list.shortName || 'Unknown'}.Item`,\n      (\n        props:\n          | {index: number; keys: any[]; keyVal: never; value: never}\n          | {index: never; keys: any[]; keyVal: string; value: T},\n      ) => {\n        const {index, keys, keyVal, value} = props\n        const isKeyed = !!fnRef.current[1]\n        if (isKeyed) {\n          return fnRef.current[0](value, keyVal as any)\n        }\n        const item = useStoreMap({\n          store: list,\n          keys: [index, ...keys],\n          fn: (list, keys) => list[keys[0]],\n        })\n        return fnRef.current[0](item, index)\n      },\n    )\n    return React.memo(Item)\n  }, [list, !!getKey!])\n  const fnRef = React.useRef([fn, getKey!] as const)\n  fnRef.current = [fn, getKey!]\n  const keysSelfMemo = React.useMemo(() => keys, keys)\n  if (getKey!) {\n    return useStore(list).map(value => {\n      const key = fnRef.current[1](value)\n      return React.createElement(Item, {\n        keyVal: key,\n        key,\n        keys: keysSelfMemo,\n        value,\n      })\n    })\n  } else {\n    const length = useStoreMap({\n      store: list,\n      keys: [list],\n      fn: list => list.length,\n    })\n    return Array.from({length}, (_, i) =>\n      React.createElement(Item, {\n        index: i,\n        key: i,\n        keys: keysSelfMemo,\n      }),\n    )\n  }\n}\n"],"names":["useStore","store","is","throwError","currentValue","getState","inc","React","useReducer","n","currentStore","useRef","value","pending","useIsomorphicLayoutEffect","stop","updates","watch","upd","ref","current","newValue","useStoreMap","configOrStore","separateFn","fn","updateFilter","keys","Array","isArray","result","useMemo","createStore","on","_","state","off","clearNode","deep","withDisplayName","name","Component","displayName","createComponent","shape","renderProp","RenderComponent","props","propsRef","mounted","unmounted","combine","storeName","shortName","createEvent","createReactState","createElement","Object","assign","useGate","GateComponent","open","close","a","b","aKeys","bKeys","length","i","key","shallowCompare","set","window","useLayoutEffect","useEffect","message","Error","View","context","ctx","useContext","defaultState","domain","hook","useGateHook","fullName","compositeName","status","Boolean","reset","hooks","launch","target","event","params","createGateImplementation","children","list","renderItem","getKey","Item","index","keyVal","fnRef","item","memo","keysSelfMemo","map","from"],"mappings":"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"}